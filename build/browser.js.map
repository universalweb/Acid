{"version":3,"file":"browser.js","sources":["../source/arrays/clear.js","../source/types/isUndefined.js","../source/utilities/hasLength.js","../source/types/isNull.js","../source/types/hasValue.js","../source/utilities/returnValue.js","../source/arrays/each.js","../source/arrays/compactMap.js","../source/arrays/eachAsync.js","../source/arrays/compactMapAsync.js","../source/numbers/isNegative.js","../source/arrays/range.js","../source/types/isArray.js","../source/classes/construct.js","../source/arrays/ensure.js","../source/arrays/flattenDeep.js","../source/utilities/forEach.js","../source/arrays/difference.js","../source/arrays/drop.js","../source/arrays/eachRight.js","../source/arrays/eachRightAsync.js","../source/arrays/every.js","../source/arrays/everyAsync.js","../source/arrays/filter.js","../source/arrays/filterAsync.js","../source/utilities/toPath.js","../source/utilities/get.js","../source/objects/keys.js","../source/objects/hasKeys.js","../source/types/isConstructor.js","../source/types/isTypeFactory.js","../source/types/isBuffer.js","../source/types/isPlainObject.js","../source/utilities/isEqual.js","../source/arrays/largest.js","../source/arrays/map.js","../source/arrays/concurrent.js","../source/arrays/mapAsync.js","../source/math/subtract.js","../source/math/subtractReverse.js","../source/math/randomInt.js","../source/internal/array.js","../source/arrays/shuffle.js","../source/arrays/smallest.js","../source/arrays/unique.js","../source/buffers/clear.js","../source/types/isFunction.js","../source/types/isNumber.js","../source/types/isString.js","../source/objects/assign.js","../source/classes/extendClass.js","../source/collection/findIndexCache.js","../source/collection/sortCollectionAlphabetically.js","../source/collection/sortCollectionAscending.js","../source/collection/sortCollectionDescending.js","../source/objects/pluckObject.js","../source/collection/sortCollectionAlphabeticallyReverse.js","../source/internal/regexTestFactory.js","../source/files/isFileCSS.js","../source/files/isFileHTML.js","../source/files/isFileJS.js","../source/files/isFileJSON.js","../source/objects/eachAsync.js","../source/objects/each.js","../source/types/isSet.js","../source/utilities/forOf.js","../source/types/isGenerator.js","../source/utilities/forOfAsync.js","../source/types/isAsync.js","../source/utilities/generateLoop.js","../source/utilities/each.js","../source/functions/chain.js","../source/objects/every.js","../source/utilities/noop.js","../source/utilities/stubArray.js","../source/utilities/stubFalse.js","../source/utilities/times.js","../source/utilities/stubObject.js","../source/utilities/stubTrue.js","../source/utilities/timer.js","../source/internal/apply.js","../source/types/getType.js","../source/types/cloneType.js","../source/utilities/forOfMap.js","../source/utilities/forOfMapAsync.js","../source/objects/mapAsync.js","../source/objects/map.js","../source/utilities/map.js","../source/objects/everyAsync.js","../source/utilities/forOfEvery.js","../source/utilities/forOfEveryAsync.js","../source/utilities/every.js","../source/utilities/cacheNativeMethod.js","../source/internal/object.js","../source/internal/isSame.js","../source/math/randomFloat.js","../source/numbers/isPositive.js","../source/objects/getEntries.js","../source/objects/compactMapAsync.js","../source/objects/compactMap.js","../source/objects/filter.js","../source/objects/filterAsync.js","../source/objects/isMatch.js","../source/regexps/escapeRegex.js","../source/regexps/arrayToRegex.js","../source/types/isRegex.js","../source/objects/size.js","../source/objects/zip.js","../source/strings/camelCase.js","../source/strings/kebabCase.js","../source/strings/snakeCase.js","../source/strings/upperCase.js","../source/strings/lowerCase.js","../source/strings/range.js","../source/strings/sanitize.js","../source/strings/tokenize.js","../source/strings/typography.js","../source/types/getTypeName.js","../source/types/isMap.js","../source/types/isTypedArray.js","../source/types/noValue.js","../source/types/isBigInt.js","../source/types/isBoolean.js","../source/types/isArrayBuffer.js","../source/types/isCloneable.js","../source/types/isDate.js","../source/types/isFalse.js","../source/types/isF32.js","../source/types/isF64.js","../source/types/isFloat.js","../source/types/isI16.js","../source/types/isI32.js","../source/types/isI8.js","../source/types/isPromise.js","../source/types/isKindAsync.js","../source/types/isSafeInt.js","../source/types/isU16.js","../source/types/isU32.js","../source/types/isU8.js","../source/types/isU8C.js","../source/types/isWeakMap.js","../source/types/isDeno.js","../source/types/isNode.js","../source/types/isTruthy.js","../source/utilities/notEqual.js","../source/utilities/json.js","../source/utilities/assert.js","../source/utilities/clone.js","../source/utilities/forOfCompactMapAsync.js","../source/utilities/forOfCompactMap.js","../source/utilities/compactMap.js","../source/utilities/forOfFilter.js","../source/utilities/forOfFilterAsync.js","../source/utilities/filter.js","../source/utilities/flow.js","../source/utilities/flowAsync.js","../source/utilities/hasDot.js","../source/utilities/interval.js","../source/browser/agent.js","../source/utilities/model.js","../source/utilities/promise.js","../source/utilities/store.js","../source/utilities/uid.js","../source/utilities/virtualStorage.js","../source/browser/event.js","../source/browser/frag.js","../source/browser/append.js","../source/browser/attribute.js","../source/browser/selector.js","../source/browser/importScript.js","../source/browser/ready.js","../source/browser/info.js","../source/browser/dimensions.js","../source/browser/storage.js","../source/browser/console.js","../source/math/add.js","../source/functions/after.js","../source/utilities/arraysToObject.js","../source/functions/ary.js","../source/functions/before.js","../source/utilities/bindAll.js","../source/math/progress.js","../source/arrays/chunk.js","../source/utilities/clear.js","../source/arrays/clone.js","../source/utilities/compact.js","../source/objects/compactKeys.js","../source/utilities/concurrent.js","../source/utilities/concurrentStatus.js","../source/collection/countBy.js","../source/collection/countKey.js","../source/collection/countWithoutKey.js","../source/functions/curry.js","../source/functions/curryRight.js","../source/functions/debounce.js","../source/math/deduct.js","../source/math/divide.js","../source/arrays/dropRight.js","../source/buffers/ensure.js","../source/utilities/everyArg.js","../source/collection/findIndex.js","../source/collection/findItem.js","../source/arrays/first.js","../source/arrays/flatten.js","../source/utilities/forEachAsync.js","../source/utilities/forMap.js","../source/files/getExtension.js","../source/files/getFilename.js","../source/collection/getHighest.js","../source/collection/getLowest.js","../source/arrays/getNumberInsertIndex.js","../source/collection/groupBy.js","../source/utilities/has.js","../source/functions/ifInvoke.js","../source/utilities/ifNotAssign.js","../source/utilities/ifValue.js","../source/functions/inAsync.js","../source/functions/inSync.js","../source/math/increment.js","../source/collection/indexBy.js","../source/arrays/initial.js","../source/arrays/intersect.js","../source/objects/invert.js","../source/arrays/invoke.js","../source/collection/invoke.js","../source/collection/invokeAsync.js","../source/types/isArguments.js","../source/types/isArrayLike.js","../source/types/isChild.js","../source/browser/is.js","../source/types/isEmpty.js","../source/browser/isEnter.js","../source/types/isFalsy.js","../source/types/isIterable.js","../source/arrays/isMatch.js","../source/numbers/isNumberEqual.js","../source/numbers/isNumberInRange.js","../source/numbers/isNumberNotInRange.js","../source/types/isParent.js","../source/types/isPrimitive.js","../source/types/isRelated.js","../source/types/isSameType.js","../source/types/isTrue.js","../source/numbers/isZero.js","../source/arrays/last.js","../source/arrays/mapRight.js","../source/arrays/mapWhile.js","../source/utilities/merge.js","../source/math/multiple.js","../source/functions/negate.js","../source/functions/nthArg.js","../source/objects/omit.js","../source/functions/once.js","../source/functions/over.js","../source/functions/overEvery.js","../source/utilities/pair.js","../source/arrays/partition.js","../source/objects/pick.js","../source/collection/pluck.js","../source/utilities/propertyMatch.js","../source/functions/rearged.js","../source/math/remainder.js","../source/arrays/remove.js","../source/strings/replace.js","../source/arrays/rest.js","../source/arrays/right.js","../source/arrays/sample.js","../source/utilities/setKey.js","../source/utilities/setValue.js","../source/arrays/sortNumberAscending.js","../source/arrays/sortNumberDescening.js","../source/utilities/stubString.js","../source/math/subtractAll.js","../source/math/sumAll.js","../source/arrays/take.js","../source/arrays/takeRight.js","../source/functions/throttle.js","../source/utilities/timesAsync.js","../source/utilities/toggle.js","../source/strings/truncate.js","../source/arrays/zip.js","../source/arrays/union.js","../source/arrays/untilFalse.js","../source/arrays/untilTrue.js","../source/arrays/whileCompactMap.js","../source/arrays/whileEach.js","../source/arrays/whileMap.js","../source/arrays/without.js","../source/functions/wrap.js","../source/arrays/xor.js"],"sourcesContent":["/**\n * Clears the values out of an array.\n *\n * @function clearArray\n * @category Array\n * @type {Function}\n * @param {Array} source - Takes an array to be emptied.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { clearArray, assert } from '@universalweb/acid';\n * assert(clearArray([1,'B', 'Cat']), []);\n */\nexport function clearArray(source) {\n\tsource.length = 0;\n\treturn source;\n}\n\n","/** Checks if the value is undefined.\n *\n * @function isUndefined\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isUndefined, assert } from '@universalweb/acid';\n * assert(isUndefined(undefined), true);\n */\nexport function isUndefined(source) {\n\treturn source === undefined;\n}\n","import { isUndefined } from '../types/isUndefined.js';\n/**\n * Checks if the value has length greater than 0.\n *\n * @function hasLength\n * @category utility\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { hasLength, assert } from '@universalweb/acid';\n * assert(hasLength([1]), true);\n */\nexport function hasLength(source) {\n\treturn Boolean(source.length);\n}\n","import { hasLength } from '../utilities/hasLength.js';\n/**\n * Checks if the value is null.\n *\n * @function isNull\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNull, assert } from '@universalweb/acid';\n * assert(isNull(null), true);\n */\nexport function isNull(source) {\n\treturn source === null;\n}\n","import { isNull } from './isNull.js';\nimport { isUndefined } from './isUndefined.js';\n/**\n * Checks if the value is not null or undefined.\n *\n * @function hasValue\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { hasValue, assert } from '@universalweb/acid';\n * assert(hasValue(1), true);\n */\nexport function hasValue(source) {\n\treturn !isUndefined(source) && !isNull(source);\n}\n","/**\n * A simple function which returns the value it's given.\n *\n * @function returnValue\n * @category utility\n * @param {*} source - The source object.\n * @returns {source} The source object.\n */\nexport function returnValue(source) {\n\treturn source;\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given array.\n *\n * @function eachArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, array length, and additionalArg.\n * @param {*} thisCall - Iteratee called with thisCall as this.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array|undefined} - The originally given array.\n *\n * @example\n * import { eachArray, assert } from '@universalweb/acid';\n * const list = [];\n * eachArray([1, 2, 3], (item, index) => {\n *   list[index] = item;\n * });\n * assert(list, [1, 2, 3]);\n */\nexport function eachArray(source, iteratee, thisCall, additionalArg) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst arrayLength = source.length;\n\tif (hasValue(thisCall)) {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\titeratee.call(thisCall, source[index], index, source, arrayLength, additionalArg);\n\t\t}\n\t} else {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\titeratee(source[index], index, source, arrayLength, additionalArg);\n\t\t}\n\t}\n\treturn source;\n}\n\n","import { eachArray } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.\n *\n * @function compactMapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array = []} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array} - An array with mapped properties that are not null or undefined.\n *\n * @example\n * import { compactMapArray, assert } from '@universalweb/acid';\n * assert(compactMapArray([null, 2, 3], (item) => {\n *   return item;\n * }), [2, 3]);\n */\nexport function compactMapArray(source, iteratee = returnValue, results = [], thisCall, additionalArg) {\n\tif (hasValue(thisCall)) {\n\t\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\t\tconst returned = iteratee.call(thisCall, item, index, results, arrayOriginal, arrayLength, additionalArg);\n\t\t\tif (hasValue(returned)) {\n\t\t\t\tresults.push(returned);\n\t\t\t}\n\t\t});\n\t} else {\n\t\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\t\tconst returned = iteratee(item, index, results, arrayOriginal, arrayLength, thisCall, additionalArg);\n\t\t\tif (hasValue(returned)) {\n\t\t\t\tresults.push(returned);\n\t\t\t}\n\t\t});\n\t}\n\treturn results;\n}\n","import { hasValue } from '../types/hasValue.js';\n/**\n * Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.\n *\n * @function eachAsyncArray\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, array length, and additionalArg.\n * @param {*} thisCall - Iteratee called with thisCall as this.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array|undefined} - Returns source the originally given array.\n *\n * @example\n * import { eachAsyncArray, assert } from '@universalweb/acid';\n * const tempList = [];\n * await eachAsyncArray([1, 2, 3], async (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [1, 2, 3]);\n */\nexport async function eachAsyncArray(source, iteratee, thisCall, additionalArg) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst arrayLength = source.length;\n\tif (hasValue(thisCall)) {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\tawait iteratee.call(thisCall, source[index], index, source, arrayLength, additionalArg);\n\t\t}\n\t} else {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\tawait iteratee(source[index], index, source, arrayLength, additionalArg);\n\t\t}\n\t}\n\treturn source;\n}\n\n","import { eachAsyncArray } from './eachAsync.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Asynchronously iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.\n *\n * @function compactMapAsyncArray\n * @type {Function}\n * @category array\n * @async\n * @param {Array} source - Array to be compacted.\n * @param {Function} iteratee - Iteratee to be performed on array.\n * @returns {Array} - Array values after being put through an iterator.\n *\n * @example\n * import { compactMapAsync, assert } from '@universalweb/acid';\n * assert(await compactMapAsync([1, 2, 3, null], async (item) => {\n *   return item;\n * }), [1, 2, 3]);\n */\nexport async function compactMapAsyncArray(source, iteratee = returnValue) {\n\tconst results = [];\n\tawait eachAsyncArray(source, async (item, index, arrayLength) => {\n\t\tconst result = await iteratee(item, index, results, arrayLength);\n\t\tif (hasValue(result)) {\n\t\t\tresults.push(result);\n\t\t}\n\t});\n\treturn results;\n}\n\n","/**\n * Checks if a number is negative & returns true or false.\n *\n * @function isNegative\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNegative, assert } from '@universalweb/acid';\n * assert(isNegative(-1), true);\n */\nconst { sign } = Math;\nexport function isNegative(source) {\n\treturn sign(source) === -1;\n}\n","import { isNegative } from '../numbers/isNegative.js';\nexport function rangeUp(start, end, step, sourceArray) {\n\tlet position = start;\n\twhile (position < end) {\n\t\tsourceArray.push(position);\n\t\tposition += step;\n\t}\n\treturn sourceArray;\n}\nexport function rangeDown(start, end, step, sourceArray) {\n\tlet position = start;\n\twhile (position > end) {\n\t\tsourceArray.push(position);\n\t\tposition -= step;\n\t}\n\treturn sourceArray;\n}\n/**\n * Create a numbered list of integers.\n *\n * @function range\n * @category array\n * @type {Function}\n * @param {Number} start - Value which determines the start of the range.\n * @param {Number} end - Value which determines the end of the range.\n * @param {Number} step - Value used to step between integers.\n * @returns {Array} - An array of integers.\n *\n * @example\n * import { range, assert } from '@universalweb/acid';\n * assert(range(0, 30, 5), [0, 5, 10, 15, 20, 25]);\n */\nexport function range(start, end, step = 1, sourceArray = []) {\n\tif (isNegative(step)) {\n\t\treturn sourceArray;\n\t}\n\tif (start < end) {\n\t\treturn rangeUp(start, end, step, sourceArray);\n\t} else {\n\t\treturn rangeDown(start, end, step, sourceArray);\n\t}\n}\n","/**\n * Checks if the value is an array. This references Array.isArray.\n *\n * @function isArray\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isArray, assert } from '@universalweb/acid';\n * assert(isArray([]), true);\n * assert(isArray(2), false);\n */\nexport const isArray = Array.isArray;\n/**\n * Checks if the value is not an array. This references Array.isArray.\n *\n * @function isNotArray\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNotArray, assert } from '@universalweb/acid';\n * assert(isNotArray([]), false);\n * assert(isNotArray(2), true);\n */\nexport function isNotArray(source) {\n\treturn !isArray(source);\n}\n","/**\n * A function which acts like the \"new\" operator and can pass arguments. This is a safe version of the original which will error if given undefined\n * This is useful when working with classes and prefering to avoid the new operator and it's potential side effects.\n *\n * @function construct\n * @category class\n * @param {Function} target - The target function or class.\n * @param {Array} [argumentsList =[]] - An array-like object specifying the arguments with which target should be called. Default value is a new empty array.\n * @param {Array} newTarget - The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target.\n * @returns {*} - A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.\n *\n * @example\n * import { construct, assert } from '@universalweb/acid';\n * class test {\n * \tconstructor(a) {\n * \t\treturn 1;\n * \t}\n * }\n * const newClass = construct(test, [1]);\n * assert(test, 1);\n */\nconst reflectConstruct = Reflect.construct;\nimport { isArray } from '../types/isArray.js';\nexport function construct(target, argumentsList = [], newTarget) {\n\tconst args = (isArray(argumentsList)) ? argumentsList : [argumentsList];\n\tif (newTarget) {\n\t\treturn reflectConstruct(target, args, newTarget);\n\t}\n\treturn reflectConstruct(target, args);\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\n/**\n * Ensures the source is an array if not the source is wrapped in a array or an empty array is returned.\n *\n * @function ensureArray\n * @category array\n * @type {Function}\n * @param {*} source - Object to be checked.\n * @returns {Array} - Returns an array.\n *\n * @example\n * import { isArray, ensureArray, assert } from '@universalweb/acid';\n * assert(isArray(ensureArray('test')), ['test']);\n */\nexport function ensureArray(source) {\n\treturn (isArray(source) && source) || (hasValue(source) && [source]) || [];\n}\n\n","import { ensureArray } from './ensure.js';\n/**\n * Flattens an array to a single level.\n *\n * @function flattenDeep\n * @type {Function}\n * @category array\n * @param {Array} source - Array to flatten.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * import { flattenDeep, assert } from '@universalweb/acid';\n * assert(flattenDeep([1, [2, [3, [4]], 5]]), [1, 2, 3, 4, 5]);\n */\nexport function flattenDeep(source) {\n\treturn source.flat(Infinity);\n}\n\n","export function forEach(source, callback) {\n\tsource.forEach(callback);\n\treturn source;\n}\n","import { construct } from '../classes/construct.js';\nimport { eachArray } from './each.js';\nimport { flattenDeep } from './flattenDeep.js';\nimport { forEach } from '../utilities/forEach.js';\n/**\n * Checks for primitive differences between a source array to other arrays, then returns a new array containing those differences.\n *\n * @function difference\n * @category array\n * @type {Function}\n * @param {...Array} sources - List of arrays to be compared.\n * @returns {Array|undefined} - An array which contains the differences between the source and compare array.\n *\n * @example\n * import { difference, assert } from '@universalweb/acid';\n * assert(difference([1, 2, 3], [1, 2]), [3]);\n */\nexport function difference(...sources) {\n\tconst differencesMap = construct(Map);\n\tconst differences = [];\n\teachArray(sources, (currentArray, parentIndex) => {\n\t\teachArray(currentArray, (child, childIndex) => {\n\t\t\tlet childRoot = differencesMap.get(child);\n\t\t\tif (!childRoot) {\n\t\t\t\tchildRoot = {\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tparentIndex,\n\t\t\t\t\tchild\n\t\t\t\t};\n\t\t\t\tdifferencesMap.set(child, childRoot);\n\t\t\t} else if (childRoot.parentIndex === parentIndex) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tchildRoot.count++;\n\t\t\t}\n\t\t});\n\t});\n\tforEach(differencesMap, (item) => {\n\t\tif (item.count === 1 && item.parentIndex === 0) {\n\t\t\tdifferences.push(item.child);\n\t\t}\n\t});\n\treturn differences;\n}\n\n","/**\n * Removes all items from an array after a specified index.\n *\n * @function drop\n * @category array\n * @type {Function}\n * @param {Array} array - Source array.\n * @param {Number} amount - Amount of items to drop from the array.\n * @param {Number} [upTo = array.length] - Index to stop at.\n * @returns {Array} - An array with all values removed after a user defined index.\n *\n * @example\n * import { drop, assert } from '@universalweb/acid';\n * assert(drop([1, 2, 3]), [2, 3]);\n * assert(drop([1, 2, 3], 2), [3]);\n */\nexport function drop(array, amount = 1, upTo = array.length) {\n\treturn array.splice(amount, upTo);\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given array in reverse.\n *\n * @function eachRight\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array|undefined} - The originally given array.\n *\n * @example\n * import { eachRight, assert } from '@universalweb/acid';\n * const tempList = [];\n * eachRight([1, 2, 3], (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [3, 2, 1]);\n */\nexport function eachRight(source, iteratee, additionalArgument) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst arrayLength = source.length;\n\tfor (let index = arrayLength - 1;index >= 0;index--) {\n\t\titeratee(source[index], index, source, arrayLength, additionalArgument);\n\t}\n\treturn source;\n}\n\n","/**\n * Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.\n *\n * @function eachRightAsync\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @returns {Object|undefined} - The originally given array.\n *\n * @example\n * import { eachRightAsync, assert } from '@universalweb/acid';\n * const tempList = [];\n * await eachRightAsync([1, 2, 3], async (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [3, 2, 1]);\n */\nexport async function eachRightAsync(source, iteratee) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst arrayLength = source.length;\n\tfor (let index = arrayLength - 1; index >= 0; index--) {\n\t\tawait iteratee(source[index], index, source, arrayLength);\n\t}\n\treturn source;\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given array while the iteratee returns true else the loop exits & returns false.\n *\n * @function everyArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array|undefined} - Returns true if all returns are true or false if one value returns false.\n *\n * @example\n * import { everyArray, assert } from '@universalweb/acid';\n * assert(everyArray([true, true, false], (item, index, source, sourceLength, additionalArgument) => {\n *   return item;\n * }), false);\n * assert(everyArray([true, true, true], (item, index, source, sourceLength, additionalArgument) => {\n *   return item;\n * }), true);\n */\nexport function everyArray(source, iteratee, additionalArgument) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst sourceLength = source.length;\n\tfor (let index = 0;index < sourceLength;index++) {\n\t\tif (iteratee(source[index], index, source, sourceLength, additionalArgument) === false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given array while the iteratee returns true else the loop exits & returns false.\n *\n * @function everyAsyncArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array|undefined} - Returns true if all returns are true or false if one value returns false.\n *\n * @example\n * import { everyAsyncArray, assert } from '@universalweb/acid';\n * assert(everyAsyncArray([true, true, false], (item, index, source, sourceLength, additionalArgument) => {\n *   return item;\n * }), false);\n * assert(everyAsyncArray([true, true, true], (item, index, source, sourceLength, additionalArgument) => {\n *   return item;\n * }), true);\n */\nexport async function everyAsyncArray(source, iteratee, additionalArgument) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst sourceLength = source.length;\n\tfor (let index = 0;index < sourceLength;index++) {\n\t\tif (await iteratee(source[index], index, source, sourceLength, additionalArgument) === false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n","import { eachArray } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.\n *\n * @function filterArray\n * @category array\n * @type {Function}\n * @category array\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - An array with properties that passed the test.\n *\n * @example\n * import { filterArray, assert } from '@universalweb/acid';\n * assert(filterArray([false, true, true], (item) => {\n *   return item;\n * }), [true, true]);\n */\nexport function filterArray(source, iteratee, results = [], additionalArgument) {\n\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\tif (iteratee(item, index, results, arrayOriginal, arrayLength, additionalArgument) === true) {\n\t\t\tresults.push(item);\n\t\t}\n\t});\n\treturn results;\n}\n\n","import { eachAsyncArray } from './eachAsync.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.\n *\n * @function filterAsyncArray\n * @category array\n * @type {Function}\n * @category array\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - An array with properties that passed the test.\n *\n * @example\n * import { filterAsyncArray, assert } from '@universalweb/acid';\n * assert(filterAsyncArray([false, true, true], (item) => {\n *   return item;\n * }), [true, true]);\n */\nexport async function filterAsyncArray(source, iteratee, results = [], additionalArgument) {\n\tawait eachAsyncArray(source, async (item, index, arrayOriginal, arrayLength) => {\n\t\tif (await iteratee(item, index, results, arrayOriginal, arrayLength, additionalArgument) === true) {\n\t\t\tresults.push(item);\n\t\t}\n\t});\n\treturn results;\n}\n\n","const regexToPath = /\\.|\\[/;\nconst regexCloseBracket = /]/g;\nconst emptyString = '';\n/**\n * Breaks up string into object chain list.\n *\n * @function toPath\n * @type {Function}\n * @category utility\n * @param {String} source - String to be broken up.\n * @returns {Array} - Array used to go through object chain.\n *\n * @example\n * import { toPath, assert } from '@universalweb/acid';\n * assert(toPath('post.like[2]'), ['post', 'like', '2']);\n */\nexport function toPath(source) {\n\treturn source.replace(regexCloseBracket, emptyString).split(regexToPath);\n}\n\n","import { everyArray } from '../arrays/every.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { toPath } from './toPath.js';\n/**\n * Returns property on an object.\n *\n * @function get\n * @category utility\n * @type {Function}\n * @param {String} propertyString - String used to retrieve properties.\n * @param {Object} target - Object which has a property retrieved from it.\n * @returns {Object} - Returns property from the given object.\n *\n * @example\n * import { get, assert } from '@universalweb/acid';\n * const objectTarget = {\n *   post: {\n *     like: ['a','b','c']\n *   }\n * };\n * assert(get('post.like[2]', objectTarget), 'c');\n */\nexport function get(propertyString, target) {\n\tif (!target) {\n\t\treturn false;\n\t}\n\tlet link = target;\n\tconst pathArray = (isArray(propertyString)) ? propertyString : toPath(propertyString);\n\teveryArray(pathArray, (item) => {\n\t\tlink = link[item];\n\t\treturn hasValue(link);\n\t});\n\treturn link;\n}\n\n","/**\n * Get object's keys.\n *\n * @function keys\n * @category object\n * @param {*} source - The source object to pull keys from.\n * @returns {Array} - Array of keys.\n *\n * @example\n * keys({a: 1, b: 2});\n * // => ['a', 'b']\n */\nconst objectKeys = Object.keys;\nexport function keys(source) {\n\tif (source) {\n\t\treturn objectKeys(source);\n\t}\n}\n","import { everyArray } from '../arrays/every.js';\nimport { get } from '../utilities/get.js';\nimport { keys } from './keys.js';\nimport { toPath } from '../utilities/toPath.js';\nconst hasOwn = Object.hasOwn;\n/**\n * Checks to see if an object has all of the given property names.\n *\n * @function hasKeys\n * @category object\n * @type {Function}\n * @param {Object} source - Source object to check for keys.\n * @param {...String} properties - List of strings to check.\n * @returns {Boolean|undefined} - Returns true or false.\n *\n * @example\n * import { hasKeys, assert } from '@universalweb/acid';\n * assert(hasKeys({a: {b: { c: 1}}}, 'a', 'a.b', 'a.b.c'), true);\n */\nexport function hasKeys(source, ...properties) {\n\tif (!source) {\n\t\treturn;\n\t}\n\treturn everyArray(properties, (item) => {\n\t\tconst pathArray = toPath(item);\n\t\tif (pathArray.length === 1) {\n\t\t\treturn hasOwn(source, item);\n\t\t} else {\n\t\t\tconst lastPath = pathArray.pop();\n\t\t\tconst initialPathObject = get(pathArray, source);\n\t\t\tif (initialPathObject) {\n\t\t\t\treturn hasOwn(initialPathObject, lastPath);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t});\n}\n/**\n * Checks to see if an object has any of the given property names.\n *\n * @function hasAnyKeys\n * @category object\n * @type {Function}\n * @param {Object} source - Source object to check for keys.\n * @param {Array} properties - List of strings to check.\n * @returns {Boolean|undefined} - Returns true or false.\n *\n * @example\n * import { hasAnyKeys, assert } from '@universalweb/acid';\n * assert(hasAnyKeys({a: {b: { yes : 1}}}, 'no', 'nope', 'a.b.yes'), true);\n * assert(hasAnyKeys({a: {b: { yes : 1}}}, 'no', 'nope', 'a.b.noped'), false);\n */\nexport function hasAnyKeys(source, ...properties) {\n\tif (!source) {\n\t\treturn;\n\t}\n\treturn Boolean(properties.find((item) => {\n\t\tconst pathArray = toPath(item);\n\t\tif (pathArray.length === 1) {\n\t\t\treturn hasOwn(source, item);\n\t\t} else {\n\t\t\tconst lastPath = pathArray.pop();\n\t\t\tconst initialPathObject = get(pathArray, source);\n\t\t\tif (initialPathObject) {\n\t\t\t\treturn hasOwn(initialPathObject, lastPath);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}));\n}\n\n","import { hasValue } from './hasValue.js';\n/**\n * Checks to see if the constructor is that of a native object.\n *\n * @function isConstructor\n * @category type\n * @param {Object} target - The object to be checked.\n * @param {Object} source - The source constructor object.\n * @returns {Object} - Returns the target object.\n *\n * @example\n * import { isConstructor, assert } from '@universalweb/acid';\n * assert(isConstructor(2, Number), true);\n */\nexport function isConstructor(target, source) {\n\treturn target?.constructor === source || false;\n}\nexport function isConstructorFactory(source) {\n\treturn (target) => {\n\t\treturn isConstructor(target, source);\n\t};\n}\nexport function constructorName(source) {\n\treturn source?.constructor?.name;\n}\nexport function isConstructorNameFactory(source) {\n\treturn (target) => {\n\t\treturn constructorName(target) === source || false;\n\t};\n}\n","import { everyArray } from '../arrays/every.js';\nexport function isTypeFactory(method) {\n\treturn function(primarySource, ...otherSources) {\n\t\tif (otherSources) {\n\t\t\treturn method(primarySource) && everyArray(otherSources, method);\n\t\t}\n\t\treturn method(primarySource);\n\t};\n}\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Buffer.\n *\n * @function isBuffer\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isBuffer, assert } from '@universalweb/acid';\n * assert(isBuffer(Buffer.from('test')), true);\n */\nexport const isBufferCall = isConstructorNameFactory('Buffer');\nexport const isBuffer = isTypeFactory(isBufferCall);\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the value is a plain object.\n *\n * @function isPlainObject\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isPlainObject } from '@universalweb/acid';\n * isPlainObject({});\n * // => true\n */\nexport const isPlainObject = (source) => {\n\tif (hasValue(source)) {\n\t\treturn source.constructor.toString().trim()\n\t\t\t.slice(9, 16) === 'Object(';\n\t}\n\treturn false;\n};\n","import { everyArray } from '../arrays/every.js';\nimport { hasKeys } from '../objects/hasKeys.js';\nimport { isArray } from '../types/isArray.js';\nimport { isBuffer } from '../types/isBuffer.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { keys } from '../objects/keys.js';\n/**\n * Performs a deep comparison between two objects & determines if the value is the same using strict comparison.\n *\n * @function isEqual\n * @type {Function}\n * @category utility\n * @param {*} source - Source object.\n * @param {*} target - Object to be compared.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isEqual, assert } from '@universalweb/acid';\n * assert(isEqual({a: [1,2,3]}, {a: [1,2,3]}), true);\n */\n// Add map & buffer Support - Review required for performance and support for more types\nexport const isEqual = (source, target) => {\n\tif (source === target) {\n\t\treturn true;\n\t} else if (isBuffer(source)) {\n\t\treturn source.equals(target);\n\t} else if (source.toString() === target.toString()) {\n\t\tif (isPlainObject(source)) {\n\t\t\tconst sourceProperties = keys(source);\n\t\t\tif (hasKeys(target, sourceProperties)) {\n\t\t\t\treturn everyArray(sourceProperties, (key) => {\n\t\t\t\t\treturn isEqual(source[key], target[key]);\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (isArray(source)) {\n\t\t\tif (source.length === target.length) {\n\t\t\t\treturn everyArray(source, (item, index) => {\n\t\t\t\t\treturn isEqual(item, target[index]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n","const mathNativeMax = Math.max;\n/**\n * Plucks the largest value from an array.\n *\n * @function largest\n * @type {Function}\n * @category array\n * @param {Array} array - Array from which largest number is taken.\n * @returns {Number} - The largest number.\n *\n * @example\n * import { largest, assert } from '@universalweb/acid';\n * assert(largest([1,2,3]), 3);\n */\nexport function largest(array) {\n\treturn mathNativeMax(...array);\n}\n\n","import { eachArray } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n *\n * @function mapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapArray, assert } from '@universalweb/acid';\n * assert(mapArray([1, 2, 3], (item) => {\n *   return item * 2;\n * }), [2, 4, 6]);\n */\nexport function mapArray(source, iteratee, results = [], thisCall, additionalArg) {\n\tif (hasValue(thisCall)) {\n\t\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\t\tresults[index] = iteratee.call(thisCall, item, index, results, arrayOriginal, arrayLength, additionalArg);\n\t\t});\n\t} else {\n\t\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\t\tresults[index] = iteratee(item, index, results, arrayOriginal, arrayLength, additionalArg);\n\t\t});\n\t}\n\treturn results;\n}\n","/**\n * Iterates through an array, invokes the async iteratee, and adds the promises to a queue. Then uses & returns the Promise.all on the queue returning the values from each promise. Does not await on the async iteratee.\n *\n * @function concurrentArray\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @returns {Promise|Array|undefined} - An array of the same calling array's type.\n *\n * @example\n * import { concurrentArray, assert } from '@universalweb/acid';\n * const results = await concurrentArray([1, 2, 3], async (item) => {\n *   return item * 2;\n * });\n * assert(has(results, [2, 4, 6]), true);\n */\nexport async function concurrentArray(source, iteratee) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst results = [];\n\tconst arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tresults[index] = iteratee(source[index], index, results, arrayLength);\n\t}\n\treturn Promise.all(results);\n}\n","import { eachAsyncArray } from './eachAsync.js';\n/**\n * Asynchronously iterates through the calling array and creates an array with the results of the iteratee (invoked and awaited one at a time) on every element in the calling array. If you want things happenign in parallel, use mapAllAsyncArray.\n *\n * @function mapAsyncArray\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapAsyncArray, assert } from '@universalweb/acid';\n * assert(await mapAsyncArray([1, 2, 3], async (item) => {\n *   return item * 2;\n * }), [2, 4, 6]);\n */\nexport async function mapAsyncArray(source, iteratee) {\n\tconst results = [];\n\tawait eachAsyncArray(source, async (item, index, arrayLength) => {\n\t\tresults[index] = await iteratee(item, index, results, arrayLength);\n\t});\n\treturn results;\n}\n\n","/**\n * Subtracts the subtrahend (second argument) from the minuend (first argument).\n *\n * @function subtract\n * @category math\n * @type {Function}\n * @param {Number} minuend - The minuend.\n * @param {Number} subtrahend - The subtrahend.\n * @returns {Number} - Returns the difference.\n *\n * @example\n * import { subtract, assert } from '@universalweb/acid';\n * assert(subtract(3, 1), 2);\n */\nexport function subtract(minuend, subtrahend) {\n\treturn minuend - subtrahend;\n}\n","/**\n * Subtracts the subtrahend (first argument) from the minuend (second argument). The arguments are reversed compared to the subtract function.\n *\n * @function subtractReverse\n * @category math\n * @type {Function}\n * @param {Number} subtrahend - The subtrahend.\n * @param {Number} minuend - The minuend.\n * @returns {Number} - Returns the difference.\n *\n * @example\n * import { subtractReverse, assert } from '@universalweb/acid';\n * assert(subtractReverse(1, 3), 2);\n */\nexport function subtractReverse(subtrahend, minuend) {\n\treturn minuend - subtrahend;\n}\n","const {\n\tfloor,\n\trandom\n} = Math;\n/**\n * Roduces a random whole number between min (included) and max (excluded). Do not use for security or encryption..\n *\n * @function randomInt\n * @category number\n * @type {Function}\n * @param {Number} max - The highest possible value for the random number.\n * @param {Number} [min = 0] - Establishes lowest possible value for the random number.\n * @returns {Number} - Returns random integer between the max and min range.\n *\n * @example\n * import { randomInt, assert } from '@universalweb/acid';\n * assert(randomInt(10, 0), (value) => { return value > 0 && value < 10;});\n */\nexport function randomInt(max, min = 0) {\n\treturn floor(random() * (max - min)) + min;\n}\n","import { hasValue } from '../types/hasValue.js';\nconst arrayFrom = Array.from;\n/**\n * The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object. This just has a null & undefined safety check.\n *\n * @function toArray\n * @category array\n * @param {*} arrayLike - Array like object.\n * @param {Function} mapFn - Function to map over the array.\n * @param {*} thisArg - MapFn's \"this\".\n * @returns {Array|undefined} - New array.\n *\n * @example\n * import { toArray, assert } from '@universalweb/acid';\n * assert(toArray(new Map([[1, 2]])), [[1, 2]]);\n */\nexport function toArray(arrayLike, mapFn, thisArg) {\n\tif (hasValue(arrayLike)) {\n\t\treturn arrayFrom(arrayLike, mapFn, thisArg);\n\t}\n}\n","import { isNumberEqual } from '../numbers/isNumberEqual.js';\nimport { randomInt } from '../math/randomInt.js';\nimport { toArray } from '../internal/array.js';\n/**\n * Shuffle an array and return a new array.\n *\n * @function shuffle\n * @category array\n * @param {Array} target - Target Array to be shuffled.\n * @param {Number} amount - The amount of times to shuffle the array.\n * @returns {Array} - An array with the shuffled results.\n *\n * @example\n * import { shuffle, assert } from '@universalweb/acid';\n * assert(shuffle([1, 2, 3, 4]), [3, 4, 2, 1]);\n */\nexport function shuffle(target, amount = target.length) {\n\tif (target.length <= 1) {\n\t\treturn toArray(target);\n\t}\n\tconst shuffleArray = toArray(target);\n\tlet count = 0;\n\tlet index;\n\tlet value;\n\twhile (count < amount) {\n\t\tindex = randomInt(shuffleArray.length - 1, 0);\n\t\tvalue = shuffleArray[count];\n\t\tshuffleArray[count] = shuffleArray[index];\n\t\tshuffleArray[index] = value;\n\t\tcount++;\n\t}\n\treturn shuffleArray;\n}\n\n","const mathNativeMin = Math.min;\n/**\n * Plucks the smallest value from an array.\n *\n * @function smallest\n * @category array\n * @type {Function}\n * @param {Array} array - Array from which smallest number is taken.\n * @returns {Number} - The smallest number.\n *\n * @example\n * smallest([1,2,3]);\n * // => 1\n */\nexport function smallest(array) {\n\treturn mathNativeMin(...array);\n}\n\n","export function onlyUnique(value, index, array) {\n\treturn array.indexOf(value) === index;\n}\nexport function sortUnique(item, index, array) {\n\treturn item !== array[index - 1];\n}\n/**\n * Filters the array down to unique elements.\n *\n * @function unique\n * @category array\n * @type {Function}\n * @param {Array} source - The array to be filtered.\n * @param {Boolean} isSorted - Flag which means the array is already sorted.\n * @returns {Array} - The filtered array.\n *\n * @example\n * unique([1, 2, 2, 4]);\n * // => [1, 2, 4]\n */\nexport function unique(source, isSorted) {\n\tif (isSorted) {\n\t\treturn source.filter(sortUnique);\n\t}\n\treturn source.filter(onlyUnique);\n}\n\n","/**\n * Clears the values out of a buffer.\n *\n * @function clearBuffer\n * @category buffer\n * @type {Function}\n * @param {Array} source - Takes an array to be emptied.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { clearBuffer, assert } from '@universalweb/acid';\n * assert(clearBuffer(Buffer.from([1,'B', 'Cat'])), Buffer.from([]));\n */\nexport function clearBuffer(source) {\n\tsource.fill(0);\n\treturn source;\n}\n\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if an object or objects are a plain object.\n *\n * @function isFunction\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFunction } from '@universalweb/acid';\n * isFunction(() => {});\n * // => true\n */\nexport const isFunction = (source) => {\n\treturn (hasValue(source)) ? source instanceof Function : false;\n};\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if the value is a number.\n *\n * @function isNumber\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNumber, assert } from '@universalweb/acid';\n * assert(isNumber(1), true);\n */\nexport const isNumberCall = isConstructorNameFactory('Number');\nexport const isNumber = isTypeFactory(isNumberCall);\n/**\n * Checks if the value is not a number.\n *\n * @function isNotNumber\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNotNumber, assert } from '@universalweb/acid';\n * assert(isNotNumber(1), false);\n */\nexport function isNotNumber(source) {\n\treturn !isNumber(source);\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the value is a string.\n *\n * @function isString\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isString, assert } from '@universalweb/acid';\n * assert(isString('hello'), true);\n * assert(isString(1), false);\n */\nexport const isString = isConstructorFactory(String);\n/**\n * Checks if the value is not a string.\n *\n * @function isNotString\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNotString, assert } from '@universalweb/acid';\n * assert(isNotString(1), true);\n * assert(isNotString('hello'), false);\n */\nexport function isNotString(source) {\n\treturn !isString(source);\n}\n","import { extendClass } from '../classes/extendClass.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isNumber } from '../types/isNumber.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isString } from '../types/isString.js';\nexport const objectAssign = Object.assign;\nexport function assignToObject(target, source) {\n\tif (isPlainObject(source)) {\n\t\tobjectAssign(target, source);\n\t} else if (isFunction(source)) {\n\t\tconst key = source.name;\n\t\tif (key) {\n\t\t\ttarget[key] = source;\n\t\t} else {\n\t\t\tobjectAssign(target, source);\n\t\t}\n\t} else if (isString(source) || isNumber(source)) {\n\t\ttarget[source] = source;\n\t}\n\treturn target;\n}\n/**\n * Copy the values of all enumerable own properties from one or more source objects to a target object. However, if an object is a function it will try and use its name as the key and the function itself as the value to assign to the target object. If it's a function without a name then it will do a straight object assign. It will do the same for strings and numbers except that it will use for both the key and the value the provided string or number. It will return the target object. If a raw object.assign is needed just import objectAssign from this module.\n *\n * @function assign\n * @category object\n * @param {Object} target - The target object.\n * @param {...Object} sources - The source object(s).\n * @returns {Object} - Returns the target object.\n *\n * @example\n * import { assign, assert } from '@universalweb/acid';\n * assert(assign({a: 1}, {b: 2}, function c() { return 3; }, 'd', 5), {a: 1, b: 2, c, d: 'd', 5: 5});\n */\nexport function assign(target, ...sources) {\n\tconst sourceLength = sources.length;\n\tfor (let index = 0; index < sourceLength; index++) {\n\t\tassignToObject(target, sources[index]);\n\t}\n\treturn target;\n}\n","import { isConstructor } from '../types/isConstructor.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isNumber } from '../types/isNumber.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isString } from '../types/isString.js';\nimport { objectAssign } from '../objects/assign.js';\nexport function assignToClass(target, source) {\n\tif (isPlainObject(source)) {\n\t\tobjectAssign(target.prototype, source);\n\t} else if (isFunction(source)) {\n\t\tconst key = source.name;\n\t\tif (key) {\n\t\t\ttarget.prototype[key] = source;\n\t\t}\n\t} else if (isConstructor(source)) {\n\t\tconst key = source.constructor?.name;\n\t\tif (key) {\n\t\t\ttarget.prototype[key] = source;\n\t\t}\n\t} else if (isString(source) || isNumber(source)) {\n\t\ttarget.prototype[source] = source;\n\t}\n\treturn target;\n}\n/**\n * The function adds a new method to a class.\n * @param {Class} target - The target parameter refers to the Class or constructor function to which you want\n * to add a new method.\n * @param {Function|Object|String|Number} sources - What you want to add to the class.\n * @returns {Class} - Returns the Class provided in the target parameter.\n *\n * @example\n * import { extendClass, assert } from '@universalweb/acid';\n * class Test {}\n * function a(){return 1;}\n * extendClass(Test, a)\n * assert((new Test()).a(), 1);\n */\nexport function extendClass(target, ...sources) {\n\tconst sourceLength = sources.length;\n\tfor (let index = 0; index < sourceLength; index++) {\n\t\tassignToClass(target, sources[index]);\n\t}\n\treturn target;\n}\n","export function findIndexCache(element, index, array, indexMatch, propertyName) {\n\tif (element[propertyName] === indexMatch) {\n\t\treturn true;\n\t}\n}\n","export function sortObjectsAlphabetically(previous, next, propertyName, ifMatch) {\n\tconst previousKey = previous[propertyName];\n\tconst nextKey = next[propertyName];\n\tif (previousKey === nextKey && ifMatch) {\n\t\treturn ifMatch(previous, next, propertyName);\n\t}\n\treturn previousKey.localeCompare(nextKey);\n}\n/**\n * Perform alphabetical A-Z sort on a collection with the provided key name. Mutates the array.\n *\n * @function sortCollectionAlphabetically\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - Name of property to compare.\n * @param {Function} ifMatch - A function which returns a number for the sort function if two object properties match.\n * @returns {Array} - The sorted array.\n *\n * @example\n * import { sortCollectionAlphabetically, assert } from '@universalweb/acid';\n * const result = [{\"letter\":\"a\"},{\"letter\":\"c\", g: 0},{\"letter\":\"c\", g: 2}, {letter:'f'}];\n * const collect = [{letter:'a'}, {letter:'f'}, {\"letter\":\"c\", g: 2}, {letter:'c', g: 0}];\n * const prop = 'letter';\n * function ifMatchSort(c, n) {\n * if (c.g < n.g) {\n * return -1;\n * }\n * if (c.g > n.g) {\n * return 1;\n\t* }\n * }\n * assert(sortCollectionAlphabetically(collect, prop, ifMatchSort), result);\n */\nexport function sortCollectionAlphabetically(collection, propertyName = 'id', ifMatch) {\n\treturn collection.sort((previous, next) => {\n\t\treturn sortObjectsAlphabetically(previous, next, propertyName, ifMatch);\n\t});\n}\n","export function sortCollectionAscendingFilter(previous, next, propertyName, ifMatch) {\n\tconst previousKey = previous[propertyName];\n\tconst nextKey = next[propertyName];\n\tif (previousKey === nextKey && ifMatch) {\n\t\treturn ifMatch(previous, next, propertyName);\n\t}\n\tif (!nextKey) {\n\t\treturn 1;\n\t} else if (!previousKey) {\n\t\treturn -1;\n\t} else if (previousKey < nextKey) {\n\t\treturn -1;\n\t} else if (previousKey > nextKey) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n/**\n * Sorts an array in place using a key in ascending order.\n *\n * @function sortCollectionAscending\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - The property name to sort by based on it's value.\n * @param {Function} ifMatch - A function which returns a number for the sort function if two object properties match.\n * @returns {Array} - The sorted array and or a clone of the array sorted.\n *\n * @example\n * import { sortCollectionAscending, assert } from '@universalweb/acid';\n * const result = [{id: 0}, {id: 1}];\n * const collect = [{id: 1}, {id: 0}];\n * const prop = 'id';\n * assert(sortCollectionAscending(collect, prop), result);\n */\nexport function sortCollectionAscending(collection, propertyName = 'id', ifMatch) {\n\treturn collection.sort((previous, next) => {\n\t\treturn sortCollectionAscendingFilter(previous, next, propertyName, ifMatch);\n\t});\n}\n","export function sortCollectionDescendingFilter(previous, next, propertyName, ifMatch) {\n\tconst previousKey = previous[propertyName];\n\tconst nextKey = next[propertyName];\n\tif (previousKey === nextKey && ifMatch) {\n\t\treturn ifMatch(previous, next, propertyName);\n\t}\n\tif (!nextKey) {\n\t\treturn -1;\n\t} else if (!previousKey) {\n\t\treturn 1;\n\t} else if (previousKey < nextKey) {\n\t\treturn 1;\n\t} else if (previousKey > nextKey) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n/**\n * Sorts an array in place using a key in descending order.\n *\n * @function sortCollectionDescending\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - The property name to sort by based on it's value.\n * @param {Function} ifMatch - A function which returns a number for the sort function if two object properties match.\n * @returns {Array} - The sorted array and or a clone of the array sorted.\n *\n * @example\n * import { sortCollectionDescending, assert } from '@universalweb/acid';\n * const result = [{id: 1}, {id: 0}];\n * const collect = [{id: 0}, {id: 1}];\n * const prop = 'id';\n * assert(sortCollectionDescending(collect, prop), result);\n */\nexport function sortCollectionDescending(collection, propertyName = 'id', ifMatch) {\n\treturn collection.sort((previous, next) => {\n\t\treturn sortCollectionDescendingFilter(previous, next, propertyName, ifMatch);\n\t});\n}\n\n","import { isString } from '../types/isString.js';\nimport { mapArray } from '../arrays/map.js';\n/**\n * Returns an array of the plucked sources from the object. Sources are plucked in the order given by the array.\n *\n * @function pluckObject\n * @category object\n * @type {Function}\n * @param {Object} source - Array used to determine what sources to be plucked.\n * @param {String|Array} targets - Property name.\n * @returns {Array|undefined} - An array of plucked sources.\n *\n * @example\n * import { pluckObject, assert } from '@universalweb/acid';\n * assert(pluckObject({a: 1, b:3}, ['a','b']), [1, 3]);\n */\nexport function pluckObject(source, targets) {\n\tif (!source) {\n\t\treturn;\n\t} else if (isString(targets)) {\n\t\treturn source[targets];\n\t}\n\treturn mapArray(targets, (item) => {\n\t\treturn source[item];\n\t});\n}\n\n","export function sortObjectsAlphabeticallyReverse(previous, next, propertyName, ifMatch) {\n\tconst previousKey = previous[propertyName];\n\tconst nextKey = next[propertyName];\n\tif (previousKey === nextKey && ifMatch) {\n\t\treturn ifMatch(previous, next, propertyName);\n\t}\n\treturn nextKey.localeCompare(previousKey);\n}\n/**\n * Perform alphabetical in reverse Z-A sort on a collection with the provided key name. Mutates the array.\n *\n * @function sortCollectionAlphabeticallyReverse\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - Name of property to compare.\n * @param {Function} ifMatch - A function which returns a number for the sort function if two object properties match.\n * @returns {Array} - The sorted array.\n *\n * @example\n * import { sortCollectionAlphabeticallyReverse, assert } from '@universalweb/acid';\n * const result = [{letter:'f'},{\"letter\":\"c\"}, {\"letter\":\"a\"}];\n * const collect = [{letter:'a'}, {letter:'f'}, {\"letter\":\"c\"}];\n * const prop = 'letter';\n * assert(sortCollectionAlphabeticallyReverse(collect, prop), result);\n */\nexport function sortCollectionAlphabeticallyReverse(collection, propertyName = 'id', ifMatch) {\n\treturn collection.sort((previous, next) => {\n\t\treturn sortObjectsAlphabeticallyReverse(previous, next, propertyName, ifMatch);\n\t});\n}\n","import { hasValue } from '../types/hasValue.js';\nexport function regexTestFactory(regexType) {\n\treturn (item) => {\n\t\treturn (hasValue(item)) ? regexType.test(item) : false;\n\t};\n}\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .css extension.\n *\n * @function isFileCSS\n * @category file\n * @param {String} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFileCSS, assert } from '@universalweb/acid';\n * assert(isFileCSS('test.css'), true);\n */\nexport const isFileCSS = regexTestFactory(/\\.css$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .html extension.\n *\n * @function isFileHTML\n * @category file\n * @param {String} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFileHTML, assert } from '@universalweb/acid';\n * assert(isFileHTML('test.html'), true);\n */\nexport const isFileHTML = regexTestFactory(/\\.html$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .js extension.\n *\n * @function isFileJS\n * @category file\n * @param {String} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFileJS, assert } from '@universalweb/acid';\n * assert(isFileJS('test.js'), true);\n */\nexport const isFileJS = regexTestFactory(/\\.js$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .json extension.\n *\n * @function isFileJSON\n * @category file\n * @param {String} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFileJSON, assert } from '@universalweb/acid';\n * assert(isFileJSON('test.json'), true);\n */\nexport const isFileJSON = regexTestFactory(/\\.json$/);\n","import { eachAsyncArray } from '../arrays/eachAsync.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { keys } from './keys.js';\n/**\n * Asynchronously iterates through the given object.\n *\n * @function eachAsyncObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling object, key count, array of keys, and additionalArg.\n * @param {*} thisCall - Iteratee called with thisCall as this.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Object|Function|undefined} - Returns source.\n *\n * @example\n * import { eachAsyncObject, assert } from '@universalweb/acid';\n * const tempList = [];\n * await eachAsyncObject({a: 1, b: 2, c: 3}, async (item, key) => {\n *     tempList[key] = item;\n *   });\n * assert(tempList, {a: 1, b: 2, c: 3});\n */\nexport const eachAsyncObject = async (source, iteratee, thisCall, additionalArg) => {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst objectKeys = keys(source);\n\tif (hasValue(thisCall)) {\n\t\tawait eachAsyncArray(objectKeys, (key, index, array, propertyCount) => {\n\t\t\treturn iteratee.call(thisCall, source[key], key, source, propertyCount, objectKeys, additionalArg);\n\t\t});\n\t} else {\n\t\tawait eachAsyncArray(objectKeys, (key, index, array, propertyCount) => {\n\t\t\treturn iteratee(source[key], key, source, propertyCount, objectKeys, additionalArg);\n\t\t});\n\t}\n\treturn source;\n};\n\n","import { eachArray } from '../arrays/each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { keys } from './keys.js';\n/**\n * Iterates through the given object.\n *\n * @function eachObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Object|Function|undefined} - Returns the calling object.\n *\n * @example\n * import { eachObject, assert } from '@universalweb/acid';\n * assert(eachObject({a: 1, b: 2, c: 3}, (item) => {\n *   console.log(item);\n * }), {a: 1, b: 2, c: 3});\n */\nexport function eachObject(source, iteratee, thisCall, additionalArg) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst objectKeys = keys(source);\n\tif (hasValue(thisCall)) {\n\t\teachArray(objectKeys, (key, index, objectKeysArray, propertyCount) => {\n\t\t\titeratee.call(thisCall, source[key], key, source, propertyCount, objectKeysArray, additionalArg);\n\t\t});\n\t} else {\n\t\teachArray(objectKeys, (key, index, objectKeysArray, propertyCount) => {\n\t\t\titeratee(source[key], key, source, propertyCount, objectKeysArray, additionalArg);\n\t\t});\n\t}\n\treturn source;\n}\n\n","import { hasValue } from './hasValue.js';\nimport { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object(s) is a Set.\n *\n * @function isSet\n * @category type\n * @param {...*} sources - Objects to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isSet, assert } from '@universalweb/acid';\n * assert(isSet(new Set()), true);\n */\nexport const isSetCall = isConstructorNameFactory('Set');\nexport const isSet = isTypeFactory(isSetCall);\n","import { isSet } from '../types/isSet.js';\nexport function forOf(source, iteratee) {\n\tif (isSet(source)) {\n\t\tfor (const value of source) {\n\t\t\titeratee(value, source);\n\t\t}\n\t\treturn source;\n\t}\n\tfor (const [key, value] of source) {\n\t\titeratee(value, key, source);\n\t}\n\treturn source;\n}\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Int16Array.\n *\n * @function isGenerator\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isGenerator } from '@universalweb/acid';\n * isGenerator(function* (){});\n * // => true\n */\nexport const isGeneratorCall = isConstructorNameFactory('GeneratorFunction');\nexport const isGenerator = isTypeFactory(isGeneratorCall);\n","import { isGenerator } from '../types/isGenerator.js';\nimport { isSet } from '../types/isSet.js';\nexport async function forOfAsync(source, iteratee, generatorArgs) {\n\tif (isSet(source)) {\n\t\tfor (const value of source) {\n\t\t\tawait iteratee(value, source);\n\t\t}\n\t\treturn source;\n\t}\n\tif (isGenerator(source)) {\n\t\tfor await (const item of source(...generatorArgs)) {\n\t\t\tawait iteratee(item, source);\n\t\t}\n\t}\n\tfor (const [key, value] of source) {\n\t\tawait iteratee(value, key, source);\n\t}\n\treturn source;\n}\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object is an async function.\n *\n * @function isAsync\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - True or false.\n *\n * @example\n * import { isAsync, assert } from '@universalweb/acid';\n * assert(isAsync(async() => {}), true);\n */\nexport const isAsyncCall = isConstructorNameFactory('AsyncFunction');\nexport const isAsync = isTypeFactory(isAsyncCall);\n\n","import { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isAsync } from '../types/isAsync.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nexport function generateLoop(arrayLoop, arrayLoopAsync, objectLoop, objectLoopAsync, forOfLoop, forOfLoopAsync) {\n\treturn (source, iteratee, argument1, argument2, argument3) => {\n\t\tlet returned;\n\t\tconst isIterateeAsync = isAsync(iteratee);\n\t\tif (!hasValue(source) || !iteratee) {\n\t\t\treturn;\n\t\t} else if (isArray(source)) {\n\t\t\treturned = (isIterateeAsync) ? arrayLoopAsync : arrayLoop;\n\t\t} else if (isPlainObject(source) || isFunction(source)) {\n\t\t\treturned = (isIterateeAsync) ? objectLoopAsync : objectLoop;\n\t\t} else if (forOfLoop) {\n\t\t\treturned = (isIterateeAsync) ? forOfLoopAsync : forOfLoop;\n\t\t} else if (isGenerator(source)) {\n\t\t\treturned = forOfLoopAsync;\n\t\t} else {\n\t\t\treturned = (isIterateeAsync) ? objectLoopAsync : objectLoop;\n\t\t}\n\t\treturn returned(source, iteratee, argument1, argument2, argument3);\n\t};\n}\n\n","import { eachArray } from '../arrays/each.js';\nimport { eachAsyncArray } from '../arrays/eachAsync.js';\nimport { eachAsyncObject } from '../objects/eachAsync.js';\nimport { eachObject } from '../objects/each.js';\nimport { forEach } from './forEach.js';\nimport { forEachAsync } from './forEachAsync.js';\nimport { forOf } from './forOf.js';\nimport { forOfAsync } from './forOfAsync.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the given object.\n *\n * @function each\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array | object | Function} - The originally given object.\n *\n * @example\n * import { each, assert } from '@universalweb/acid';\n * const list = {};\n * each({a: 1, b: 2, c: 3}, (item, key) => {\n *   list[key] = item;\n * });\n * assert(list, {a: 1, b: 2, c: 3});\n */\nexport const each = generateLoop(eachArray, eachAsyncArray, eachObject, eachAsyncObject, forOf, forOfAsync);\n\n","import { assign } from '../objects/assign.js';\nimport { construct } from '../classes/construct.js';\nimport { each } from '../utilities/each.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nexport class Chain {\n\tconstructor(methods) {\n\t\tthis.addChainMethod(methods);\n\t}\n\taddChainMethod(methods) {\n\t\tconst thisChain = this;\n\t\teach(methods, (method, methodName) => {\n\t\t\tthisChain[methodName] = function(...args) {\n\t\t\t\tthis.value = method.call(thisChain, thisChain.value, ...args);\n\t\t\t\treturn thisChain;\n\t\t\t};\n\t\t});\n\t}\n\tsetValue(value) {\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\tdone() {\n\t\tconst value = this.value;\n\t\tthis.value = null;\n\t\treturn value;\n\t}\n\tvalue = null;\n}\n/**\n * Creates a chainable set of functions.\n *\n * @function chain\n * @category function\n * @type {Function}\n * @param {Array|Object} config - The object to take methods from.\n * @returns {*} - Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.\n *\n * @example\n * import { chain, assert } from '@universalweb/acid';\n * const chained = chain({\n * \ta(value, c) {\n * \t\treturn value + c;\n * \t}\n * }).setValue(2).a(1).done();\n * assert(chained, 3);\n */\nexport function chain(config) {\n\treturn construct(Chain, [config]);\n}\n\n","import { everyArray } from '../arrays/every.js';\nimport { keys } from './keys.js';\n/**\n * Iterates through the given object while the iteratee returns true.\n *\n * @function everyObject\n * @category object\n * @type {Function}\n * @param {Object} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @returns {Boolean|undefined} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { everyObject, assert } from '@universalweb/acid';\n * const result =  everyObject({a: true, b: true, c: true}, (item) => {\n *   return item;\n * });\n * assert(result, true);\n */\nexport function everyObject(source, iteratee) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst objectKeys = keys(source);\n\treturn everyArray(objectKeys, (key, index, original, propertyCount) => {\n\t\treturn iteratee(source[key], key, source, propertyCount, original);\n\t});\n}\n","import { everyObject } from '../objects/every';\n/**\n * This method returns undefined.\n *\n * @function noop\n * @category function\n * @type {Function}\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * import { noop, assert } from '@universalweb/acid';\n * assert(noop(), undefined);\n */\nexport function noop() {\n\treturn;\n}\n\n","import { noop } from './noop';\n/**\n * This method returns a new empty array.\n *\n * @function stubArray\n * @category utility\n * @type {Function}\n * @returns {Array} - Returns the new empty array.\n *\n * @example\n * import { stubArray, assert } from '@universalweb/acid';\n * assert(stubArray(), []);\n */\nexport const stubArray = () => {\n\treturn [];\n};\n\n","import { stubArray } from './stubArray';\n/**\n * This method returns false.\n *\n * @function stubFalse\n * @category utility\n * @type {Function}\n * @returns {Boolean} - Returns false.\n *\n * @example\n * import { stubFalse, assert } from '@universalweb/acid';\n * assert(stubFalse(), false);\n */\nexport const falsy = false;\nexport const stubFalse = () => {\n\treturn falsy;\n};\n","/**\n * Iterates based on the amount given invoking the iteratee with the current index as an argument.\n *\n * @function times\n * @category utility\n * @type {Function}\n * @param {Number} amount - The amount of times to loop invoking the iteratee.\n * @param {Function} iteratee - Transformation function which is passed index and amount.\n * @returns {undefined} - Nothing.\n *\n * @example\n * import { times } from '@universalweb/acid';\n * times(3, (item) => {\n *   console.log(item);\n * });\n * // 0\n * // 1\n * // 2\n * // => undefined\n */\nexport function times(amount, iteratee) {\n\tfor (let index = 0; index < amount; index++) {\n\t\titeratee(index);\n\t}\n}\n/**\n * Iterates based on the amount given and maps the results returned by the iteratee each time to an array.\n *\n * @function timesMap\n * @category utility\n * @type {Function}\n * @param {Number} amount - The amount of times to loop invoking the iteratee.\n * @param {Function} iteratee - Transformation function which is passed index and amount.\n * @param {Array} [results = []] - Array that will have iteratee return pushed to.\n * @returns {Array} - An array with iteratee's returned values.\n *\n * @example\n * import { timesMap } from '@universalweb/acid';\n * timesMap(3, (item) => {\n *   return item;\n * });\n * // => [0, 1, 2]\n */\nexport function timesMap(amount, iteratee, results = []) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tresults[index] = iteratee(amount);\n\t}\n\treturn results;\n}\n","import { stubFalse } from './stubFalse';\n/**\n * This method returns a new empty object.\n *\n * @function stubObject\n * @category utility\n * @type {Function}\n * @returns {Object} - Returns the new empty object.\n *\n * @example\n * import { stubObject, assert } from '@universalweb/acid';\n * assert(stubObject(), {});\n */\nexport const stubObject = () => {\n\treturn {};\n};\n\n","import { stubString } from './stubString';\n/**\n * This method returns true.\n *\n * @function stubTrue\n * @category utility\n * @type {Function}\n * @returns {Boolean} - Returns true.\n *\n * @example\n * import { stubTrue, assert } from '@universalweb/acid';\n * assert(stubString(), true);\n */\nexport const truth = true;\nexport const stubTrue = () => {\n\treturn truth;\n};\n","import { construct } from '../classes/construct.js';\nimport { falsy } from './stubFalse.js';\nimport { noop } from './noop.js';\nimport { times } from './times.js';\nimport { truth } from './stubTrue.js';\nexport class Timers {\n\tlist = construct(Map);\n\tconstruct() {\n\t}\n\t/**\n\t * Remove a timer that was created using the timer function.\n\t *\n\t * @param {Number} id - The id of the timer to remove.\n\t * @returns {undefined} - Returns nothing.\n\t *\n\t * @example\n\t * import { timer, assert } from '@universalweb/acid';\n\t * timer(() => {}, 100);\n\t * // => 0\n\t */\n\tremove(id) {\n\t\tclearTimeout(id);\n\t\tthis.list.delete(id);\n\t}\n\thas(id) {\n\t\treturn this.list.has(id);\n\t}\n\tget(id) {\n\t\treturn this.list.get(id);\n\t}\n\t/**\n\t * Create a timer and add it to the list of timers.\n\t *\n\t * @type {Function}\n\t * @param {Function} callable - The function to be invoked.\n\t * @param {Number} time - The time in milliseconds.\n\t * @returns {Object} - Returns setTimeoutId ID.\n\t *\n\t * @example\n\t * import { timers, assert } from '@universalweb/acid';\n\t * timers.set(() => {}, 100);\n\t * // => 0\n\t */\n\tset(callable, time) {\n\t\tconst currentThis = this;\n\t\tconst id = setTimeout(() => {\n\t\t\tcallable();\n\t\t\tcurrentThis.remove(id);\n\t\t}, time);\n\t\tthis.list.set(id, truth);\n\t\treturn id;\n\t}\n\t/**\n\t * Clear all active timers.\n\t *\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { timers, assert } from '@universalweb/acid';\n\t * timers.clear();\n\t * // => undefined\n\t */\n\tclear() {\n\t\tconst currentThis = this;\n\t\tcurrentThis.list.forEach((id) => {\n\t\t\tcurrentThis.remove(id);\n\t\t});\n\t}\n}\nexport const timers = construct(Timers);\n/**\n * Timer wrapper.\n *\n * @function timer\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Number} time - The time in milliseconds.\n * @returns {Object} - Returns setTimeoutId ID.\n *\n * @example\n * import { timer, assert } from '@universalweb/acid';\n * timer(() => {}, 100);\n * // => 0\n */\nexport function timer(callable, time) {\n\treturn timers.set(callable, time);\n}\n/**\n * Clear all active timers.\n *\n * @function clearTimers\n * @category function\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * import { clearTimers, assert } from '@universalweb/acid';\n * clearTimers();\n * // => undefined\n */\nexport function clearTimers() {\n\tconst id = setTimeout(noop, 0);\n\ttimes(id, (index) => {\n\t\ttimers.remove(index);\n\t});\n}\n","const applyNative = Reflect.apply;\nimport { hasValue } from '../types/hasValue.js';\nimport { isFunction } from '../types/isFunction.js';\n/**\n * Calls a target function with an optional \"this\" and optional arguments as specified. Same as Reflect.apply but with a function check.\n *\n * @function apply\n * @category function\n * @param {Function} target - The target function to call.\n * @param {*} thisArgument - Array like object.\n * @param {Array} argumentsList - An array-like object specifying the arguments with which target should be called.\n * @returns {*} - The result of calling the given target function with the specified this value and arguments.\n *\n * @example\n * import { apply, assert } from '@universalweb/acid';\n * assert(apply(function (a) {return a;}, undefined, [2]), 2);\n */\nexport function apply(target, thisArgument, argumentsList) {\n\tif (isFunction(target)) {\n\t\treturn applyNative(target, thisArgument, argumentsList);\n\t}\n}\n","/**\n * Returns the constructor of an object.\n *\n * @function getType\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { getType, assert } from '@universalweb/acid';\n * assert(getType(1), true);\n */\nexport function getType(source) {\n\treturn source?.constructor;\n}\n","import { construct } from '../classes/construct.js';\nimport { getType } from './getType.js';\n/**\n * Returns a new empty object of the same type.\n *\n * @function cloneType\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { cloneType, assert } from '@universalweb/acid';\n * assert(cloneType([1]), []);\n */\nexport function cloneType(source, args = []) {\n\tconst sourceType = getType(source);\n\tif (sourceType === Function) {\n\t\tif (sourceType.name === 'function') {\n\t\t\treturn function() {};\n\t\t}\n\t}\n\treturn construct(sourceType, args);\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Iterates through (using for of) the calling object and creates an object with the results of the iteratee on every element in the calling object.\n *\n * @function forOfCompactMap\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * forOfCompactMap({a: undefined, b: 2, c: 3}, (item) => {\n *   return item;\n * });\n * // => {b: 2, c: 3}\n */\nexport function forOfMap(source, iteratee = returnValue, resultsObject) {\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = iteratee(value, results, source);\n\t\t\tmethodPushBound(result);\n\t\t}\n\t\treturn results;\n\t}\n\tconst methodSet = isFunction(results.set);\n\tfor (const [key, value] of source) {\n\t\tconst result = iteratee(value, key, results, source);\n\t\tif (methodSet) {\n\t\t\tresults.set(key, result);\n\t\t} else {\n\t\t\tresults[key] = result;\n\t\t}\n\t}\n\treturn results;\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Asynchronously iterates (for of) through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function forOfCompactMapAsync\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * import { forOfCompactMapAsync, assert } from '@universalweb/acid';\n * assert(forOfCompactMapAsync({a: undefined, b: 2, c: 3}, (item) => {\n *   return item;\n * }), {b: 2, c: 3});\n */\nexport async function forOfMapAsync(source, iteratee = returnValue, resultsObject, generatorArgs) {\n\tif (isGenerator(source)) {\n\t\tconst resultsGenerator = [];\n\t\tfor await (const item of source(...generatorArgs)) {\n\t\t\tresultsGenerator.push(await iteratee(item, resultsGenerator, source));\n\t\t}\n\t\treturn resultsGenerator;\n\t}\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = await iteratee(value, results, source);\n\t\t\tmethodPushBound(result);\n\t\t}\n\t\treturn results;\n\t}\n\tconst methodSet = isFunction(results.set);\n\tfor await (const [key, value] of source) {\n\t\tconst result = await iteratee(value, key, results, source);\n\t\tif (methodSet) {\n\t\t\tresults.set(key, result);\n\t\t} else {\n\t\t\tresults[key] = result;\n\t\t}\n\t}\n\treturn results;\n}\n","import { eachAsyncObject } from './eachAsync.js';\nimport { hasValue } from '../types/hasValue.js';\n/**\n * Asynchronously iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.\n *\n * @function mapObjectAsync\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function|undefined} - An object of the same calling object's type.\n *\n * @example\n * import { mapAsyncObject, assert } from '@universalweb/acid';\n * assert(await mapAsyncObject({a: 1, b: undefined, c: 3}, (item) => {\n *   return item;\n * }), {a: 1, b: undefined, c: 3});\n */\nexport async function mapAsyncObject(source, iteratee, results = {}) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tawait eachAsyncObject(source, async (item, key, thisObject, propertyCount, objectKeys) => {\n\t\tresults[key] = await iteratee(item, key, results, thisObject, propertyCount, objectKeys);\n\t});\n\treturn results;\n}\n\n","import { eachObject } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { mapAsyncObject } from './mapAsync.js';\n/**\n * Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.\n *\n * @function mapObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Object|Function|undefined} - An object of the same calling object's type.\n *\n * @example\n * import { mapObject, assert } from '@universalweb/acid';\n * assert(mapObject({a: 1, b: undefined, c: 3}, (item) => {\n *   return item;\n * }), {a: 1, b: undefined, c: 3});\n */\nexport function mapObject(source, iteratee, results = {}, thisCall, additionalArg) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tif (hasValue(thisCall)) {\n\t\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\t\tresults[key] = iteratee.call(thisCall, item, key, results, original, propertyCount, objectKeys, additionalArg);\n\t\t});\n\t} else {\n\t\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\t\tresults[key] = iteratee(item, key, results, original, propertyCount, objectKeys, additionalArg);\n\t\t});\n\t}\n\treturn results;\n}\n","import { forOfMap } from './forOfMap.js';\nimport { forOfMapAsync } from './forOfMapAsync.js';\nimport { generateLoop } from './generateLoop.js';\nimport { mapArray } from '../arrays/map.js';\nimport { mapAsyncArray } from '../arrays/mapAsync.js';\nimport { mapAsyncObject } from '../objects/mapAsync.js';\nimport { mapObject } from '../objects/map.js';\n/**\n * Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.\n *\n * @function map\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {Object | Function} [results = {}] - Object that will be used to assign results.\n * @param {*} thisCall - An object to be given each time to the iteratee.\n * @param {*} additionalArg - An object to be given each time to the iteratee.\n * @returns {Array | object | Function} - A new object of the same calling object's type.\n *\n * @example\n * import { map, assert } from '@universalweb/acid';\n * assert(map({a: 1, b: 2, c: 3}, (item) => {\n *   return item * 2;\n * }), {a: 2, b: 4, c: 6});\n */\nexport const map = generateLoop(mapArray, mapAsyncArray, mapObject, mapAsyncObject, forOfMap, forOfMapAsync);\n\n","import { each } from '../utilities/each.js';\nimport { everyAsyncArray } from '../arrays/everyAsync.js';\nimport { keys } from './keys.js';\n/**\n * Iterates through the given object while the iteratee returns true.\n *\n * @function everyAsyncObject\n * @category object\n * @type {Function}\n * @param {Object} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @returns {Boolean|undefined} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { everyAsyncObject, assert } from '@universalweb/acid';\n * const result =  await everyAsyncObject({a: true, b: true, c: true}, (item) => {\n *   return item;\n * });\n * assert(result, true);\n */\nexport async function everyAsyncObject(source, iteratee) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst objectKeys = keys(source);\n\treturn everyAsyncArray(objectKeys, (key, index, original, propertyCount) => {\n\t\treturn iteratee(source[key], key, source, propertyCount, original);\n\t});\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Iterates (for of) through the given object while the iteratee returns true using a for of loop.\n *\n * @function forOfEvery\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @returns {Boolean} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { every, assert } from '@universalweb/acid';\n * assert(forOfEvery({a: false, b: true, c: true}, (item) => {\n *  return item;\n * }), false);\n */\nexport function forOfEvery(source, iteratee = returnValue) {\n\tif (isArray(source) || isSet(source)) {\n\t\tfor (const value of source) {\n\t\t\tconst result = iteratee(value, source);\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (const [key, value] of source) {\n\t\t\tconst result = iteratee(value, key, source);\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Asynchronously iterates (for of) through the given object while the iteratee returns true using a for of loop.\n *\n * @function forOfEveryAsync\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @returns {Boolean} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { every, assert } from '@universalweb/acid';\n * assert(forOfEveryAsync({a: false, b: true, c: true}, (item) => {\n *  return item;\n * }), false);\n */\nexport async function forOfEveryAsync(source, iteratee = returnValue, generatorArgs) {\n\tif (isGenerator(source)) {\n\t\tfor await (const item of source(...generatorArgs)) {\n\t\t\tconst result = await iteratee(item, source);\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else if (isArray(source) || isSet(source)) {\n\t\tfor (const value of source) {\n\t\t\tconst result = await iteratee(value, source);\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (const [key, value] of source) {\n\t\t\tconst result = await iteratee(value, key, source);\n\t\t\tif (result === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n","import { everyArray } from '../arrays/every.js';\nimport { everyAsyncArray } from '../arrays/everyAsync.js';\nimport { everyAsyncObject } from '../objects/everyAsync.js';\nimport { everyObject } from '../objects/every.js';\nimport { forOfEvery } from './forOfEvery.js';\nimport { forOfEveryAsync } from './forOfEveryAsync.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the given object while the iteratee returns true.\n *\n * @function every\n * @category utility\n * @type {Function}\n * @param {Object | Array | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @returns {Boolean} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { every, assert } from '@universalweb/acid';\n * assert(every({a: false, b: true, c: true}, (item) => {\n *  return item;\n * }), false);\n */\nexport const every = generateLoop(everyArray, everyAsyncArray, everyObject, everyAsyncObject, forOfEvery, forOfEveryAsync);\n","const functionPrototype = Function.prototype;\n/**\n * Caches a prototype method.\n *\n * @function cacheNativeMethod\n * @category utility\n * @type {Function}\n * @param {Function} method - Prototype method.\n * @returns {Function} - Cached method.\n *\n * @example\n * import { cacheNativeMethod, assert } from '@universalweb/acid';\n * assert(cacheNativeMethod(Array.prototype.push)([], 1), 1);\n */\nexport function cacheNativeMethod(method) {\n\treturn functionPrototype.call.bind(method);\n}\n\n","import { cacheNativeMethod } from '../utilities/cacheNativeMethod.js';\n/**\n * Returns an array of all properties (enumerable or not) found directly upon a given object.\n *\n * @function getPropNames\n * @category object\n * @param {Object} source - The object whose enumerable and non-enumerable own properties are to be returned.\n * @returns {Object} - An array of strings that correspond to the properties found directly upon the given object.\n *\n * @example\n * import { getPropNames, assert } from '@universalweb/acid';\n * assert(getPropNames({ 0: 'a', 1: 'b', 2: 'c' }), ['0', '1', '2']);\n */\nexport const getPropNames = Object.getOwnPropertyNames;\n/**\n * Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.\n *\n * @function getPropDesc\n * @category object\n * @param {Object} target - The target object.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @returns {Object} - A property descriptor of the given property if it exists on the object, undefined otherwise.\n *\n * @example\n * getPropDesc({ bar: 42 }, 'bar');\n * // => { configurable: true, enumerable: true, value: 42, writable: true }\n */\nexport const getPropDesc = Object.getOwnPropertyDescriptor;\n/**\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n *\n * @function defProp\n * @category object\n * @param {Object} target - The object on which to define the property.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @param {Object} descriptor - The descriptor for the property being defined or modified.\n * @returns {Object} - The object that was passed to the function.\n *\n * @example\n * defProp({}, 'key', {\n *  enumerable: false,\n *  configurable: false,\n *  writable: false,\n *  value: 'static'\n * }).key;\n * // => 'static'\n */\nexport const defProp = Object.defineProperty;\nexport const hasProp = cacheNativeMethod(Object.hasOwnProperty);\n","import { getPropNames } from './object';\n/**\n * Determines whether two values are the same value.\n *\n * @function isSame\n * @category object\n * @param {*} source - Value to compare to.\n * @param {*} target - A value to compare.\n * @returns {Boolean} - A Boolean indicating whether or not the two arguments are the same value.\n *\n * @example\n * import { isSame, assert } from '@universalweb/acid';\n * assert(isSame('foo', 'foo'), true);\n */\nexport const isSame = Object.is;\n","const { random } = Math;\n/**\n * Roduces a random floating-point number between min (included) and max (excluded). Do not use for security or encryption..\n *\n * @function randomFloat\n * @category math\n * @type {Function}\n * @param {Number} max - Establishes highest possible value for the random number.\n * @param {Number} [min = 0] - Establishes lowest possible value for the random number.\n * @returns {Number} - Returns random integer between the max and min range.\n *\n * @example\n * import { randomFloat, assert } from '@universalweb/acid';\n * assert(randomFloat(10, 0), (value) => { return value > 0 && value < 10;});\n * // => 9.1\n */\nexport function randomFloat(max, min = 0) {\n\treturn random() * (max - min) + min;\n}\n","/**\n * Checks if a number is negative & returns true or false.\n *\n * @function isPositive\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isPositive, assert } from '@universalweb/acid';\n * assert(isPositive(1), true);\n */\nconst { sign } = Math;\nexport function isPositive(source) {\n\treturn sign(source) === 1;\n}\n","import { hasValue } from '../types/hasValue.js';\nexport const objectEntries = Object.entries;\n/**\n * Return turns an array of arrays of key & value pairs. The first element in each key & value pair is the property key, and the second element is the associated value. If source is null or undefined it will not crash or error.\n *\n * @function getEntries\n * @category object\n * @param {Object} source - The source object.\n * @returns {Array|undefined} - Returns the Object.entries of the source object.\n *\n * @example\n * import { getEntries, assert } from '@universalweb/acid';\n * assert(getEntries({b: 2, a: 1}), [['b', 2],['a', 1]]);\n */\nexport function getEntries(source) {\n\tif (hasValue(source)) {\n\t\treturn objectEntries(source);\n\t}\n}\n","import { eachAsyncObject } from './eachAsync.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { mapAsyncObject } from './mapAsync.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Asynchronously iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function compactMapAsyncObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * import { compactMapAsyncObject, assert } from '@universalweb/acid';\n * assert(await compactMapAsyncObject({a: 1, b: undefined, c: 3}, (item) => {\n *   return item;\n * }), {a: 1, c: 3});\n */\nexport async function compactMapAsyncObject(source, iteratee = returnValue, results = {}) {\n\tawait eachAsyncObject(source, async (item, key, original, propertyCount, objectKeys) => {\n\t\tconst result = await iteratee(item, key, results, original, propertyCount, objectKeys);\n\t\tif (hasValue(result)) {\n\t\t\tresults[key] = result;\n\t\t}\n\t});\n\treturn results;\n}\n","import { compactMapAsyncObject } from './compactMapAsync.js';\nimport { eachObject } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { mapAsyncObject } from './mapAsync.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function compactMapObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * import { compactMapObject, assert } from '@universalweb/acid';\n * assert(compactMapObject({a: 1, b: undefined, c: 3}, (item) => {\n *   return item;\n * }), {a: 1, c: 3});\n */\nexport function compactMapObject(source, iteratee = returnValue, results = {}) {\n\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\tconst result = iteratee(item, key, results, original, propertyCount, objectKeys);\n\t\tif (hasValue(result)) {\n\t\t\tresults[key] = result;\n\t\t}\n\t});\n\treturn results;\n}\n","import { eachObject } from './each.js';\n/**\n * Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.\n *\n * @function filterObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with properties that passed the test.\n *\n * @example\n * filterObject({a: false, b: true, c: true}, (item) => {\n *   return item;\n * });\n * // => {b: true, c: true}\n */\nexport function filterObject(source, iteratee, results = {}) {\n\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\tif (iteratee(item, key, results, original, propertyCount, objectKeys) === true) {\n\t\t\tresults[key] = item;\n\t\t}\n\t});\n\treturn results;\n}\n","import { eachAsyncObject } from './eachAsync.js';\n/**\n * Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.\n *\n * @function filterAsyncObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with properties that passed the test.\n *\n * @example\n * filterAsyncObject({a: false, b: true, c: true}, (item) => {\n *   return item;\n * });\n * // => {b: true, c: true}\n */\nexport async function filterAsyncObject(source, iteratee, results = {}) {\n\tawait eachAsyncObject(source, async (item, key, original, propertyCount, objectKeys) => {\n\t\tif (await iteratee(item, key, results, original, propertyCount, objectKeys) === true) {\n\t\t\tresults[key] = item;\n\t\t}\n\t});\n\treturn results;\n}\n","import { everyArray } from '../arrays/every.js';\nimport { isMatchArray } from '../arrays/isMatch.js';\nimport { keys } from './keys.js';\n/**\n * Performs a shallow strict comparison between two objects.\n *\n * @function isMatchObject\n * @type {Function}\n * @category object\n * @param {Object} source - Source object.\n * @param {Object} target - Object to compare to source.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { assert, isMatchObject } from '@universalweb/acid';\n * assert(isMatchObject({a: 1}, {a: 1}), true);\n */\nexport const isMatchObject = (source, target) => {\n\tif (source === target) {\n\t\treturn true;\n\t}\n\tconst sourceKeys = keys(source);\n\tconst targetKeys = keys(target);\n\tif (sourceKeys.length === targetKeys.length) {\n\t\treturn everyArray(sourceKeys, (key) => {\n\t\t\treturn source[key] === target[key];\n\t\t});\n\t}\n\treturn false;\n};\n\n","/**\n * Returns a regex safe special characters escaped version of a string.\n *\n * @function regexSafe\n * @category regex\n * @type {Function}\n * @param {Object} source - String to make safe.\n * @returns {Object} - Returns a regex safe version of the string.\n *\n * @example\n * import { regexSafe, assert } from '@universalweb/acid';\n * assert(regexSafe(/.+/), '\\/\\.\\+\\/');\n */\nexport const escapeRegexRegex = /[()[\\]{}*+?^$|#.,/\\\\\\s-]/g;\nexport function escapeRegex(source) {\n\treturn source.replace(escapeRegexRegex, '\\\\$&');\n}\n","import { escapeRegex } from './escapeRegex.js';\nimport { mapArray } from '../arrays/map.js';\n/**\n * Convert array of strings to regex.\n *\n * @function arrayToRegex\n * @category regex\n * @type {Function}\n * @param {Object} source - Array of strings.\n * @returns {Object} - Returns a regex safe version of the string.\n *\n * @example\n * import { arrayToRegex, assert } from '@universalweb/acid';\n * assert(String(arrayToRegex(['a','b'])), String(/a|b/));\n */\nexport function arrayToRegex(source, makeSafe) {\n\tif (makeSafe) {\n\t\treturn arrayToRegex(mapArray(source, escapeRegex));\n\t}\n\treturn RegExp(source.join('|'));\n}\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if the value is a RegExp.\n *\n * @function isRegex\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isRegex, assert } from '@universalweb/acid';\n * assert(isRegex(/test/), true);\n */\nexport const isRegexCall = isConstructorNameFactory('RegExp');\nexport const isRegex = isTypeFactory(isRegexCall);\n","import { hasValue } from '../types/hasValue.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { keys } from './keys.js';\nimport { pluckObject } from './pluckObject';\n/**\n * Returns the amount of keys on an object or if the length or size property of an object is present it will return it else it will default to returning the amount of keys on an object.\n *\n * @function objectSize\n * @category object\n * @param {Object} source - The source object.\n * @returns {Number|undefined} - The amount of keys.\n *\n * @example\n * import { objectSize, assert } from '@universalweb/acid';\n * assert(objectSize({ 0: 'a', 1: 'b', 2: 'c' }), 3);\n */\nexport function objectSize(source) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tif (isPlainObject(source)) {\n\t\treturn keys(source).length;\n\t}\n\tconst objectLengthProperty = source.length;\n\tif (hasValue(objectLengthProperty)) {\n\t\treturn objectLengthProperty;\n\t}\n\tconst objectSizeProperty = source.size;\n\tif (hasValue(objectLengthProperty)) {\n\t\treturn objectSizeProperty;\n\t}\n\treturn keys(source).length;\n}\n","import { eachArray } from '../arrays/each.js';\nimport { eachObject } from './each.js';\n/**\n * Creates an object from two arrays, one of property identifiers and one of corresponding values.\n *\n * @function zipObject\n * @type {Function}\n * @category object\n * @param {Array} properties - The property identifiers.\n * @param {Array} values - The property values.\n * @returns {Object} - Returns the new object.\n *\n * @example\n * zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nexport const zipObject = (properties, values) => {\n\tconst zipedObject = {};\n\teachArray(properties, (item, key) => {\n\t\tzipedObject[item] = values[key];\n\t});\n\treturn zipedObject;\n};\n/**\n * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.\n *\n * @function unZipObject\n * @type {Function}\n * @category object\n * @param {Object} object - The object to process.\n * @returns {Array} - Returns two arrays one of keys and the other of values inside a single array.\n *\n * @example\n * unZipObject({ 'a': 1, 'b': 2 });\n * // => [['a', 'b'], [1, 2]]\n */\nexport const unZipObject = (object) => {\n\tconst unZippedKeys = [];\n\tconst values = [];\n\teachObject(object, (item, key) => {\n\t\tunZippedKeys.push(key);\n\t\tvalues.push(item);\n\t});\n\treturn [unZippedKeys, values];\n};\n\n","const normalizeCase = /[ _-]+/g;\n/**\n * Converts a string into Camel case format.\n *\n * @function camelCase\n * @category string\n * @type {Function}\n * @param {String} source - String to be converted into Camel case.\n * @returns {String} - Converted string in Camel case.\n *\n * @example\n * import { camelCase, assert } from '@universalweb/acid';\n * assert(camelCase('camel case'), 'camelCase');\n */\nexport function camelCase(source) {\n\tlet result = '';\n\tsource.replace(normalizeCase, ' ').trim()\n\t\t.split(' ')\n\t\t.forEach((item, index) => {\n\t\t\tif (index === 0) {\n\t\t\t\tresult += item.toLowerCase();\n\t\t\t} else {\n\t\t\t\tresult += item[0].toUpperCase() + item.slice(1).toLowerCase();\n\t\t\t}\n\t\t});\n\treturn result;\n}\n","const normalizeCase = /[ _-]+/g;\nconst space = /[ ]+/g;\n/**\n * Converts a string into single space sepperated words in Kebab case.\n *\n * @function kebabCase\n * @category string\n * @type {Function}\n * @param {String} source - String to be converted into Kebab case.\n * @returns {String} - Converted string in Kebab case.\n *\n * @example\n * import { kebabCase, assert } from '@universalweb/acid';\n * assert(kebabCase('kebab case'), 'kebab-case');\n */\nexport function kebabCase(source) {\n\treturn source.replace(/([A-Z]+)/g, ' $1')\n\t\t.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toLowerCase()\n\t\t.replace(space, '-');\n}\n\n","const normalizeCase = /[ _-]+/g;\nconst space = /[ ]+/g;\n/**\n * Converts a string into single space sepperated words in snake case.\n *\n * @function snakeCase\n * @category string\n * @type {Function}\n * @param {String} source - String to be converted into snake case.\n * @returns {String} - Converted string in Snake case.\n *\n * @example\n * import { snakeCase, assert } from '@universalweb/acid';\n * assert(snakeCase('snake case'), 'snake_case');\n */\nexport function snakeCase(source) {\n\treturn source.replace(/([A-Z]+)/g, ' $1')\n\t\t.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toLowerCase()\n\t\t.replace(space, '_');\n}\n","const normalizeCase = /[ _-]+/g;\n/**\n * Converts a string into single space sepperated words in uppercase.\n *\n * @function upperCase\n * @category string\n * @type {Function}\n * @param {String} source - String to be converted into upper case.\n * @returns {String} - Converted string in upper case.\n *\n * @example\n * import { upperCase, assert } from '@universalweb/acid';\n * assert(upperCase('upper-case'), 'UPPER CASE');\n * assert(upperCase('upper_case'), 'UPPER CASE');\n */\nexport function upperCase(source) {\n\treturn source\n\t\t.replace(/([A-Z]+)/g, ' $1')\n\t\t.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toUpperCase();\n}\n","const normalizeCase = /[ _-]+/g;\n/**\n * Converts a string into single space sepperated words in lowerCase.\n *\n * @function lowerCase\n * @category string\n * @type {Function}\n * @param {String} source - String to be converted into upper case.\n * @returns {String} - Converted string in upper case.\n *\n * @example\n * import { lowerCase, assert } from '@universalweb/acid';\n * assert(lowerCase('lower-CASE'), 'lower case');\n */\nexport function lowerCase(source) {\n\treturn source\n\t\t.replace(/([A-Z]+)/g, ' $1')\n\t\t.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toLowerCase();\n}\n","/**\n * Inserts text into a string at a given position.\n *\n * @function insertInRange\n * @category string\n * @type {Function}\n * @param {String} string - String to insert the text into.\n * @param {Number} index - Point of insertion.\n * @param {String} text - The string to be inserted.\n * @returns {String} - The string with the text inserted at the given point.\n *\n * @example\n * import { insertInRange, assert } from '@universalweb/acid';\n * assert(insertInRange('A from Lucy.', 1, ' tab'), 'A tab from Lucy.');\n */\nexport function insertInRange(string, index, text) {\n\treturn string.slice(0, index) + text + string.slice(index, string.length);\n}\n/**\n * Plucks a letter using the index starting from the right.\n *\n * @function rightString\n * @category string\n * @type {Function}\n * @param {String} string - String to extract the letter from.\n * @param {Number} [index=1] - The starting position.\n * @returns {String} - A letter at the given index.\n *\n * @example\n * import { rightString, assert } from '@universalweb/acid';\n * assert(rightString('rightString'), 'g');\n * assert(rightString('rightString', 2), 'n');\n */\nexport function rightString(string, index = 1) {\n\treturn string[string.length - index];\n}\n/**\n * Splits up a string into chunks.\n *\n * @function chunkString\n * @category string\n * @type {Function}\n * @param {String} string - String to chunked.\n * @param {Number} [size] - The max string length per chunk.\n * @returns {Array} - An array with strings that are <= size parameter.\n *\n * @example\n * import { chunkString, assert } from '@universalweb/acid';\n * assert(chunkString('chunk', 2), ['ch', 'un', 'k']);\n */\nexport function chunkString(string, size) {\n\treturn string.match(new RegExp(`(.|[\\r\\n]){1,${size}}`, 'g'));\n}\n/**\n * Truncates everything before the index starting from the right.\n *\n * @function initialString\n * @category string\n * @type {Function}\n * @param {String} string - String to extract the initial letters from.\n * @param {Number} [index=1] - Starting point from the right.\n * @returns {String} - A string with the characters before the index starting from the right.\n *\n * @example\n * import { initialString, assert } from '@universalweb/acid';\n * assert(initialString('initialString', 2), 'initialStri');\n */\nexport function initialString(string, index = 1) {\n\treturn string.slice(0, index * -1);\n}\n/**\n * Truncates everything after a index.\n *\n * @function restString\n * @category string\n * @type {Function}\n * @param {String} string - String to extract the rest of the letters from.\n * @param {Number} [index=1] - Starting point.\n * @returns {String} - A string without the characters up-to to the index.\n *\n * @example\n * import { restString, assert } from '@universalweb/acid';\n * assert(restString('restString', 2), 'stString');\n */\nexport function restString(string, index = 1) {\n\treturn string.substring(index);\n}\n","import { truncateRight } from './truncate';\nconst rawURLDecodeRegex = /%(?![\\da-f]{2})/gi;\nconst andRegex = /&/g;\nconst lessThanRegex = /</g;\nconst moreThanRegex = />/g;\nconst doubleQuoteRegex = /\"/g;\n/**\n * Raw URL decoder.\n *\n * @function rawURLDecode\n * @category string\n * @type {Function}\n * @param {String} string - String to be replaced.\n * @returns {String} - Converted string into the decoded URI Component .\n *\n * @example\n * import { rawURLDecode, assert } from '@universalweb/acid';\n * assert(rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.'), 'Lucy saw diamonds in the sky.');\n */\nexport function rawURLDecode(string) {\n\treturn decodeURIComponent(string.replace(rawURLDecodeRegex, () => {\n\t\treturn '%25';\n\t}));\n}\n/**\n * Replaced sensitive characters with their matching html entity.\n *\n * @function htmlEntities\n * @category string\n * @type {Function}\n * @param {String} string - String to be replaced.\n * @returns {String} - Replaced string.\n *\n * @example\n * import { htmlEntities, assert } from '@universalweb/acid';\n * assert(htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`), `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`);\n */\nexport function htmlEntities(string) {\n\treturn string.replace(andRegex, '&amp;')\n\t\t.replace(lessThanRegex, '&lt;')\n\t\t.replace(moreThanRegex, '&gt;')\n\t\t.replace(doubleQuoteRegex, '&quot;');\n}\n/**\n * Executes rawURLDecode followd by htmlEntities methods on a string.\n *\n * @function sanitize\n * @category string\n * @type {Function}\n * @param {String} string - String to be replaced.\n * @returns {String} - Replaced string.\n *\n * @example\n * import { sanitize, assert } from '@universalweb/acid';\n * assert(sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`),`&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`);\n */\nexport function sanitize(string) {\n\treturn htmlEntities(rawURLDecode(string));\n}\n\n","const tokenizeRegEx = /\\S+/g;\nconst wordsRegEx = /\\w+/g;\n/**\n * Break string by non-white space characters matches.\n *\n * @function tokenize\n * @type {Function}\n * @category string\n * @param {String} string - String to be broken up.\n * @returns {Array} - Array of words without white space characters.\n *\n * @example\n * import { tokenize, assert } from '@universalweb/acid';\n * assert(tokenize('I am Lucy!'), [\"I\", \"am\", \"Acid!\"]);\n */\nexport function tokenize(string) {\n\treturn string.match(tokenizeRegEx) || [];\n}\n/**\n * Break string into word matches.\n *\n * @function words\n * @type {Function}\n * @param {String} string - String to be broken up.\n * @returns {Array} - Array of words with word characters only.\n *\n * @example\n * import { words, assert } from '@universalweb/acid';\n * assert(words('I am Acid!'), [\"I\", \"am\", \"Acid\"]);\n */\nexport function words(string) {\n\treturn string.match(wordsRegEx) || [];\n}\n\n","import { restString } from './range.js';\nconst getWords = /\\w+/g;\n/**\n * Returns the first letter capitalized.\n *\n * @function upperFirstLetter\n * @type {Function}\n * @category string\n * @param {String} string - String to extract first letter from.\n * @returns {String} - An upper case letter.\n *\n * @example\n * import { upperFirstLetter, assert } from '@universalweb/acid';\n * assert(upperFirstLetter('upper'), 'U');\n */\nexport function upperFirstLetter(string) {\n\treturn string[0].toUpperCase();\n}\n/**\n * Capitalizes the first letter.\n *\n * @function upperFirst\n * @type {Function}\n * @category string\n * @param {String} string - String to be mutated.\n * @returns {String} - String with first letter capitalized.\n *\n * @example\n * import { upperFirst, assert } from '@universalweb/acid';\n * assert(upperFirstLetter('upper'), 'U');\n * upperFirst('upper');\n * // => 'Upper'\n */\nexport function upperFirst(string) {\n\treturn upperFirstLetter(string) + restString(string);\n}\n/**\n * Capitalize first letter and lower case the rest.\n *\n * @function upperFirstOnly\n * @type {Function}\n * @category string\n * @param {String} string - String to be mutated.\n * @returns {String} - String with first letter capitalized.\n *\n * @example\n * import { upperFirstOnly, assert } from '@universalweb/acid';\n * assert(upperFirstOnly('upper'), 'Upper');\n */\nexport function upperFirstOnly(string) {\n\treturn upperFirstLetter(string) + restString(string).toLowerCase();\n}\n/**\n * Capitalize all first letters.\n *\n * @function upperFirstAll\n * @type {Function}\n * @category string\n * @param {String} string - String to be mutated.\n * @returns {String} - String with all first letters capitalized.\n *\n * @example\n * import { upperFirstAll, assert } from '@universalweb/acid';\n * assert(upperFirstAll('uPPer'), 'UPPer');\n */\nexport function upperFirstAll(string) {\n\treturn string.replace(getWords, (match) => {\n\t\treturn upperFirst(match);\n\t});\n}\n/**\n * Capitalize all first letters and lower case the rest.\n *\n * @function upperFirstOnlyAll\n * @type {Function}\n * @category string\n * @param {String} string - String to be mutated.\n * @returns {String} - String with all first letters capitalized.\n *\n * @example\n * import { upperFirstOnlyAll, assert } from '@universalweb/acid';\n * assert(upperFirstOnlyAll('this is'), 'This Is');\n */\nexport function upperFirstOnlyAll(string) {\n\treturn string.replace(getWords, (match) => {\n\t\treturn upperFirstOnly(match);\n\t});\n}\n","import { getType } from './getType.js';\n/**\n * Returns the constructor name of an object.\n *\n * @function getTypeName\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { getTypeName, assert } from '@universalweb/acid';\n * assert(getTypeName(1), true);\n */\nexport function getTypeName(source) {\n\treturn getType(source)?.name;\n}\n","import { hasValue } from './hasValue.js';\nimport { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Map.\n *\n * @function isMap\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isMap } from '@universalweb/acid';\n * isMap(new Map());\n * // => true\n */\nexport const isMapCall = isConstructorNameFactory('Map');\nexport const isMap = isTypeFactory(isMapCall);\n","import { getTypeName } from './getTypeName.js';\n/**\n * Checks if an object is a TypedArray. A TypedArray object is an array-like view of an underlying binary data buffer.\n *\n * @function isTypedArray\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isTypedArray, assert } from '@universalweb/acid';\n * assert(isTypedArray([]), false);\n * assert(isTypedArray(new Int8Array()), true);\n */\nconst typedArrayRegex = /Array/;\nconst arrayConstructorName = 'Array';\nexport function isTypedArray(source) {\n\tif (source) {\n\t\tconst constructorName = getTypeName(source);\n\t\tif (typedArrayRegex.test(constructorName) && constructorName !== arrayConstructorName) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if an object is null or undefined.\n *\n * @function noValue\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { noValue, assert } from '@universalweb/acid';\n * assert(noValue(null), true);\n * assert(noValue(undefined), true);\n * assert(noValue(1), false);\n * assert(noValue(0), false);\n */\nexport function noValue(source) {\n\treturn !hasValue(source);\n}\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a BigInt.\n *\n * @function isBigInt\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isBigInt, assert } from '@universalweb/acid';\n * assert(isBigInt(BigInt(123)), true);\n */\nexport const isBigIntCall = isConstructorNameFactory('BigInt');\nexport const isBigInt = isTypeFactory(isBigIntCall);\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if the value is a Boolean.\n *\n * @function isBoolean\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isBoolean } from '@universalweb/acid';\n * isBoolean(true);\n * // => true\n */\nexport const isBooleanCall = isConstructorNameFactory('Boolean');\nexport const isBoolean = isTypeFactory(isBooleanCall);\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a ArrayBuffer.\n *\n * @function isArrayBuffer\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isArrayBuffer, assert } from '@universalweb/acid';\n * assert(isArrayBuffer(new ArrayBuffer()), true);\n */\nexport const isArrayBufferCall = isConstructorNameFactory('ArrayBuffer');\nexport const isArrayBuffer = isTypeFactory(isArrayBufferCall);\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if an object or objects are a structured-cloneable type.\n *\n * @function isCloneable\n * @category type\n * @param {...*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isCloneable, assert } from '@universalweb/acid';\n * assert(isCloneable(function (){}), false);\n */\nconst constructorNames = RegExp('Array|ArrayBuffer|Boolean|DataView|Date|Map|Object|Boolean|Number|BigInt|String|RegExp|Set|Error|EvalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError');\nexport function isCloneable(source) {\n\tif (hasValue(source)) {\n\t\tconst constructorName = source?.constructor?.name;\n\t\treturn constructorNames.test(constructorName);\n\t}\n\treturn false;\n}\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if the value is a Date.\n *\n * @function isDate\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isDate, assert } from '@universalweb/acid';\n * assert(isDate(new Date()), true);\n */\nexport const isDateCall = isConstructorNameFactory('Date');\nexport const isDate = isTypeFactory(isDateCall);\n","/**\n * Check if a value equals false using strict comparison.\n *\n * @function isFalse\n * @category Utility\n * @type {Function}\n * @param {Boolean} source - Item to compare.\n * @returns {Boolean} - Returns true if the item equals false.\n *\n * @example\n * import { isFalse, assert } from '@universalweb/acid';\n * assert(isFalse(1), false);\n * assert(isFalse(true), false);\n * assert(isFalse(false), true);\n */\nexport function isFalse(source) {\n\treturn source === false;\n}\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Float32Array.\n *\n * @function isF32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isF32, assert } from '@universalweb/acid';\n * assert(isF32(new Float32Array()), true);\n */\nexport const isF32Call = isConstructorNameFactory('Float32Array');\nexport const isF32 = isTypeFactory(isF32Call);\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Float64Array.\n *\n * @function isF64\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isF64 } from '@universalweb/acid';\n * isF64(new Float64Array());\n * // => true\n */\nexport const isF64Call = isConstructorNameFactory('Float64Array');\nexport const isF64 = isTypeFactory(isF64Call);\n","const { isInteger } = Number;\n/**\n * Checks if the value (typically a number) as a string has a decimal point. Alias of Number.isInteger.\n *\n * @function isFloat\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isFloat } from '@universalweb/acid';\n * isFloat(1.01);\n * // => true\n */\nexport const isFloat = isInteger;\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Int16Array.\n *\n * @function isI16\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isI16 } from '@universalweb/acid';\n * isI16(new Int16Array());\n * // => true\n */\nexport const isI16Call = isConstructorNameFactory('Int16Array');\nexport const isI16 = isTypeFactory(isI16Call);\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Int32Array.\n *\n * @function isI32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isI32, assert } from '@universalweb/acid';\n * assert(isI32(new Int32Array()), true);\n */\nexport const isI32Call = isConstructorNameFactory('Int32Array');\nexport const isI32 = isTypeFactory(isI32Call);\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Int8Array.\n *\n * @function isI8\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isInt8 } from '@universalweb/acid';\n * isInt8(new Int8Array());\n * // => true\n */\nexport const isI8Call = isConstructorNameFactory('Int8Array');\nexport const isI8 = isTypeFactory(isI8Call);\n","/**\n * Checks if an object is a promise.\n *\n * @function isPromise\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - True or false.\n *\n * @example\n * import { isPromise } from '@universalweb/acid';\n * isPromise(new Promise(() => {}));\n * // => true\n */\nexport function isPromise(source) {\n\tif (source) {\n\t\treturn source instanceof Promise;\n\t}\n\treturn false;\n}\n","import { isAsync } from './isAsync.js';\nimport { isGenerator } from './isGenerator.js';\nimport { isPromise } from './isPromise.js';\n/**\n * Checks if an object is a kind of async object such as async function, promise, or generator.\n *\n * @function isKindAsync\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - True or false.\n *\n * @example\n * import { isKindAsync, assert } from '@universalweb/acid';\n * assert(isKindAsync(async() => {}), true);\n */\nexport function isKindAsync(source) {\n\tif (source) {\n\t\treturn isPromise(source) || isAsync(source) || isGenerator(source);\n\t}\n\treturn false;\n}\n","const { isSafeInteger } = Number;\n/**\n * Checks if the value (typically a number) as a string has a decimal point. Alias of Number.isInteger.\n *\n * @function isSafeInt\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isSafeInt } from '@universalweb/acid';\n * isSafeInt(1.01);\n * // => true\n */\nexport const isSafeInt = isSafeInteger;\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Uint16Array.\n *\n * @function isU16\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isU16 } from '@universalweb/acid';\n * isU16(new Uint16Array());\n * // => true\n */\nexport const isU16Call = isConstructorNameFactory('Uint16Array');\nexport const isU16 = isTypeFactory(isU16Call);\n","import { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Uint32Array.\n *\n * @function isU32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isU32 } from '@universalweb/acid';\n * isU32(new Uint32Array());\n * // => true\n */\nexport const isU32Call = isConstructorNameFactory('Uint32Array');\nexport const isU32 = isTypeFactory(isU32Call);\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Uint8Array.\n *\n * @function isU8\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isU8 } from '@universalweb/acid';\n * isU8(new Uint8Array());\n * // => true\n */\nexport const isU8Call = isConstructorNameFactory('Uint8Array');\nexport const isU8 = isTypeFactory(isU8Call);\n","import { isConstructorFactory, isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a Uint8ClampedArray.\n *\n * @function isU8C\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isU8C } from '@universalweb/acid';\n * isU8C(new Uint8ClampedArray());\n * // => true\n */\nexport const isU8CCall = isConstructorNameFactory('Uint8ClampedArray');\nexport const isU8C = isTypeFactory(isU8CCall);\n","import { hasValue } from './hasValue.js';\nimport { isConstructorNameFactory } from './isConstructor.js';\nimport { isTypeFactory } from './isTypeFactory.js';\n/**\n * Checks if an object or objects are a WeakMap.\n *\n * @function isWeakMap\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isWeakMap } from '@universalweb/acid';\n * assert(isWeakMap(new WeakMap()), true);\n */\nexport const isWeakMapCall = isConstructorNameFactory('WeakMap');\nexport const isWeakMap = isTypeFactory(isWeakMapCall);\n","export const isDeno = typeof globalThis.Deno !== 'undefined';\n","export const isNodejs = typeof globalThis.process !== 'undefined' && process.versions && process.versions.node;\n","/**\n * Check if a value is isTruthy which is anything but false, null, 0, \"\", undefined, and NaN.\n *\n * @function isTruthy\n * @category type\n * @type {Function}\n * @param {*} source - Item to be isTruthy checked.\n * @param {*} [returnIfTrue = true] - Item to be returned if item is isTruthy.\n * @returns {Boolean|*} - Returns true if the item is isTruthy or returnIfTrue if provided otherwise returns false.\n *\n * @example\n * import { isTruthy, assert } from '@universalweb/acid';\n * assert(isTruthy(1), true);\n * assert(isTruthy(0), false);\n */\nexport function isTruthy(source, returnIfTrue = true) {\n\treturn Boolean(source) && returnIfTrue;\n}\n","import { isEqual } from './isEqual.js';\nimport { isFalse } from '../types/isFalse.js';\n/**\n * Performs a deep comparison between two objects & determines if they're different using strict comparison.\n *\n * @function notEqual\n * @type {Function}\n * @category utility\n * @param {*} source - Source object.\n * @param {*} target - Object to be compared.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { notEqual, assert } from '@universalweb/acid';\n * assert(notEqual({a: [1,2,3]}, {a: [1,3,3]}), true);\n */\nexport function notEqual(source, target) {\n\treturn isFalse(isEqual(source, target));\n}\n\n","const jsonNative = JSON;\n/**\n * Parses JSON string with safety check for undefined.\n *\n * @function jsonParse\n * @category utility\n * @type {Function}\n * @param {String} source - String to be parsed.\n * @param {Function} reviver - A function that prescribes how each value originally produced by parsing is transformed before being returned.\n * @returns {Object|undefined} - Returns the parsed object.\n *\n * @example\n * import { jsonParse, assert } from '@universalweb/acid';\n * assert(jsonParse('{a:1}'), {a:1});\n */\nexport function jsonParse(source, reviver) {\n\tif (source) {\n\t\treturn jsonNative.parse(source, reviver);\n\t}\n}\n/**\n * Stringify an object into a JSON string.\n *\n * @function stringify\n * @category utility\n * @type {Function}\n * @param {Object} object - Object to Stringify.\n * @returns {String} - Returns the object as a valid JSON string.\n *\n * @example\n * import { stringify, assert } from '@universalweb/acid';\n * assert(stringify({a:1}), '{a:1}');\n */\nexport const stringify = jsonNative.stringify;\n\n","import { isFunction } from '../types/isFunction.js';\nimport { isKindAsync } from '../types/isKindAsync.js';\nimport { notEqual } from './notEqual.js';\nimport { stringify } from './json.js';\nfunction createAssertError(source, expected, localOptions) {\n\tconst options = globalThis.options || localOptions;\n\tlet errorTitle;\n\tif (isFunction(options)) {\n\t\terrorTitle = `${options.name} : ${options.constructor.name}`;\n\t} else if (options) {\n\t\terrorTitle = `${options.title || options.method.name} -> ${options.file}`;\n\t}\n\treturn new Error(`Test Failed: ${errorTitle}\n\t\tResult: ${stringify(source)}\n\t\tExpected: ${stringify(expected)}`, options);\n}\nexport async function assertAsync(sourceArg, expected, options) {\n\tconst source = await sourceArg;\n\tconst expectedFunction = isFunction(expected) && await expected(source, options) === false;\n\tif (expectedFunction || notEqual(source, expected)) {\n\t\treturn createAssertError(source, expected, options);\n\t}\n\treturn true;\n}\n/**\n * Check if source value matches the expected value.\n *\n * @function assert\n * @category utility\n * @type {Function}\n * @param {*} source - The source object to compare to.\n * @param {*} expected - The expected result that's compared to the source.\n * @param {*} options - Additional options for the Error instance & unit test information.\n * @returns {Object} - Returns a deep clone of an object.\n *\n * @example\n * import { assert } from '@universalweb/acid';\n * if (!assert(1,1)) {\n * \tnew Error('Assert Method Failed');\n * }\n */\nexport function assert(source, expected, options) {\n\tif (isKindAsync(source) || isKindAsync(expected)) {\n\t\treturn assertAsync(source, expected, options);\n\t}\n\tconst expectedFunction = isFunction(expected) && expected(source, options) === false;\n\tif (expectedFunction || notEqual(source, expected)) {\n\t\treturn createAssertError(source, expected, options);\n\t}\n\treturn true;\n}\n","/**\n * Creates a structured clone of an object which is a \"structured-cloneable type\".\n *\n * @function clone\n * @category utility\n * @type {Function}\n * @param {Object} source - Any structured-cloneable type object.\n * @returns {Object} - Returns a deep clone of an object.\n *\n * @example\n * import { clone, assert } from '@universalweb/acid';\n * assert(clone({a:{b:[2]}}), {a:{b:[2]}});\n */\nconst structuredCloneSafe = globalThis.structuredClone;\nexport function clone(source) {\n\treturn structuredCloneSafe(source);\n}\n\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Asynchronously iterates (for of) through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function forOfCompactMapAsync\n * @category utility\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * import { assert,forOfCompactMapAsync } from '@universalweb/acid';\n * const source = {a: undefined, b: 2, c: 3};\n * const temp = await forOfCompactMapAsync(source, async (item) => {\n *   return item;\n * });\n * assert(temp, {b: 2, c: 3});\n */\nexport async function forOfCompactMapAsync(source, iteratee = returnValue, resultsObject, generatorArgs) {\n\tif (isGenerator(source)) {\n\t\tconst resultsGenerator = [];\n\t\tfor await (const item of source(...generatorArgs)) {\n\t\t\tconst result = await iteratee(item, resultsGenerator, source);\n\t\t\tif (hasValue(result)) {\n\t\t\t\tresultsGenerator.push(result);\n\t\t\t}\n\t\t}\n\t\treturn resultsGenerator;\n\t}\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = await iteratee(value, results, source);\n\t\t\tif (hasValue(result)) {\n\t\t\t\tmethodPushBound(result);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\tconst methodSet = isFunction(results.set);\n\tfor await (const [key, value] of source) {\n\t\tconst result = await iteratee(value, key, results, source);\n\t\tif (hasValue(result)) {\n\t\t\tif (methodSet) {\n\t\t\t\tresults.set(key, result);\n\t\t\t} else {\n\t\t\t\tresults[key] = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { forOfCompactMapAsync } from './forOfCompactMapAsync.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Iterates (for of) through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function forOfCompactMap\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * import { assert,forOfCompactMap } from '@universalweb/acid';\n * const source = {a: undefined, b: 2, c: 3};\n * const temp = forOfCompactMap(source, (item) => {\n *   return item;\n * });\n * assert(temp, {b: 2, c: 3});\n */\nexport function forOfCompactMap(source, iteratee = returnValue, resultsObject) {\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = iteratee(value, results, source);\n\t\t\tif (hasValue(result)) {\n\t\t\t\tmethodPushBound(result);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\tconst methodSet = isFunction(results.set);\n\tfor (const [key, value] of source) {\n\t\tconst result = iteratee(value, key, results, source);\n\t\tif (hasValue(result)) {\n\t\t\tif (methodSet) {\n\t\t\t\tresults.set(key, result);\n\t\t\t} else {\n\t\t\t\tresults[key] = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n}\n","import { compactMapArray } from '../arrays/compactMap.js';\nimport { compactMapAsyncArray } from '../arrays/compactMapAsync.js';\nimport { compactMapAsyncObject } from '../objects/compactMapAsync.js';\nimport { compactMapObject } from '../objects/compactMap.js';\nimport { forOfCompactMap } from './forOfCompactMap.js';\nimport { forOfCompactMapAsync } from './forOfCompactMapAsync.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function compactMap\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {Object | Function} [results = {}] - Object that will be used to assign results.\n * @returns {Array | object | Function} - A new object of the same calling object's type.\n *\n * @example\n * import { compactMap, assert } from '@universalweb/acid';\n * assert(compactMap({a: null, b: 2, c: 3}, (item) => {\n *   return item;\n * }), {b: 2, c: 3});\n */\nexport const compactMap = generateLoop(compactMapArray, compactMapAsyncArray,\n\tcompactMapObject, compactMapAsyncObject, forOfCompactMap, forOfCompactMapAsync);\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Iterates (for of) through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.\n *\n * @function forOfFilter\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties.\n *\n * @example\n * import { assert, forOfFilter } from '@universalweb/acid';\n * const source = {a: undefined, b: 2, c: 3};\n * const temp = forOfFilter(source, (item) => {\n *   return Boolean(item);\n * });\n * assert(temp, {b: 2, c: 3});\n */\nexport function forOfFilter(source, iteratee = returnValue, resultsObject) {\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = iteratee(value, results, source);\n\t\t\tif (result === true) {\n\t\t\t\tmethodPushBound(value);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst methodSet = isFunction(results.set);\n\t\tfor (const [key, value] of source) {\n\t\t\tconst result = iteratee(value, key, results, source);\n\t\t\tif (result === true) {\n\t\t\t\tif (methodSet) {\n\t\t\t\t\tresults.set(key, value);\n\t\t\t\t} else {\n\t\t\t\t\tresults[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isGenerator } from '../types/isGenerator.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isSet } from '../types/isSet.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Asynchronously iterates (for of)through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.\n *\n * @function forOfFilterAsync\n * @category utility\n * @type {Function}\n * @param {Object|Function|Class|Map|Set|Array} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned.\n * @returns {Object|Function|Class|Map|Set|Array} - An object with mapped properties.\n *\n * @example\n * import { assert, forOfFilterAsync } from '@universalweb/acid';\n * const source = {a: undefined, b: 2, c: 3};\n * const temp = forOfFilterAsync(source, (item) => {\n *   return Boolean(item);\n * });\n * assert(temp, {b: 2, c: 3});\n */\nexport async function forOfFilterAsync(source, iteratee = returnValue, resultsObject, generatorArgs) {\n\tif (isGenerator(source)) {\n\t\tconst resultsGenerator = [];\n\t\tfor await (const item of source(...generatorArgs)) {\n\t\t\tif (await iteratee(item, resultsGenerator, source) === true) {\n\t\t\t\tresultsGenerator.push(item);\n\t\t\t}\n\t\t}\n\t\treturn resultsGenerator;\n\t}\n\tconst results = resultsObject || cloneType(source);\n\tif (isArray(source) || isSet(source)) {\n\t\tconst methodPush = results.push || results.add;\n\t\tconst methodPushBound = methodPush && methodPush.bind(results);\n\t\tfor (const value of source) {\n\t\t\tconst result = await iteratee(value, results, source);\n\t\t\tif (result === true) {\n\t\t\t\tmethodPushBound(value);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst methodSet = isFunction(results.set);\n\t\tfor await (const [key, value] of source) {\n\t\t\tconst result = await iteratee(value, key, results, source);\n\t\t\tif (result === true) {\n\t\t\t\tif (methodSet) {\n\t\t\t\t\tresults.set(key, value);\n\t\t\t\t} else {\n\t\t\t\t\tresults[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n}\n","import { filterArray } from '../arrays/filter.js';\nimport { filterAsyncArray } from '../arrays/filterAsync.js';\nimport { filterAsyncObject } from '../objects/filterAsync.js';\nimport { filterObject } from '../objects/filter.js';\nimport { forOfFilter } from './forOfFilter.js';\nimport { forOfFilterAsync } from './forOfFilterAsync.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.\n *\n * @function filter\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {Object | Function} [results = {}] - Object that will be used to assign results.\n * @returns {Array | object | Function} - A new object of the same calling object's type.\n *\n * @example\n * import { filter, assert } from '@universalweb/acid';\n * assert(filter({a: false, b: true, c: true}, (item) => {\n *   return item;\n * }), {b: true, c: true});\n */\nexport const filter = generateLoop(filterArray, filterAsyncArray, filterObject, filterAsyncObject, forOfFilter, forOfFilterAsync);\n\n","import { eachArray } from '../arrays/each.js';\nimport { eachRight } from '../arrays/eachRight.js';\nfunction returnFlow(callable) {\n\treturn (...methods) => {\n\t\treturn (arg) => {\n\t\t\tlet value = arg;\n\t\t\tcallable(methods, (item) => {\n\t\t\t\tvalue = item(value);\n\t\t\t});\n\t\t\treturn value;\n\t\t};\n\t};\n}\n/**\n * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n *\n * @function flow\n * @category utility\n * @type {Function}\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flow(increment, increment, deduct)(0);\n * // => 1\n */\nexport const flow = returnFlow(eachArray);\n/**\n * This method is like flow except that it creates a function that invokes the given functions from right to left.\n *\n * @function flowRight\n * @category utility\n * @type {Function}\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowRight(increment, increment, deduct)(0);\n * // => 1\n */\nexport const flowRight = returnFlow(eachRight);\n\n","import { eachAsyncArray } from '../arrays/eachAsync.js';\nimport { eachRightAsync } from '../arrays/eachRightAsync.js';\nfunction returnFlow(callable) {\n\treturn (...methods) => {\n\t\treturn async (arg) => {\n\t\t\tlet value = arg;\n\t\t\tawait callable(methods, async (item) => {\n\t\t\t\tvalue = await item(value);\n\t\t\t});\n\t\t\treturn value;\n\t\t};\n\t};\n}\n/**\n * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n *\n * @function flowAsync\n * @category utility\n * @type {Function}\n * @async\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowAsync(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n * // => 2\n */\nexport const flowAsync = returnFlow(eachAsyncArray);\n/**\n * This method is like flow except that it creates a function that invokes the given functions from right to left.\n *\n * @function flowAsyncRight\n * @category utility\n * @type {Function}\n * @async\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowAsyncRight(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n * // => 2\n */\nexport const flowAsyncRight = returnFlow(eachRightAsync);\n\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a '.'.\n *\n * @function hasDot\n * @category utility\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { hasDot, assert } from '@universalweb/acid';\n * assert(hasDot('test.js'), true);\n */\nexport const hasDot = regexTestFactory(/\\./);\n","import { construct } from '../classes/construct.js';\nimport { falsy } from './stubFalse.js';\nimport { noop } from './noop.js';\nimport { times } from './times.js';\nimport { truth } from './stubTrue.js';\nexport class Intervals {\n\tlist = construct(Map);\n\tconstruct() {\n\t}\n\t/**\n\t * Remove a setInterval that was created using the intervals function.\n\t *\n\t * @param {Number} id - The id of the setInterval to remove.\n\t * @returns {undefined} - Returns nothing.\n\t *\n\t * @example\n\t * timer(() => {}, 100);\n\t * // => 0\n\t */\n\tremove(id) {\n\t\tclearInterval(id);\n\t\tthis.list.delete(id);\n\t}\n\thas(id) {\n\t\treturn this.list.has(id);\n\t}\n\tget(id) {\n\t\treturn this.list.get(id);\n\t}\n\t/**\n\t * Create a setInterval & add it to the list of interval timers.\n\t *\n\t * @type {Function}\n\t * @param {Function} callable - The function to be invoked.\n\t * @param {Number} time - The time in milliseconds.\n\t * @returns {Object} - Returns setTimeoutId ID.\n\t *\n\t * @example\n\t * timers.set(() => {}, 100);\n\t * // => 0\n\t */\n\tset(callable, time) {\n\t\tconst currentThis = this;\n\t\tconst id = setInterval(() => {\n\t\t\tcallable();\n\t\t}, time);\n\t\tthis.list.set(id, truth);\n\t\treturn id;\n\t}\n\t/**\n\t * Clear all active setIntervals.\n\t *\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * intervals.clear();\n\t * // => undefined\n\t */\n\tclear() {\n\t\tconst currentThis = this;\n\t\tcurrentThis.list.forEach((id) => {\n\t\t\tcurrentThis.remove(id);\n\t\t});\n\t}\n}\nexport const intervals = construct(Intervals);\n/**\n * Create an interval timer.\n *\n * @function interval\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Number} time - The time in milliseconds.\n * @returns {Object} - Returns setInterval ID.\n *\n * @example\n * interval(() => {}, 100);\n * // => 0\n */\nexport function interval(callable, time) {\n\treturn intervals.set(callable, time);\n}\n/**\n * Clear all active interval timers.\n *\n * @function clearIntervals\n * @category function\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * clearIntervals();\n * // => undefined\n */\nexport function clearIntervals() {\n\tconst id = setTimeout(noop, 0);\n\ttimes(id, (index) => {\n\t\tintervals.remove(index);\n\t});\n}\n","import { eachArray } from '../arrays/each.js';\nimport { eachObject } from '../objects/each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isBoolean } from '../types/isBoolean.js';\nimport { keys } from '../objects/keys.js';\nimport { noop } from '../utilities/noop';\n/**\n * Checks to see of the browser agent has a string.\n *\n * @function isAgent\n * @category browser\n * @type {Function}\n * @param {String} source - The string to search for.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isAgent, assert } from '@universalweb/acid';\n * assert(isAgent('NotThere'), false);\n */\nexport function isAgent(source) {\n\treturn (hasValue(source)) ? isAgent[source] : keys(isAgent);\n}\nconst userAgent = globalThis.navigator?.userAgentData;\nif (userAgent) {\n\teachObject(userAgent, (value, key) => {\n\t\tif (isBoolean(value) && value) {\n\t\t\tisAgent[key] = value;\n\t\t}\n\t});\n\teachArray(userAgent.brands, (value) => {\n\t\tisAgent[value.brand] = value.version;\n\t});\n} else if (navigator.userAgent) {\n\tlet userAgentNormalized = navigator.userAgent.toLowerCase();\n\tuserAgentNormalized = userAgentNormalized.replace(/_/g, '.');\n\tuserAgentNormalized = userAgentNormalized.replace(/[#_,;()]/g, '');\n\tconst userAgentSplit = userAgentNormalized.split(/ |\\//);\n\teachArray(userAgentSplit, (item) => {\n\t\tisAgent[item] = true;\n\t});\n}\n\n","import { assign } from '../objects/assign.js';\nimport { construct } from '../classes/construct.js';\nimport { get } from './get.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isAgent } from '../browser/agent';\n/**\n * Returns the model with the given name.\n *\n * @function Model\n * @type {Class}\n * @category utility\n * @param {String} modelName - The name of the model to return.\n * @param {*} modelSource - The value of the model to return.\n * @returns {Model} - The model with the given name.\n *\n * @example\n * import { Model, model, assert } from '@universalweb/acid';\n * const test = new Model('test', {a: 1});\n * assert(model('test'), {a: 1});\n */\nexport class Model {\n\tstatic models = new Map();\n\tconstructor(modelName, modelSource) {\n\t\tif (hasValue(modelSource)) {\n\t\t\tassign(this, modelSource);\n\t\t\tthis.modelName = modelName;\n\t\t\tModel.models.set(modelName, modelSource);\n\t\t} else {\n\t\t\tassign(this, modelName);\n\t\t}\n\t}\n\tdelete(modelName) {\n\t\tModel.models.delete(modelName || this.modelName);\n\t}\n\tset(modelName) {\n\t\tif (modelName) {\n\t\t\tthis.modelName = modelName;\n\t\t}\n\t\tModel.models.set(modelName || this.modelName, this);\n\t}\n\thas(modelName) {\n\t\treturn Model.models.has(modelName || this.modelName);\n\t}\n\tget(modelName) {\n\t\treturn Model.models.get(modelName || this.modelName);\n\t}\n}\n/**\n * Set & Get a model.\n *\n * @function model\n * @type {Function}\n * @category utility\n * @param {String} modelName - Name of the model.\n * @param {Object} modelSource - The model object.\n * @returns {Model} - Returns the associated model.\n *\n * @example\n * import { model, assert } from '@universalweb/acid';\n * model('test', {a: 1});\n * assert(model('test'), {a: 1});\n */\nexport function model(modelName, modelSource) {\n\tif (hasValue(modelSource)) {\n\t\treturn construct(Model, [modelName, modelSource]);\n\t}\n\treturn get(modelName, Model.models);\n}\n\n","/**\n * A wrapper around the promise constructor.\n *\n * @function promise\n * @type {Function}\n * @category utility\n * @param {Function} callback - Function to be called back.\n * @returns {Promise} - A constructor with a callback function.).\n *\n * @example\n * promise((a) => {});\n * // => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}\n */\nexport function promise(callback) {\n\treturn new Promise(callback);\n}\n\n","import { eachObject } from '../objects/each.js';\nexport class Store {\n\tsource;\n\tconstructor(source = {}) {\n\t\tthis.source = source;\n\t\tif (source === null || typeof source !== 'object') {\n\t\t\treturn source;\n\t\t}\n\t\teachObject(source, (property) => {\n\t\t\tsource[property] = new Store(source[property]);\n\t\t});\n\t\tthis.data = new Proxy(source, {\n\t\t\tget(proxySource, property) {\n\t\t\t\tconsole.log(proxySource, property, proxySource[property]);\n\t\t\t\treturn proxySource[property];\n\t\t\t},\n\t\t\tset(proxySource, property, value) {\n\t\t\t\tconsole.log(proxySource, property, proxySource[property]);\n\t\t\t\tproxySource[property] = new Store(value);\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { construct } from '../classes/construct.js';\n/**\n * Unique ID Generator Module.\n *\n * @module utility/uid\n */\nimport { hasValue } from '../types/hasValue.js';\n/**\n * Creates a unique numerical recyclable ID generator. The IDs are numerically ascending however freed ids are recycled when available.\n *\n * @class UniqID\n * @type {Class}\n * @category utility\n * @returns {UniqID} - Returns a new instance of UniqID.\n *\n * @example\n * import { UniqID, construct, assert } from '@universalweb/acid';\n * const gen = construct(UniqID);\n * assert(gen.get(), 0);\n * assert(gen.get(), 1);\n * gen.free(0);\n * assert(gen.get(), 0);\n */\nexport class UniqID {\n\ttotalActive = 0;\n\tfreed = [];\n\ttotalFree = 0;\n\t/**\n\t * Generates a new ID or recycle one that is no longer used.\n\t *\n\t * @function get\n\t * @class UniqID\n\t * @category utility\n\t * @type {Function}\n\t * @returns {Number} - Returns a unique id.\n\t *\n\t * @example\n\t * import { UniqID, construct, assert } from '@universalweb/acid';\n\t * const gen = construct(UniqID);\n\t * assert(gen.get(), 0);\n\t */\n\tget() {\n\t\tlet result = this.freed.shift();\n\t\tif (hasValue(result)) {\n\t\t\tthis.totalFree--;\n\t\t} else {\n\t\t\tresult = this.totalActive;\n\t\t\tthis.totalActive++;\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * Frees an UID so that it may be recycled for later use.\n\t *\n\t * @function free\n\t * @class UniqID\n\t * @category utility\n\t * @type {Function}\n\t * @param {Number} id - Number to be freed.\n\t * @returns {undefined} - Nothing is returned.\n\t *\n\t * @example\n\t * import { UniqID, construct, assert } from '@universalweb/acid';\n\t * const gen = construct(UniqID);\n\t * assert(gen.get(), 0);\n\t * gen.free(0);\n\t * assert(gen.get(), 0);\n\t */\n\tfree(id) {\n\t\tthis.freed.push(id);\n\t\tthis.totalFree++;\n\t\tconst isActive = this.totalActive > 0;\n\t\tconst shouldReset = this.totalActive === this.totalFree;\n\t\tif (isActive && shouldReset) {\n\t\t\tthis.reset();\n\t\t}\n\t}\n\treset() {\n\t\tthis.totalActive = 0;\n\t\tthis.freed.length = 0;\n\t\tthis.totalFree = 0;\n\t}\n}\n/**\n * A built in constructed instance of UniqID. Creates a unique numerical recyclable ID. The IDs are numerically ascending however freed ids are recycled when available.\n *\n * @function uniqID\n * @category utility\n *\n * @example\n * import { uniqID, assert } from '@universalweb/acid';\n * assert(uniqID.get(), 0);\n * assert(uniqID.get(), 1);\n * uniqID.free(0);\n * assert(uniqID.get(), 0);\n */\nexport const uniqID = construct(UniqID);\n","import { cloneType } from '../types/cloneType';\nimport { hasValue } from '../types/hasValue.js';\n/**\n * Class representing a virtual storage interface over a provided object the default being a Map. A temporary storage shim for localStorage if not available.\n *\n * @function VirtualStorage\n * @category utility\n * @param {*} initialObject - Initial object to be used as the storage object the default being a Map.\n * @returns {*} - Returns a new VirtualStorage Object.\n *\n * @example\n * import { VirtualStorage } from '@universalweb/acid';\n * const myVirtualStorage = new VirtualStorage();\n * // => New VirtualStorage Object\n */\nexport class VirtualStorage {\n\tconstructor(initialObject = new Map()) {\n\t\tthis.items = initialObject;\n\t}\n\t/**\n\t * Get an item from a virtual storage object.\n\t *\n\t * @param {String} key - The key used to store the data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { VirtualStorage } from '@universalweb/acid';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.getItem('key');\n\t * // => 'value'\n\t */\n\tgetItem(key) {\n\t\tif (this.isMap) {\n\t\t\treturn this.items.get(key);\n\t\t} else {\n\t\t\treturn this.items[key];\n\t\t}\n\t}\n\tget(...args) {\n\t\treturn this.getItem(...args);\n\t}\n\thasItem(key) {\n\t\tif (this.isMap) {\n\t\t\treturn this.items.has(key);\n\t\t} else {\n\t\t\treturn hasValue(this.items[key]);\n\t\t}\n\t}\n\thas(...args) {\n\t\treturn this.hasItem(...args);\n\t}\n\t/**\n\t * Save an item to a virtual storage object.\n\t *\n\t * @param {String} key - The key used to store the data.\n\t * @param {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { VirtualStorage, assert } from '@universalweb/acid';\n\t * const vStorage = new VirtualStorage();\n\t * vStorage.setItem('title', 'value');\n\t * assert(vStorage.getItem('title'), 'value');\n\t */\n\tsetItem(key, value) {\n\t\tif (this.isMap) {\n\t\t\tthis.items.set(key, value);\n\t\t} else {\n\t\t\tthis.items[key] = value;\n\t\t}\n\t\treturn this;\n\t}\n\tset(...args) {\n\t\treturn this.setItem(...args);\n\t}\n\t/**\n\t * Clears all data from the virtual storage object by replacing with a new object.\n\t *\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { virtualStorage } from '@universalweb/acid';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.clear();\n\t * myVirtualStorage.getItem('key');\n\t * // => undefined\n\t */\n\tclear() {\n\t\tif (this.isMap) {\n\t\t\tthis.items.clear();\n\t\t} else {\n\t\t\tthis.items = cloneType(this.items);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * Remove an item from a virtual storage object.\n\t *\n\t * @param {String} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { virtualStorage } from '@universalweb/acid';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.removeItem('key');\n\t * myVirtualStorage.getItem('key');\n\t * // => undefined\n\t */\n\tremoveItem(key) {\n\t\tif (this.isMap) {\n\t\t\tthis.items.delete(key);\n\t\t} else {\n\t\t\tthis.items[key] = null;\n\t\t}\n\t\treturn this;\n\t}\n\tremove(...args) {\n\t\treturn this.removeItem(...args);\n\t}\n}\n/**\n * Returns an instance of VirtualStorage which represents a standard virtual storage interface over a provided object the default being a Map. A temporary storage shim for localStorage if not available.\n *\n * @function virtualStorage\n * @category browser\n * @type {Function}\n * @param {*} initialObject - Initial object to be used as the storage object the default being a Map.\n * @returns {*} - Returns a new VirtualStorage Object.\n *\n * @example\n * import { virtualStorage, assert } from '@universalweb/acid';\n * const vStorage = virtualStorage();\n * vStorage.setItem('title', 'value');\n * assert(vStorage.getItem('title'), 'value');\n */\nexport function virtualStorage(initialObject) {\n\treturn new VirtualStorage(initialObject);\n}\n\n","/**\n * Attaches an event listener to a node.\n *\n * @function eventAdd\n * @category browser\n * @type {Function}\n * @param {Node} node - Given node.\n * @param {String} eventName - A string representing the event type.\n * @param {Object|Function} callback - The object which receives a notification when an event of the specified type occurs.\n * @param {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n * @returns {Node} - Returns given node.\n *\n * @example\n * eventAdd(document.body, 'click', () => {console.log('CLICKED');});\n * // = > document.body\n */\nexport function eventAdd(node, eventName, callback, useCapture) {\n\tnode.addEventListener(eventName, callback, useCapture);\n\treturn node;\n}\n/**\n * Attaches an event listener to a node.\n *\n * @function eventRemove\n * @category browser\n * @type {Function}\n * @param {Node} node - Given node.\n * @param {String} eventName - A string representing the event type.\n * @param {Object|Function} callback - The object which receives a notification when an event of the specified type occurs.\n * @param {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n * @returns {Node} - Returns given node.\n *\n * @example\n * eventRemove(document.body, () => {console.log('CLICKED');});\n * // = > Undefined\n */\nexport function eventRemove(node, eventName, callback, useCapture) {\n\tnode.removeEventListener(eventName, callback, useCapture);\n\treturn node;\n}\n\n","/**\n * Create a document fragment.\n *\n * @function createFragment\n * @category browser\n * @type {Function}\n * @ignore\n * @returns {Fragment} - Returns a new document fragment.\n */\nexport const createFragment = document.createDocumentFragment.bind(document);\n","/**\n * Append a DOM node.\n *\n * @function append\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @ignore\n * @param {Node} parentNode - The parent node.\n * @param {Node} child - The node to be appended.\n * @returns {undefined} - Returns the child.\n */\nexport function append(parentNode, child) {\n\tparentNode.appendChild(child);\n\treturn child;\n}\n","import { eachObject } from '../objects/each.js';\nimport { isArray } from '../types/isArray.js';\nimport { mapArray } from '../arrays/map.js';\nimport { zipObject } from '../objects/zip.js';\n/**\n * Assign attributes to a DOM node.\n *\n * @function nodeAttribute\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @async\n * @param {Node} node - The DOM node.\n * @param {Object|Array} object - Object with key being the attribute name and the value being the attribute value. If an array is given it will get the values corresponding to the array items.\n * @returns {Object|Node} - If using an array this returns an object of attribute names as keys and their values as the property value. If using an object this will return the provided node.\n *\n * @example\n * nodeAttribute(document.body, { 'data-example': 'test'});\n */\nexport function nodeAttribute(node, object) {\n\tif (isArray(object)) {\n\t\treturn zipObject(object, mapArray(object, (item) => {\n\t\t\treturn node.getAttribute(item);\n\t\t}));\n\t}\n\teachObject(object, (item, key) => {\n\t\tnode.setAttribute(key, item);\n\t});\n\treturn node;\n}\n\n","import { restString } from '../strings/range.js';\nconst dotString = '.';\nconst poundString = '#';\nconst classTest = /^.[\\w_-]+$/;\nconst tagTest = /^[A-Za-z]+$/;\nconst regexSpace = /\\s/;\n/**\n * Wrapper around getElementsByClassName.\n *\n * @function getByClass\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getByClass = document.getElementsByClassName.bind(document);\n/**\n * Wrapper around getElementsByTagName.\n *\n * @function getByTag\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getByTag = document.getElementsByTagName.bind(document);\n/**\n * Wrapper around getElementsByIdName.\n *\n * @function getById\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getById = document.getElementById.bind(document);\n/**\n * Wrapper around querySelector.\n *\n * @function querySelector\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const querySelector = document.querySelector.bind(document);\n/**\n * Wrapper around querySelectorAll.\n *\n * @function querySelectorAll\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const querySelectorAll = document.querySelectorAll.bind(document);\n/**\n * Returns relevant DOM node.\n *\n * @function selector\n * @category browser\n * @ignoreTest\n * @param {String} select - String to be evaluated.\n * @type {Function}\n * @returns {Node} - Returns a DOM node.\n *\n * @example\n * selector('#node');\n * // => <div id=\"node\"></div>\n */\nexport function selector(select) {\n\tconst firstLetter = select[0];\n\tswitch (firstLetter) {\n\t\tcase poundString:\n\t\t\tif (!regexSpace.test(select)) {\n\t\t\t\treturn getById(restString(select));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase dotString:\n\t\t\tif (classTest.test(select)) {\n\t\t\t\treturn getByClass(restString(select));\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (tagTest.test(select)) {\n\t\t\t\treturn getByTag(select);\n\t\t\t}\n\t}\n\treturn querySelectorAll(select);\n}\n\n","import { append } from './append.js';\nimport { eventAdd } from './event.js';\nimport { hasDot } from '../utilities/hasDot.js';\nimport { nodeAttribute } from './attribute.js';\nimport { promise } from '../utilities/promise.js';\nimport { querySelector } from './selector.js';\nconst createElementCache = document.createElement.bind(document);\nconst nodeAttachLoadingEvents = (node) => {\n\treturn promise((accept) => {\n\t\teventAdd(node, 'load', accept, true);\n\t\teventAdd(node, 'error', accept, true);\n\t\tappend(querySelector('head'), node);\n\t});\n};\n/**\n * Asynchronously import a js file and append it to the head node.\n * If a script fails to load importjs won't reject the promise rather it'll return the error event to limit further complications & reduce code complexity.\n *\n * @function importjs\n * @category browser\n * @type {Function}\n * @async\n * @param {*} url - URL of the script to import. If not \".\" is found in the file name \".js\" will be appended.\n * @returns {Promise} - Returns a promise which returns a \"load\" or \"error\" event associated with the script.\n *\n * @example\n * importjs('core.js');\n * importjs('core');\n */\nexport function importjs(url) {\n\tconst src = hasDot(url) && url || `${url}.js`;\n\tconst node = nodeAttribute(createElementCache('script'), {\n\t\tasync: '',\n\t\tsrc\n\t});\n\treturn nodeAttachLoadingEvents(node);\n}\n\n","import { eventAdd } from './event.js';\nimport { getById } from './selector.js';\nimport { importjs } from './importScript.js';\n/**\n * Runs a function if the document has finished loading. If not, add an eventlistener.\n *\n * @function isDocumentReady\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @param {Function} callable - Function to be run.\n * @returns {Boolean|Function} - If the document is ready, returns a function. If not, return false.\n *\n * @example\n * isDocumentReady(() => {return 1});\n * // => 1\n */\nexport function isDocumentReady(callable) {\n\tconst state = document.readyState;\n\tconst checkStatus = state === 'interactive' || state === 'completed' || state === 'complete';\n\tif (checkStatus) {\n\t\treturn (callable) ? callable() : true;\n\t}\n\tif (callable) {\n\t\teventAdd(document, 'DOMContentLoaded', callable);\n\t}\n\treturn false;\n}\nisDocumentReady(() => {\n\tconst scriptTag = getById('AcidLib');\n\tconst scriptName = (scriptTag && scriptTag.getAttribute('data-index')) || '/index';\n\timportjs(scriptName);\n});\n","const protocol = location.protocol;\nconst protocolSocket = (protocol === 'http:') ? 'ws' : 'wss';\nconst hostname = location.hostname;\n/**\n * Holds client hardware, browser, and host info.\n *\n * @memberof $\n * @category browser\n * @ignoreTest\n * @property {Object} info - Client hardware & host info.\n * @type {Object}\n */\nexport const info = {\n\thardware: {\n\t\tcores: navigator.hardwareConcurrency\n\t},\n\thost: {\n\t\tname: hostname,\n\t\tprotocol,\n\t\tprotocolSocket,\n\t}\n};\n\n","import { assign } from '../objects/assign.js';\nimport { eventAdd } from './event.js';\nimport { info } from './info.js';\nimport { isDocumentReady } from './ready.js';\nexport function saveDimensions() {\n\tassign(info, {\n\t\tbodyHeight: document.body.offsetHeight,\n\t\tbodyWidth: document.body.offsetWidth,\n\t\twindowHeight: window.innerHeight,\n\t\twindowWidth: window.innerWidth,\n\t});\n}\n/**\n * Save current document & window dimensions to the info property.\n *\n * @function updateDimensions\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * updateDimensions();\n */\nexport function updateDimensions() {\n\tsaveDimensions();\n}\nisDocumentReady(updateDimensions);\neventAdd(window, 'load', updateDimensions, true);\neventAdd(window, 'resize', updateDimensions, true);\n\n","/**\n * LocalStorage Module..\n *\n * @module browser/storage\n */\nimport { hasValue } from '../types/hasValue.js';\nimport { isString } from '../types/isString.js';\nimport { stringify } from '../utilities/json.js';\nimport { virtualStorage } from '../utilities/virtualStorage.js';\nexport let hasLocal;\nfunction hasStorage(storeCheck) {\n\ttry {\n\t\tstoreCheck().removeItem('TESTING');\n\t\thasLocal = true;\n\t} catch (e) {\n\t\thasLocal = false;\n\t}\n}\nhasStorage(() => {\n\treturn localStorage;\n});\n/**\n * Constructs a virtual storage container with localStorage support.\n * BrowserStorage will fallback to strictly virtual storage if localStorage isn't supported.\n * If localStorage is supported virtual storage will be used first & only fallback to localStorage when needed.\n * BrowserStorage is ideal as a seemless drop in replacement for localStorage when not supported or allowed.\n *\n * @class BrowserStorage\n * @category browser\n * @returns {BrowserStorage} - Returns a new instance of BrowserStorage.\n *\n * @example\n * import { BrowserStorage, construct, assert } from '@universalweb/acid';\n * const storageBrowserStorage = construct(BrowserStorage);\n * storageBrowserStorage.setItem('key', 'value');\n * assert(storageBrowserStorage.getItem('key'), 'value');\n */\nexport class BrowserStorage {\n\tconstructor(initialObject) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local = localStorage;\n\t\t}\n\t\tthis.storage = virtualStorage(initialObject);\n\t}\n\thasLocal = hasLocal;\n\t/**\n\t * Save an item to a browserStorage.\n\t *\n\t * @function setItem\n\t * @class BrowserStorage\n\t * @category browser\n\t * @param {String} key - The key used to store the data.\n\t * @param {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { BrowserStorage, construct, assert } from '@universalweb/acid';\n\t * const storageBrowserStorage = construct(BrowserStorage);\n\t * storageBrowserStorage.setItem('key', 'value');\n\t * assert(storageBrowserStorage.getItem('key'), 'value');\n\t */\n\tsetItem(key, value) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.setItem(key, (isString(value)) ? value : stringify(value));\n\t\t}\n\t\treturn this.storage.setItem(key, value);\n\t}\n\t/**\n\t * Get an item from a browserStorage.\n\t *\n\t * @function getItem\n\t * @class BrowserStorage\n\t * @category browser\n\t * @param {String} key - The key used to store the data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { BrowserStorage, construct, assert } from '@universalweb/acid';\n\t * const storageBrowserStorage = construct(BrowserStorage);\n\t * storageBrowserStorage.setItem('key', 'value');\n\t * assert(storageBrowserStorage.getItem('key'), 'value');\n\t */\n\tgetItem(key) {\n\t\tconst item = this.storage.getItem(key);\n\t\tif (hasValue(item)) {\n\t\t\treturn item;\n\t\t}\n\t\tif (!hasValue(item) && this.hasLocal) {\n\t\t\treturn this.local.getItem(key);\n\t\t}\n\t}\n\t/**\n\t * Clears all data for the browserStorage including all of localStorage if supported.\n\t *\n\t * @function clear\n\t * @class BrowserStorage\n\t * @category browser\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { BrowserStorage, construct, assert } from '@universalweb/acid';\n\t * const storageBrowserStorage = construct(BrowserStorage);\n\t * storageBrowserStorage.setItem('key', 'value');\n\t * assert(storageBrowserStorage.getItem('key'), 'value');\n\t * storageBrowserStorage.clear();\n\t * assert(storageBrowserStorage.getItem('key'), undefined);\n\t */\n\tclear() {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.clear();\n\t\t}\n\t\tthis.storage.clear();\n\t}\n\t/**\n\t * Remove an item from a browserStorage.\n\t *\n\t * @class BrowserStorage\n\t * @category browser\n\t * @function removeItem\n\t * @param {String} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { BrowserStorage, construct, assert } from '@universalweb/acid';\n\t * const storageBrowserStorage = construct(BrowserStorage);\n\t * storageBrowserStorage.setItem('key', 'value');\n\t * assert(storageBrowserStorage.getItem('key'), 'value');\n\t * storageBrowserStorage.removeItem('key');\n\t * assert(storageBrowserStorage.getItem('key'), undefined);\n\t */\n\tremoveItem(key) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.removeItem(key);\n\t\t}\n\t\tthis.storage.removeItem(key);\n\t}\n}\n/**\n * The browserStorage function is a factory which wraps the BrowserStorage class constructor.\n *\n * @function browserStorage\n * @category browser\n * @type {Function}\n * @returns {*} - Returns a new BrowserStorage Object.\n *\n * @example\n * const storageBrowserStorage = browserStorage();\n * // => New BrowserStorage Object\n */\nexport function browserStorage(virtualFlag) {\n\treturn new BrowserStorage(virtualFlag);\n}\n\n","import { isString } from '../types/isString.js';\nimport { stringify } from '../utilities/json.js';\nconst generateTheme = (color, bg) => {\n\treturn `color:${color};background:${bg};`;\n};\nexport const themes = {\n\talert: generateTheme('#fff', '#f44336'),\n\timportant: generateTheme('#fff', '#E91E63'),\n\tnotify: generateTheme('#fff', '#651FFF'),\n\twarning: generateTheme('#000', '#FFEA00'),\n};\n/**\n * Console.trace wrapper with theme support.\n *\n * @function cnsl\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @param {Object} value - The value to be logged.\n * @param {String} themeName - The name of the theme to be used.\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * cnsl('Lucy', 'notify');\n * // 'Lucy'\n */\nexport const cnsl = (value, themeName) => {\n\tconst data = isString(value) ? value : stringify(value);\n\tif (themeName === 'alert' || themeName === 'warning') {\n\t\treturn console.trace(`%c${data}`, `${themes[themeName]}font-size:13px;padding:2px 5px;border-radius:2px;`);\n\t}\n\tconsole.log(`%c${data}`, `${themes[themeName]}font-size:13px;padding:2px 5px;border-radius:2px;`);\n};\n/**\n * Create color themes for cnsl method.\n *\n * @function cnslTheme\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @param {String} themeName - The name of the theme.\n * @param {String} color - The text color.\n * @param {String} background - The background color of the block.\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * cnslTheme('BlackNWhite', '#fff', '#000');\n */\nexport const cnslTheme = (themeName, color, background) => {\n\tthemes[themeName] = generateTheme(color, background);\n};\n\n","/**\n * Adds two numbers.\n *\n * @function add\n * @category math\n * @type {Function}\n * @param {Number} augend - First number.\n * @param {Number} addend - Second number which is being added to another (augend).\n * @returns {Number} - Returns the sum of the arguments.\n *\n * @example\n * import { add, assert } from '@universalweb/acid';\n * assert(add(1, 1), 2);\n */\nexport function add(augend, addend) {\n\treturn augend + addend;\n}\n","/**\n * Creates a function that executes callable, only after being called n times.\n *\n * @function after\n * @category function\n * @type {Function}\n * @param {Number} amount - The number of calls until method is invoked.\n * @param {Function} callable - The function to be called.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @example\n * import { after, assert } from '@universalweb/acid';\n * const onlyAfter = after(1, (item) => { return item;});\n * assert(onlyAfter(1), undefined);\n * assert(onlyAfter(2), 2);\n */\nexport function after(amount, callable) {\n\tlet point = amount;\n\tlet value;\n\tconst onlyAfter = (...args) => {\n\t\tif (point !== null) {\n\t\t\tpoint--;\n\t\t}\n\t\tif (point <= 0) {\n\t\t\tvalue = callable(...args);\n\t\t\tpoint = null;\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyAfter;\n}\n","import { eachArray } from '../arrays/each.js';\n/**\n * Takes all but the last item in the array.\n *\n * @function arraysToObject\n * @type {Function}\n * @category utility\n * @param {Array} source - Array to have items extracted from.\n * @param {Array} properties - Array to have items extracted from.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * import { arraysToObject, assert } from '@universalweb/acid';\n * assert(arraysToObject([1, 2, 3], ['a', 'b', 'c']), {a:1, b:2, c: 3});\n */\nexport function arraysToObject(source, properties) {\n\tconst sortedObject = {};\n\teachArray(source, (item, key) => {\n\t\tsortedObject[properties[key]] = item;\n\t});\n\treturn sortedObject;\n}\n\n","/**\n * Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.\n *\n * @function ary\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to cap arguments for.\n * @param {Number} amount - The arity cap.\n * @returns {Object} - Returns the new capped function.\n *\n * @example\n * import { ary, assert } from '@universalweb/acid';\n * assert(ary((...args) => { return args;}, 2)(1, 2, 3), [1, 2]);\n */\nexport function ary(callable, amount) {\n\treturn (...args) => {\n\t\treturn callable(...args.splice(0, amount));\n\t};\n}\n\n","/**\n * Creates a function that executes callable, only before n times.\n *\n * @function before\n * @category function\n * @type {Function}\n * @param {Number} amount - The number of calls before n.\n * @param {Function} callable - The function to be called.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @example\n * import { before, assert } from '@universalweb/acid';\n * const onlyBefore = before(3, () => { return 1;});\n * assert(onlyBefore(1), 1);\n */\nexport function before(amount, callable) {\n\tlet point = amount;\n\tlet value;\n\tconst onlyBefore = (...args) => {\n\t\tif (point !== null) {\n\t\t\tpoint--;\n\t\t}\n\t\tif (point >= 1) {\n\t\t\tvalue = callable(...args);\n\t\t} else {\n\t\t\tpoint = null;\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyBefore;\n}\n","import { assert } from './assert.js';\nimport { assign } from '../objects/assign.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { map } from './map.js';\n/**\n * Loops through an object or an array and binds the given object to all functions encountered. Optionally accepts an object which to assign the newly bound functions to.\n *\n * @function bindAll\n * @category utility\n * @type {Function}\n * @param {Object|Function|Array} collection - The functions to bind.\n * @param {*} bindThis - Object to be bound to functions.\n * @param {Object|Function|Array} targetAssign - Object to assign newly bound functions to.\n * @returns {Object|Function|Array} - Returns the collection of bound functions or the assign target provided.\n *\n * @example\n * import { assert, bindAll } from '@universalweb/acid';\n * const bounded = bindAll([function () { return this;}], 'Bounded');\n * assert(bounded[0](), 'Bounded');\n */\nexport function bindAll(collection, bindThis, targetAssign) {\n\tconst results = map(collection, (item) => {\n\t\treturn isFunction(item) ? item.bind(bindThis) : item;\n\t});\n\treturn (targetAssign) ? assign(targetAssign, results) : results;\n}\n\n","/**\n * Calculate the progress from a given total and current amount.\n *\n * @function calcProgress\n * @category utility\n * @type {Function}\n * @param {Number} total - The total amount.\n * @param {Number} currentAmount - The current amount.\n * @returns {Number} - The progress as a percentage.\n *\n * @example\n * import { calcProgress, assert } from '@universalweb/acid';\n * assert(calcProgress(100, 1), 1);\n */\nexport function calcProgress(total, currentAmount) {\n\tif (total === 0) {\n\t\treturn false;\n\t}\n\tif (currentAmount === 0) {\n\t\treturn 0;\n\t}\n\treturn (currentAmount / total) * 100;\n}\n\n","/**\n * Chunks an array according to a user defined number.\n *\n * @function chunk\n * @category Array\n * @type {Function}\n * @param {Array} array - Array to be chunked.\n * @param {Number} size - Number which determines the size of each chunk.\n * @returns {Array} - A chunked version of the source array.\n *\n * @example\n * import { chunk, assert } from '@universalweb/acid';\n * assert(chunk([1,2,3], 1), [[1],[2],[3]]);\n */\nexport function chunk(array, size = 1) {\n\tconst chunked = [];\n\tlet index = 0;\n\tarray.forEach((item, key) => {\n\t\tif (!(key % size)) {\n\t\t\tchunked.push([]);\n\t\t\tif (key) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tchunked[index].push(item);\n\t});\n\treturn chunked;\n}\n","import { clearArray } from '../arrays/clear.js';\nimport { clearBuffer } from '../buffers/clear.js';\nimport { isArray } from '../types/isArray.js';\nimport { isBuffer } from '../types/isBuffer.js';\n/**\n * Clears the values out of an array, buffer, and objects like Map that have a clear method.\n *\n * @function clear\n * @category utility\n * @type {Function}\n * @param {Array} source - Takes an array to be emptied.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { clear, assert } from '@universalweb/acid';\n * assert(clear(Buffer.from([1,'B', 'Cat'])), []);\n */\nexport function clear(source) {\n\tif (source) {\n\t\tif (isBuffer(source)) {\n\t\t\treturn clearBuffer(source);\n\t\t} else if (isArray(source)) {\n\t\t\treturn clearArray(source);\n\t\t} else if (source.clear) {\n\t\t\tsource.clear();\n\t\t} else if (source.length) {\n\t\t\tsource.length = 0;\n\t\t}\n\t}\n\treturn source;\n}\n\n","/**\n * Clone an array (uses .slice()) and assign the source arrays values to the new array.\n *\n * @function cloneArray\n * @category Array\n * @type {Function}\n * @param {Array} source - The array to be quick cloned.\n * @returns {Array} - The newly cloned array with assigned items.\n *\n * @example\n * import { cloneArray, assert } from '@universalweb/acid';\n * assert(cloneArray([1,'B', 'Cat']), [1, 'B', 'Cat']);\n */\nexport function cloneArray(source) {\n\treturn source.slice();\n}\n\n","import { isPlainObject } from '../types/isPlainObject.js';\nimport { isTruthy } from '../types/isTruthy.js';\nimport { keys } from '../objects/keys.js';\n/**\n * Creates an array with all isFalsy values removed. The values false, null, 0, \"\", undefined, and NaN are isFalsy.\n *\n * @function compact\n * @category Utility\n * @type {Function}\n * @param {Array|Object} source - Array or Object to be compacted.\n * @returns {Array|Object} - A new object or array containing the filtered values.\n *\n * @example\n * import { compact, assert } from '@universalweb/acid';\n * assert(compact([1,'B', 'Cat', false, null, 0 , '', undefined, NaN]), [1, 'B', 'Cat']);\n */\nexport function compact(source) {\n\tif (isPlainObject(source)) {\n\t\tconst sourceKeys = keys(source);\n\t\tconst sourceKeysLength = sourceKeys.length;\n\t\tconst targetObject = {};\n\t\tfor (let i = 0; i < sourceKeysLength; i++) {\n\t\t\tconst keyName = sourceKeys[i];\n\t\t\tconst item = source[keyName];\n\t\t\tconst isisTruthy = isTruthy(item);\n\t\t\tif (isisTruthy) {\n\t\t\t\ttargetObject[keyName] = item;\n\t\t\t}\n\t\t}\n\t\treturn targetObject;\n\t}\n\treturn source.filter((item) => {\n\t\treturn isTruthy(item);\n\t});\n}\n\n","import { assign } from './assign.js';\nimport { eachObject } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\n/**\n * Extracts all keys from an object whose values are not null or undefined.\n *\n * @function compactKeys\n * @category object\n * @type {Function}\n * @param {Object} object - Object from which keys are extracted.\n * @returns {Array} - Returns an array of key values.\n *\n * @example\n * import { compactKeys, assert } from '@universalweb/acid';\n * assert(compactKeys({a: 1, b: 0, c: undefined, d: false, e: null}), ['a', 'b', 'd']);\n */\nexport function compactKeys(object) {\n\tconst compactedKeys = [];\n\teachObject(object, (item, key) => {\n\t\tif (hasValue(item)) {\n\t\t\tcompactedKeys.push(key);\n\t\t}\n\t});\n\treturn compactedKeys;\n}\n\n","import { concurrentArray } from '../arrays/concurrent.js';\nimport { isArray } from '../types/isArray.js';\n/**\n * Iterates through an array, invokes the async iteratee, and adds the promises to a queue. Then uses & returns the Promise.all on the queue returning the values from each promise. Does not await on the async iteratee.\n *\n * @function concurrent\n * @category utility\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Promise|Array|undefined} - The array from Promise.all.\n *\n * @example\n * import { concurrent, assert } from '@universalweb/acid';\n * const results = await concurrent([1, 2, 3], async (item) => {\n *   return item * 2;\n * });\n * assert(has(results, [2, 4, 6]), true);\n */\nexport async function concurrent(source, iteratee, additionalArgument) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tif (isArray(source)) {\n\t\treturn concurrentArray(source, iteratee, additionalArgument);\n\t}\n\treturn;\n}\n\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from './returnValue.js';\n/**\n * Iterates through an array, invokes the async iteratee, and adds the promises to a queue. Then uses & returns the Promise.allSettled on the queue returning the values from each promise. Does not await on the async iteratee.\n *\n * @function concurrentStatus\n * @category utility\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - The array from Promise.allSettled.\n *\n * @example\n * import { concurrentStatus, assert } from '@universalweb/acid';\n * const tempList = [];\n * await concurrentStatus([1, 2], async (item) => {\n *   return item;\n * });\n * assert(tempList,  [{status: 'fulfilled', value: 1}, {status: 'fulfilled', value: 2}]);\n */\nexport function concurrentStatus(source, iteratee, additionalArgument) {\n\tconst arrayLength = source.length;\n\tconst queue = [];\n\tfor (let index = 0;index < arrayLength; index++) {\n\t\tqueue[index] = iteratee(source[index], index, source, arrayLength, additionalArgument);\n\t}\n\treturn Promise.allSettled(queue);\n}\n\n","import { chunk } from '../arrays/chunk.js';\nimport { eachArray } from '../arrays/each.js';\n/**\n * Creates an object composed of keys generated from the results of running each element of collection through iteratee.\n *\n * @function countBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} iteratee - The iteratee to transform keys.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * import { countBy, assert } from '@universalweb/acid';\n * assert(countBy([{a:1}, {a:3}], (item) => { return 'a';}), {a: 2});\n */\nexport function countBy(collection, iteratee) {\n\tconst object = {};\n\tlet result;\n\teachArray(collection, (item) => {\n\t\tresult = iteratee(item);\n\t\tif (!object[result]) {\n\t\t\tobject[result] = 0;\n\t\t}\n\t\tobject[result]++;\n\t});\n\treturn object;\n}\n","import { eachArray } from '../arrays/each.js';\n/**\n * Count the amount of times a key is present in a collection.\n *\n * @function countKey\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} propertyName - The name of the key.\n * @returns {Number} - The count.\n *\n * @example\n * import { countKey, assert } from '@universalweb/acid';\n * assert(countKey([{a:1}, {a:3}], 'a'), 2);\n */\nexport function countKey(collection, propertyName) {\n\tlet count = 0;\n\teachArray(collection, (item) => {\n\t\tif (item[propertyName]) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n}\n","import { eachArray } from '../arrays/each.js';\n/**\n * Count the amount of times a key is not present in a collection.\n *\n * @function countWithoutKey\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {String} propertyName - The name of the key.\n * @returns {Number} - The count.\n *\n * @example\n * import { countWithoutKey, assert } from '@universalweb/acid';\n * assert(countWithoutKey([{a:1}, {a:3}], 'b'), 2);\n */\nexport function countWithoutKey(collection, propertyName) {\n\tlet count = 0;\n\teachArray(collection, (item) => {\n\t\tif (!item[propertyName]) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n}\n","import { clearArray } from '../arrays/clear.js';\n/**\n * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.\n *\n * @function curry\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to curry.\n * @param {Number} arity - The arity of method.\n * @returns {*} - Returns the new curried function.\n *\n * @example\n * import { curry, assert } from '@universalweb/acid';\n * const result = curry((a, b, c) => {\n *   return [a, b, c];\n * })(1)(2)(3);\n * assert(result, [1, 2, 3]);\n */\nexport function curry(callable, arity = callable.length) {\n\tconst curries = [];\n\tconst curried = (...curryArgs) => {\n\t\tcurries.push(...curryArgs);\n\t\tif (curries.length === arity) {\n\t\t\tconst result = callable(...curries);\n\t\t\tclearArray(curries);\n\t\t\treturn result;\n\t\t}\n\t\treturn curried;\n\t};\n\treturn curried;\n}\n\n","import { clearArray } from '../arrays/clear.js';\n/**\n * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.\n *\n * @function curryRight\n * @type {Function}\n * @param {Function} callable - The function to curry.\n * @param {Number} arity - The arity of method.\n * @returns {*} - Returns the new curried function.\n *\n * @example\n * import { curryRight, assert } from '@universalweb/acid';\n * const result = curryRight((a, b, c) => {\n *   return [a, b, c];\n * })(1)(2)(3);\n * assert(result, [3, 2, 1]);\n */\nexport function curryRight(callable, arity = callable.length) {\n\tconst curries = [];\n\tconst curried = (...curryArgs) => {\n\t\tcurries.unshift(...curryArgs);\n\t\tif (curries.length === arity) {\n\t\t\tconst result = callable(...curries);\n\t\t\tclearArray(curries);\n\t\t\treturn result;\n\t\t}\n\t\treturn curried;\n\t};\n\treturn curried;\n}\n","import { timer, timers } from '../utilities/timer.js';\nimport { apply } from '../internal/apply.js';\nimport { falsy } from '../utilities/stubFalse.js';\nimport { truth } from '../utilities/stubTrue.js';\n/**\n * Creates a debounced function that delays invoking callable until after milliseconds have elapsed since the last time the debounced function was invoked. The debounce function has a clear method to cancel the timer.\n *\n * @function debounce\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Number} time - The time in milliseconds.\n * @returns {Function} - The debounced function.\n *\n * @example\n * import { debounce, promise, assert } from '@universalweb/acid';\n * const promised = promise((a) => {\n * \t\tconst debounced = debounce(() => { debounced.clear(); a('debounced'); }, 0);\n * });\n * assert(await promised(), 'debounced');\n */\nexport function debounce(callable, time) {\n\tfunction debounced(...args) {\n\t\tif (debounced.id !== falsy) {\n\t\t\ttimers.remove(debounced.id);\n\t\t}\n\t\tdebounced.id = timer(() => {\n\t\t\tdebounced.callable(...args);\n\t\t\tdebounced.id = falsy;\n\t\t}, time);\n\t}\n\tdebounced.id = falsy;\n\tdebounced.callable = callable.bind(debounced);\n\tdebounced.clear = () => {\n\t\tif (debounced.id !== falsy) {\n\t\t\ttimers.remove(debounced.id);\n\t\t\tdebounced.id = falsy;\n\t\t}\n\t};\n\treturn debounced;\n}\n","/**\n * Decrements a number.\n *\n * @function deduct\n * @category math\n * @type {Function}\n * @param {Number} source - First number.\n * @returns {Number} - Returns a decremented version of the number.\n *\n * @example\n * import { multiply, assert } from '@universalweb/acid';\n * assert(multiply(10, 5), 50);\n * deduct(10);\n * // => 9\n */\nexport function deduct(source) {\n\treturn source - 1;\n}\n","/**\n * Divides two numbers.\n *\n * @function divide\n * @category math\n * @type {Function}\n * @param {Number} source - First number.\n * @param {Number} value - Second number.\n * @returns {Number} - Returns the quotient of the arguments.\n *\n * @example\n * import { divide, assert } from '@universalweb/acid';\n * assert(divide(10, 5), 2);\n */\nexport function divide(source, value) {\n\treturn source / value;\n}\n","import { drop } from './drop.js';\n/**\n * Removes all items from an array before a specified index.\n *\n * @function dropRight\n * @type {Function}\n * @category array\n * @param {Array} array - Source array.\n * @param {Number} amount - Amount of items to drop from the array.\n * @param {Number} [upTo = array.length] - Index to stop at.\n * @returns {Array} - An array with all values removed before a user defined index.\n *\n * @example\n * import { dropRight, assert } from '@universalweb/acid';\n * assert(dropRight([1, 2, 3]), [1, 2]);\n * assert(dropRight([1, 2, 3], 2), [1]);\n */\nexport const dropRight = (array, amount = 1, upTo = array.length) => {\n\treturn drop(array, 0, upTo - amount);\n};\n\n","import { hasValue } from '../types/hasValue.js';\nimport { isBuffer } from '../types/isBuffer.js';\n/**\n * Ensures the source is a Buffer if not the source is used to create a buffer using Buffer.from else if there's no source an empty Buffer is returned with Buffer.alloc(0). Keep in mind not all objects can be used to create a Buffer.\n *\n * @function ensureBuffer\n * @category buffer\n * @type {Function}\n * @param {*} source - Object to be checked.\n * @returns {Array} - Returns an array.\n *\n * @example\n * import { isBuffer, ensureBuffer, assert } from '@universalweb/acid';\n * assert(isBuffer(ensureBuffer('test')), true);\n */\nexport function ensureBuffer(source) {\n\treturn (isBuffer(source) && source) || (hasValue(source) && Buffer.from(source)) || Buffer.alloc(0);\n}\n","import { every } from './every.js';\nimport { isAsync } from '../types/isAsync.js';\nexport function everyArg(...methods) {\n\tif (isAsync(methods[0])) {\n\t\treturn async function(...args) {\n\t\t\treturn every(methods, async (method) => {\n\t\t\t\treturn every(args, async (item) => {\n\t\t\t\t\treturn method(item);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t}\n\treturn function(...args) {\n\t\treturn every(methods, (method) => {\n\t\t\treturn every(args, (item) => {\n\t\t\t\treturn method(item);\n\t\t\t});\n\t\t});\n\t};\n}\n","import { findIndexCache } from './findIndexCache.js';\n/**\n * Finds an object in a collection by the given id and property name and returns the array index of the object.\n *\n * @function findIndex\n * @type {Function}\n * @category collection\n * @param {Array} collection - Collection to be checked for an item.\n * @param {Number|string} id - The value to look for.\n * @param {String} [propertyName = 'id'] - The name of the property to compare.\n * @returns {Number} - The index of the object.\n *\n * @example\n * findIndex([{id: 1}, {id: 2}], 1);\n * // => 0\n */\nexport function findIndex(collection, id, propertyName = 'id') {\n\tconst result = collection.findIndex((element, index) => {\n\t\treturn findIndexCache(element, index, collection, id, propertyName);\n\t});\n\treturn (result === -1) ? false : result;\n}\n\n","import { findIndexCache } from './findIndexCache.js';\n/**\n * Finds an object in a collection by the given id and property name.\n *\n * @function findItem\n * @type {Function}\n * @category collection\n * @param {Array} collection - Collection to be checked for an item.\n * @param {Number|string} id - The value to look for.\n * @param {String} [propertyName = 'id'] - The name of the property to compare.\n * @returns {Object} - The found object.\n *\n * @example\n * findItem([{id: 1}, {id: 2}], 1);\n * // => {id: 1}\n */\nexport function findItem(collection, id, propertyName = 'id') {\n\tconst result = collection.find((element, index) => {\n\t\treturn findIndexCache(element, index, collection, id, propertyName);\n\t});\n\treturn (result === -1) ? false : result;\n}\n","/**\n * Takes the first or multiple items from an array.\n *\n * @function first\n * @type {Function}\n * @category array\n * @param {Array} array - Array to extract from.\n * @param {Number} upTo - Number which determines how many items after the first item are extracted from the array.\n * @returns {Array} - Returns an array.\n *\n * @example\n * import { first, assert } from '@universalweb/acid';\n * assert(first([1, 2, 3]), 1);\n */\nexport function first(array, upTo) {\n\treturn (upTo) ? array.slice(0, upTo) : array[0];\n}\n\n","import { ensureArray } from './ensure.js';\n/**\n * Flattens an array up to the provided level.\n *\n * @function flatten\n * @type {Function}\n * @category array\n * @param {Array} source - Array to flatten.\n * @param {Number} [level = 1] - Number which determines how deep the array nest can be.\n * @returns {Array|undefined} - Returns an array.\n *\n * @example\n * import { flatten, assert } from '@universalweb/acid';\n * assert(flatten([1, [2, [3, [4]], 5]]), [1, 2, [3, [4]], 5]);\n */\nexport function flatten(source, level = 1) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tlet sourceArray = source;\n\tfor (let i = 0; i < level; i++) {\n\t\tsourceArray = sourceArray.reduce((previousValue, currentValue) => {\n\t\t\treturn previousValue.concat(ensureArray(currentValue));\n\t\t}, []);\n\t}\n\treturn sourceArray;\n}\n\n","export async function forEachAsync(source, callback) {\n\tconst values = [];\n\tconst properties = [];\n\tlet valuesLength = 0;\n\tsource.forEach((item, key) => {\n\t\tvalues[valuesLength] = item;\n\t\tproperties[valuesLength] = item;\n\t\tvaluesLength++;\n\t});\n\tfor (let index = 0; index < valuesLength; index++) {\n\t\tawait callback(values[index], properties[index]);\n\t}\n\treturn source;\n}\n","import { cloneType } from '../types/cloneType.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isFunction } from '../types/isFunction.js';\nexport function forMap(source, callback) {\n\tconst cloned = cloneType(source);\n\tconst method = cloned.push || cloned.add;\n\tif (method && isFunction(method)) {\n\t\tconst methodBound = method.bind(cloned);\n\t\tsource.forEach((item) => {\n\t\t\tconst result = callback(item, cloned);\n\t\t\tmethodBound(result);\n\t\t});\n\t} else if (isFunction(cloned.set)) {\n\t\tsource.forEach((item, key) => {\n\t\t\tconst result = callback(item, key, cloned);\n\t\t\tcloned.set(key, result);\n\t\t});\n\t} else {\n\t\tsource.forEach((item, key) => {\n\t\t\tconst result = callback(item, key, cloned);\n\t\t\tcloned[key] = result;\n\t\t});\n\t}\n\treturn cloned;\n}\n","/**\n * Return the file extension.\n *\n * @function getFileExtension\n * @category file\n * @param {*} source - Object to be checked.\n * @returns {String|undefined} - Returns the extension.\n *\n * @example\n * import { getFileExtension, assert } from '@universalweb/acid';\n * assert(getFileExtension('test.js'),'js');\n */\nexport function getFileExtension(source) {\n\tif (source) {\n\t\treturn source.substring(source.lastIndexOf('.') + 1);\n\t}\n}\n","/**\n * Return the file extension.\n *\n * @function getFilename\n * @category file\n * @param {*} source - Object to be checked.\n * @returns {String|undefined} - Returns the extension.\n *\n * @example\n * import { getFilename, assert } from '@universalweb/acid';\n * assert(getFilename('./universalweb/test.js'),'test.js');\n */\nexport function getFilename(source) {\n\tif (source) {\n\t\treturn source.substring(source.lastIndexOf('/') + 1);\n\t}\n}\n","import { sortCollectionAlphabetically } from './sortCollectionAlphabetically';\nimport { sortCollectionAscending } from './sortCollectionAscending.js';\n/**\n * Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.\n *\n * @function getHighest\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - The property name to sort by based on it's value.\n * @returns {Object} - The newest object in the collection.\n *\n * @example\n * import { getHighest, assert } from '@universalweb/acid';\n * assert(getHighest([{id: 1}, {id: 0}], 'id'), {id: 0});\n */\nexport function getHighest(collection, propertyName = 'id') {\n\treturn sortCollectionAscending(collection, propertyName)[0];\n}\n","import { getHighest } from './getHighest';\nimport { sortCollectionAlphabetically } from './sortCollectionAlphabetically';\nimport { sortCollectionDescending } from './sortCollectionDescending.js';\n/**\n * Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.\n *\n * @function getLowest\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection to be sorted.\n * @param {String} propertyName - The property name to sort by based on it's value.\n * @returns {Object} - The newest object in the collection.\n *\n * @example\n * import { getLowest, assert } from '@universalweb/acid';\n * assert(getLowest([{id: 1}, {id: 0}], 'id'), {id: 1});\n */\nexport function getLowest(collection, propertyName) {\n\treturn sortCollectionDescending(collection, propertyName, false)[0];\n}\n","import { everyArray } from './every.js';\n/**\n * What index should the number be inserted at to keep a sorted array still sorted.\n *\n * @function getNumberInsertIndex\n * @category array\n * @type {Function}\n * @param {Array} source - Array to be checked.\n * @param {Number} target - Number to check where to be inserted.\n * @returns {Number} - The index at which to insert.\n *\n * @example\n * import { getNumberInsertIndex, assert } from '@universalweb/acid';\n * assert(getNumberInsertIndex([30, 39, 50], 40), 1);\n */\nexport function getNumberInsertIndex(source, target) {\n\tlet insertIndex = 0;\n\teveryArray(source, (item, index) => {\n\t\tinsertIndex = index;\n\t\tif (target >= item) {\n\t\t\tinsertIndex = index + 1;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t});\n\treturn insertIndex;\n}\n","import { eachArray } from '../arrays/each.js';\n/**\n * Creates an object composed of keys generated from the results of running each element of collection thru iteratee.\n * The order of grouped values is determined by the order they occur in collection.\n * The corresponding value of each key is an array of elements responsible for generating the key.\n *\n * @function groupBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} iteratee - The iteratee to transform keys.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n */\nexport function groupBy(collection, iteratee) {\n\tconst sortedObject = {};\n\teachArray(collection, (item) => {\n\t\tconst results = iteratee(item);\n\t\tif (!sortedObject[results]) {\n\t\t\tsortedObject[results] = [];\n\t\t}\n\t\tsortedObject[results].push(item);\n\t});\n\treturn sortedObject;\n}\n\n","import { every } from './every.js';\nimport { everyArray } from '../arrays/every.js';\nimport { everyObject } from '../objects/every.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nimport { isRegex } from '../types/isRegex.js';\nimport { isString } from '../types/isString.js';\nimport { noValue } from '../types/noValue.js';\n/**\n * Checks if an object contains something. For basic searches.\n *\n * @function has\n * @category utility\n * @param {Array|String|Object} source - Object to be checked.\n * @param {String|Array|Function|RegExp} search - Object that is being searched for.\n * @param {Number} position - Index at which to start searching.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { has, assert } from '@universalweb/acid';\n * assert(has('Hello World', 'Hello'), true);\n * assert(has(['Hello', 'World'], 'hello'), true);\n */\nexport function has(source, search, position) {\n\tif (noValue(source) || noValue(search)) {\n\t\treturn false;\n\t}\n\tif (source === search) {\n\t\treturn true;\n\t}\n\tif (isString(source)) {\n\t\tif (isString(search)) {\n\t\t\treturn source.includes(search, position);\n\t\t}\n\t\tif (isRegex(search)) {\n\t\t\treturn search.test(source);\n\t\t}\n\t\tif (isFunction(search)) {\n\t\t\treturn search(source);\n\t\t}\n\t\tif (isArray(search)) {\n\t\t\treturn everyArray(search, (item) => {\n\t\t\t\treturn has(source, item);\n\t\t\t});\n\t\t}\n\t\treturn every(search, (item) => {\n\t\t\treturn has(source, item);\n\t\t});\n\t}\n\tif (isArray(source)) {\n\t\tif (isRegex(search)) {\n\t\t\treturn everyArray(source, (item) => {\n\t\t\t\treturn item.test(search);\n\t\t\t});\n\t\t}\n\t\tif (isFunction(search)) {\n\t\t\treturn everyArray(source, search);\n\t\t}\n\t\tif (isArray(search)) {\n\t\t\treturn everyArray(search, (item) => {\n\t\t\t\treturn has(source, item);\n\t\t\t});\n\t\t}\n\t\treturn source.includes(search, position);\n\t}\n\tif (isPlainObject(source)) {\n\t\tif (isRegex(search)) {\n\t\t\treturn everyObject(source, (item) => {\n\t\t\t\treturn item.test(search);\n\t\t\t});\n\t\t}\n\t\tif (isFunction(search)) {\n\t\t\treturn everyObject(source, search);\n\t\t}\n\t\tif (isPlainObject(search)) {\n\t\t\treturn everyObject(source, (item, key) => {\n\t\t\t\treturn item === search[key];\n\t\t\t});\n\t\t}\n\t\treturn everyObject(source, (item) => {\n\t\t\treturn has(item, search);\n\t\t});\n\t}\n\treturn false;\n}\n","import { isFunction } from '../types/isFunction.js';\n/**\n * Checks if the given method is a function. If it is then it invokes it with the given arguments.\n *\n * @function ifInvoke\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked if possible.\n * @param {...Array} args - Arguments to pass to the method.\n * @returns {*} - Returns the method invoked or undefined.\n *\n * @example\n * import { ifInvoke, assert } from '@universalweb/acid';\n * assert(ifInvoke((...args) => { return args;}, 1, 2), [1, 2]);\n */\nexport function ifInvoke(callable, ...args) {\n\tif (isFunction(callable)) {\n\t\treturn callable(...args);\n\t}\n}\n\n","import { hasValue } from '../types/hasValue.js';\n/**\n * Checks if a property on an object has a value. If not, it will assign a value.\n *\n * @function ifNotAssign\n * @category utility\n * @type {Function}\n * @param {Object} rootObject - The object to check.\n * @param {String} property - The property name which is to be checked.\n * @param {*} equalThis - The reassignment value for the property being checked.\n * @returns {Object} - Returns the provided rootObject.\n *\n * @example\n * import { ifNotAssign, assert } from '@universalweb/acid';\n * assert(ifNotAssign({}, 'a', 1), {a:1});\n */\nexport const ifNotAssign = (rootObject, property, equalThis) => {\n\tif (property && !hasValue(rootObject[property])) {\n\t\trootObject[property] = equalThis;\n\t}\n\treturn rootObject;\n};\n\n","import { apply } from '../internal/apply.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\n/**\n * If source has a value then assign it to an object or call a function.\n *\n * @function ifValue\n * @category utility\n * @param {*} source - The source object to be hasValue checked.\n * @param {Function|Object} target - The target which is either a function or object.\n * @param {*|String} optional - If target is a plain object then it must be a string and is used to assign the property name. Else it's used as the this for the provided function (target).\n * @param {Array} args - The args that would be used if the target is a function and is the params that is applied to the function.\n * @returns {source|undefined} The source object if it passes the hasValue check.\n *\n * @example\n * import { ifValue, assert } from '@universalweb/acid';\n * assert(ifValue(1, {}, 'a'), {a:1});\n */\nexport function ifValue(source, target, optional, args) {\n\tif (hasValue(source)) {\n\t\tif (isFunction(target)) {\n\t\t\tif (optional) {\n\t\t\t\treturn apply(target, optional, args);\n\t\t\t}\n\t\t\treturn target(...args);\n\t\t} else if (isPlainObject(target)) {\n\t\t\ttarget[optional] = source;\n\t\t\treturn target;\n\t\t}\n\t}\n}\n","/**\n * Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.\n *\n * @function inAsync\n * @type {Function}\n * @category Array\n * @async\n * @param {Array} source - Array of async functions that will be looped through.\n * Functions are given the supplied object, index, the calling array, and the array length.\n * @param {*} firstArgument - The first argument given to each function.\n * @returns {Object} - The originally given array.\n *\n * @example\n * import { inAsync, assert } from '@universalweb/acid';\n * const list = [];\n * await inAsync([async (firstArgument, item, index) => {\n *   list.push(index + firstArgument.a);\n * }, async (firstArgument, item, index) => {\n *   list.push(index);\n * }], {a:1});\n * assert(list, [1, 1]);\n */\nexport async function inAsync(source, firstArgument) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst method = source[index];\n\t\tawait method(firstArgument, index, source, arrayLength);\n\t}\n\treturn source;\n}\n\n","import { each } from '../utilities/each.js';\n/**\n * Invoke an array of functions.\n *\n * @function inSync\n * @category function\n * @type {Function}\n * @param {Array|Object|Function} collection - The functions to be invoked.\n * @param {*} value - The object passed as an argument to each method.\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * inSync([() => {console.log(1);}, () => {console.log(2);}]);\n * // 1\n * // 2\n * // => undefined\n */\nexport const inSync = (collection, value) => {\n\treturn each(collection, (item) => {\n\t\titem(value);\n\t});\n};\n\n","/**\n * Increments a number.\n *\n * @function increment\n * @category math\n * @type {Function}\n * @param {Number} source - First number.\n * @returns {Number} - Returns an incremented version of the number.\n *\n * @example\n * import { multiply, assert } from '@universalweb/acid';\n * assert(multiply(10, 5), 50);\n * increment(10);\n * // => 11\n */\nexport function increment(source) {\n\treturn source + 1;\n}\n","import { eachArray } from '../arrays/each.js';\n/**\n * Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know the keys are unique.\n *\n * @function indexBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {String} propertyName - The property name to index by.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * import { indexBy, assert } from '@universalweb/acid';\n * const result = { \"0\": {name: 'test', id: 0}, \"1\": {name: 'test2', id: 1}};\n * const indexed = indexBy([{name: 'test', id: 0}, {name: 'test2', id: 1}], 'id');\n * assert(indexed, result);\n */\nexport function indexBy(collection, propertyName = 'id') {\n\tconst sortedObject = {};\n\teachArray(collection, (item) => {\n\t\tsortedObject[item[propertyName]] = item;\n\t});\n\treturn sortedObject;\n}\n\n","/**\n * Takes all but the last item in the array.\n *\n * @function initial\n * @category array\n * @type {Function}\n * @param {Array} array - Array to have items extracted from.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * import { initial, assert } from '@universalweb/acid';\n * assert(initial([1, 2, 3, 4, 5]), [1, 2, 3, 4]);\n */\nexport function initial(array) {\n\treturn array.slice(0, array.length - 1);\n}\n\n","import { compactMapArray } from './compactMap.js';\nimport { everyArray } from './every.js';\n// Add intersectionBy & intersectionWith\n/**\n * Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory))\n * of the array and the input array(s).\n *\n * @function intersection\n * @param {Array} array - Array to compare other arrays to.\n * @param {...Array} arrays - A variable number of arrays.\n * @category array\n * @returns {Array} - The new array of unique values shared by all of the arrays.\n *\n * @example\n * import { intersection, assert } from '@universalweb/acid';\n * assert(intersection([1, 2, 3], [2, 3, 4]), [2, 3]);\n */\nexport function intersection(array, ...arrays) {\n\treturn compactMapArray(array, (item) => {\n\t\tconst shouldReturn = everyArray(arrays, (otherItem) => {\n\t\t\treturn otherItem.includes(item);\n\t\t});\n\t\tif (shouldReturn) {\n\t\t\treturn item;\n\t\t}\n\t});\n}\n\n","import { eachObject } from './each.js';\nimport { hasAnyKeys } from './hasKeys.js';\n/**\n * Creates an inverted version of a given object by switching it's keys and values.\n *\n * @function invert\n * @type {Function}\n * @category object\n * @param {Object} source - Object to be inverted.\n * @param {Array} [target = {}] - Empty object to be populated with inverted values from source.\n * @returns {Object|undefined} - Returns object with keys and values switched.\n *\n * @example\n * import { invert, assert } from '@universalweb/acid';\n * assert(invert({a:1}), {1:'a'});\n */\nexport function invert(source, target = {}) {\n\tif (!source) {\n\t\treturn;\n\t}\n\teachObject(source, (item, key) => {\n\t\ttarget[item] = key;\n\t});\n\treturn target;\n}\n\n","import { hasValue } from '../types/hasValue.js';\n/**\n * Invoke each function in the given array.\n *\n * @function invokeArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} additionalArg - An object to be given each time to the iteratee.\n * @param {*} thisCall - Iteratee called with thisCall as this.\n * @returns {Array|undefined} - The originally given array.\n *\n * @example\n * import { invokeArray, assert } from '@universalweb/acid';\n * function test(arg){\n * \treturn [this, arg];\n * }\n * const results = invokeArray([test], 1, test);\n * assert(results, [test, 1]);\n */\nexport function invokeArray(source, additionalArg, thisCall) {\n\tif (!source) {\n\t\treturn;\n\t}\n\tconst arrayLength = source.length;\n\tif (hasValue(thisCall)) {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\tsource[index].call(thisCall, additionalArg);\n\t\t}\n\t} else {\n\t\tfor (let index = 0; index < arrayLength; index++) {\n\t\t\tsource[index](additionalArg);\n\t\t}\n\t}\n\treturn source;\n}\n\n","import { mapArray } from '../arrays/map.js';\n/**\n * Invokes a function on the provided property name in each object in the collection.\n *\n * @function invokeCollection\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection from which method will be taken.\n * @param {String} property - Value used to pluck method from object.\n * @param {*} value - Value to be passed to callable property.\n * @returns {Array} - Returns the results of the invoked method.\n *\n * @example\n * import { invokeCollection, assert } from '@universalweb/acid';\n * const results = invokeCollection([{\n *\ttest(item, index) { return [item, index];}\n * }], 'test', ['EXAMPLE']);\n * assert(results, [['EXAMPLE', 0]]);\n */\nexport function invokeCollection(collection, property, value, thisBind) {\n\tif (thisBind) {\n\t\treturn mapArray(collection, (item, index) => {\n\t\t\treturn item[property].call(thisBind, value);\n\t\t});\n\t}\n\treturn mapArray(collection, (item, index) => {\n\t\treturn item[property](value);\n\t});\n}\n\n","import { mapAsyncArray } from '../arrays/mapAsync.js';\n/**\n * Asynchronously awaits & invokes a function on the provided property name in each object in the collection.\n *\n * @function invokeCollectionAsync\n * @category collection\n * @type {Function}\n * @async\n * @param {Array} collection - Collection from which method will be taken.\n * @param {String} property - Value used to pluck method from object.\n * @param {*} value - Value to be passed to callable property.\n * @returns {Array} - Returns the results of the invoked method.\n *\n * @example\n * import { invokeCollectionAsync, assert } from '@universalweb/acid';\n * const results = await invokeCollectionAsync([{\n *\tasync test(item, index) { return [item, index];}\n * }], 'test', ['EXAMPLE']);\n * assert(results, [['EXAMPLE', 0]]);\n */\nexport function invokeCollectionAsync(collection, property, value, thisBind) {\n\tif (thisBind) {\n\t\treturn mapAsyncArray(collection, (item) => {\n\t\t\treturn item[property].call(thisBind, value);\n\t\t});\n\t}\n\treturn mapAsyncArray(collection, async (item) => {\n\t\treturn item[property](value);\n\t});\n}\n\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the value is an Arguments object.\n *\n * @function isArguments\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isArguments, assert } from '@universalweb/acid';\n * assert(isArguments((function() { return arguments;})()), true);\n * assert(isArguments([]), false);\n */\nconst objectArguments = '[object Arguments]';\nexport function isArguments(source) {\n\treturn (hasValue(source)) ? source.toString() === objectArguments : false;\n}\n","import { every } from '../utilities/every.js';\nimport { hasProp } from '../internal/object.js';\nimport { isArray } from './isArray.js';\nimport { isFunction } from './isFunction.js';\nimport { isMap } from './isMap.js';\nimport { isNumber } from './isNumber.js';\nimport { isTypedArray } from './isTypedArray.js';\nimport { keys } from '../objects/keys.js';\nimport { noValue } from './noValue.js';\n/**\n * Checks if an object has a .length property that's greater than or equal to 0 & is not a function. If strict is enabled it will check to see if there is an item returned in range of the number returned bu the length property.\n *\n * @function isArrayLike\n * @category type\n * @param {*} source - Object to be checked.\n * @param {*} strictFlag - Strict flag to also check to see if keys are whole intigers greater than or equal to 0.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isArrayLike, assert } from '@universalweb/acid';\n * assert(isArrayLike([]), true);\n * assert(isArrayLike(2), false);\n */\nexport function isArrayLike(source, strictFlag) {\n\tif (noValue(source) || isFunction(source)) {\n\t\treturn false;\n\t}\n\tif (isArray(source) || isTypedArray(source)) {\n\t\treturn true;\n\t}\n\tconst sourceLength = source.length;\n\tif (!noValue(sourceLength) || !isNumber(sourceLength) || sourceLength < 0) {\n\t\treturn false;\n\t}\n\tif (strictFlag) {\n\t\tconst indexes = keys(source);\n\t\tif (indexes) {\n\t\t\treturn every(indexes, (value, index) => {\n\t\t\t\treturn index >= 0 && isNumber(index);\n\t\t\t});\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n","/**\n * Checks if an object is the child of another. Typically used for classes.\n *\n * @function isChild\n * @category type\n * @param {*} sourceChild - Object to be checked as the child.\n * @param {*} targetParent - Object to be checked as the parent.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isChild, construct, assert } from '@universalweb/acid';\n * class Grandparent{}\n * class Parent extends Grandparent{}\n * class Child extends Parent{}\n * const child = construct(Child);\n * assert(isChild(Child, Grandparent), true);\n * assert(isChild(Child, Parent), false);\n * assert(isChild(Parent, Grandparent), false);\n * assert(isChild(child1, child3), false);\n */\nexport function isChild(sourceChild, targetParent) {\n\tif (!sourceChild || !targetParent) {\n\t\treturn false;\n\t}\n\treturn sourceChild instanceof targetParent;\n}\n","import { difference } from '../arrays/difference.js';\nimport { hasValue } from '../types/hasValue.js';\n/**\n * Checks if value is a plain DOM Node.\n *\n * @function isDom\n * @category browser\n * @ignoreTest\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isDom, assert } from '@universalweb/acid';\n * assert(isDom(document.querySelectorAll('head')), true);\n */\nexport function isDom(source) {\n\treturn source && source.nodeType !== 9;\n}\n/**\n * Checks if the value is a HTMLCollection.\n *\n * @function isHTMLCollection\n * @category browser\n * @ignoreTest\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isHTMLCollection, assert } from '@universalweb/acid';\n * document.body.innerHTML = '<div class=\"test\"></div>';\n * assert(isHTMLCollection(document.getElementsByClassName('test')), true);\n */\nconst objectHTMLCollection = '[object HTMLCollection]';\nexport function isHTMLCollection(source) {\n\treturn (hasValue(source)) ? source.toString() === objectHTMLCollection : false;\n}\n/**\n * Checks if the value is a NodeList.\n *\n * @function isNodeList\n * @category browser\n * @ignoreTest\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNodeList, assert } from '@universalweb/acid';\n * document.body.innerHTML = '<div class=\"test\"></div>';\n * assert(isNodeList(document.querySelectorAll('.test')), true);\n */\nconst objectNodeList = '[object NodeList]';\nexport function isNodeList(source) {\n\treturn (hasValue(source)) ? source.toString() === objectNodeList : false;\n}\n","import { hasLength } from '../utilities/hasLength.js';\nimport { hasValue } from './hasValue.js';\nimport { isArray } from './isArray.js';\nimport { isPlainObject } from './isPlainObject.js';\nimport { isString } from './isString.js';\nimport { objectSize } from '../objects/size.js';\n/**\n * Checks if the value is empty.\n *\n * @function isEmpty\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isEmpty, assert } from '@universalweb/acid';\n * assert(isEmpty([]), true);\n */\nexport function isEmpty(source) {\n\tif (isString(source) || isArray(source)) {\n\t\treturn !hasLength(source);\n\t} else if (isPlainObject(source)) {\n\t\treturn !objectSize(source);\n\t}\n\treturn !hasValue(source);\n}\n","/**\n * Checks if the keycode of the event is strictly equal to 13.\n *\n * @function isEnter\n * @category browser\n * @type {Function}\n * @param {Object} eventObject - Object to be checked.\n * @returns {Boolean} - Returns true if the keycode property of the object equals 13.\n *\n * @example\n * isEnter('click');\n * // => false\n */\nexport function isEnter(eventObject) {\n\treturn eventObject.keyCode === 13;\n}\n\n","/**\n * Check if a value is isFalsy which are false, null, 0, \"\", undefined, and NaN.\n *\n * @function isFalsy\n * @category type\n * @type {Function}\n * @param {*} source - Item to be isFalsy checked.\n * @param {*} [returnIfTrue = true] - Item to be returned if item is isFalsy.\n * @returns {Boolean|*} - Returns true if the item is isFalsy or returnIfTrue if provided otherwise returns false.\n *\n * @example\n * import { isFalsy, assert } from '@universalweb/acid';\n * assert(isFalsy(0), true);\n * assert(isFalsy(1), false);\n */\nexport function isFalsy(source, returnIfTrue = true) {\n\treturn Boolean(source) === false && returnIfTrue;\n}\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the object has inherited properties from the built-in Iterator class and which implements the Symbol.iterator interface. Built-in Iterators: String, Array, TypedArray, Map, Set, and Segments.\n *\n * @function isIterable\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isIterable, assert } from '@universalweb/acid';\n * assert(isIterable([]), true);\n * assert(isIterable(new Int8Array()), true);\n * assert(isIterable('test'), false);\n */\nexport function isIterable(source) {\n\treturn hasValue(source) && typeof source[Symbol.iterator] === 'function';\n}\n","import { everyArray } from './every.js';\nimport { isEqual } from '../utilities/isEqual.js';\n/**\n * Performs a shallow strict comparison between two objects.\n *\n * @function isMatchArray\n * @type {Function}\n * @category array\n * @param {Array} source - Source object.\n * @param {Array} compareArray - Object to compare to source.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isMatchArray, assert } from '@universalweb/acid';\n * assert(isMatchArray([1, 2, 3], [1, 2, 3]), true);\n */\nexport function isMatchArray(source, compareArray) {\n\tif (source.length === compareArray.length) {\n\t\treturn everyArray(source, (item, index) => {\n\t\t\treturn isEqual(compareArray[index], item);\n\t\t});\n\t}\n\treturn false;\n}\n\n","/**\n * Checks if two numbers are the same.\n *\n * @function isNumberEqual\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @param {Number} target - Number to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNumberEqual, assert } from '@universalweb/acid';\n * assert(isNumberEqual(0, 0), true);\n */\nexport function isNumberEqual(source, target) {\n\treturn source === target;\n}\n","/**\n * Checks if a number is within a range.\n *\n * @function isNumberInRange\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @param {Number} start - Beginning of range.\n * @param {Number} end - End of range.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNumberInRange, assert } from '@universalweb/acid';\n * assert(isNumberInRange(1, 0, 2), true);\n * assert(isNumberInRange(1, 2, 5), false);\n */\nexport function isNumberInRange(source, start, end) {\n\treturn source > start && source < end;\n}\n","/**\n * Checks if a number is within a range.\n *\n * @function isNumberNotInRange\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @param {Number} start - Beginning of range.\n * @param {Number} end - End of range.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isNumberNotInRange, assert } from '@universalweb/acid';\n * assert(isNumberNotInRange(1, 0, 2), false);\n * assert(isNumberNotInRange(1, 2, 5), true);\n */\nexport function isNumberNotInRange(source, start, end) {\n\treturn source < start || source > end;\n}\n","/**\n * Checks if an object is the child of another. Typically used for classes.\n *\n * @function isParent\n * @category type\n * @param {*} sourceParent - Object to be checked as the child.\n * @param {*} targetChild - Object to be checked as the parent.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isParent, construct, assert } from '@universalweb/acid';\n * class parentClass{}\n * class otherClass{}\n * const child1 = construct(parentClass);\n * const child2 = construct(otherClass);\n * assert(isParent(child1, parentClass), true);\n * assert(isParent(child3, parentClass), false);\n * assert(isParent(parentClass, child1), false);\n * assert(isParent(child1, child3), false);\n */\nexport function isParent(sourceParent, targetChild) {\n\tif (!sourceParent || !targetChild || !targetChild.call) {\n\t\treturn false;\n\t}\n\treturn sourceParent instanceof targetChild;\n}\n","/**\n * Checks if an object is a primitive.\n *\n * @function isPrimitive\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {Boolean} - True or false.\n *\n * @example\n * import { isPrimitive, assert } from '@universalweb/acid';\n * assert(isPrimitive(1), true);\n * assert(isPrimitive(() => {}), false);\n */\nexport function isPrimitive(source) {\n\tconst type = typeof value;\n\treturn source === null || source === undefined || (type !== 'object' && type !== 'function');\n}\n","import { noValue } from './noValue.js';\n/**\n * Checks if objects are related to each other using instanceof. There is no required order for arguments given it will check all available ways.\n *\n * @function isRelated\n * @category type\n * @param {*} targetOne - Object to be checked.\n * @param {*} targetTwo - Object to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isRelated, construct, assert } from '@universalweb/acid';\n * class parentClass{}\n * class otherClass{}\n * const child1 = construct(parentClass);\n * const child2 = construct(parentClass);\n * const child3 = construct(otherClass);\n * assert(isRelated(child1, child2), true);\n * assert(isRelated(child1, parentClass), true);\n * assert(isRelated(parentClass, child2), true);\n * assert(isRelated(child1, child3), false);\n */\nexport function isRelated(targetOne, targetTwo) {\n\tif (noValue(targetOne) || noValue(targetTwo)) {\n\t\treturn false;\n\t}\n\tif (targetOne.call) {\n\t\treturn targetTwo instanceof targetOne;\n\t}\n\tif (targetTwo.call) {\n\t\treturn targetOne instanceof targetTwo;\n\t}\n\treturn targetTwo.constructor === targetOne.constructor;\n}\n","import { getType } from './getType.js';\nexport function isSameType(source, other) {\n\tconst sourceType = getType(source);\n\tconst otherType = getType(other);\n\tif (sourceType === otherType) {\n\t\tif (sourceType.name === otherType.name) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n","/**\n * Check if a value equals true using strict comparison.\n *\n * @function isTrue\n * @category Utility\n * @type {Function}\n * @param {Boolean} source - Item to check.\n * @returns {Boolean} - Returns true if the item is true.\n *\n * @example\n * import { isTrue, assert } from '@universalweb/acid';\n * assert(isTrue(1), false);\n * assert(isTrue(true), true);\n * assert(isTrue(false), false);\n */\nexport function isTrue(source) {\n\treturn source === true;\n}\n","/**\n * Strictly checks if a number is zero.\n *\n * @function isZero\n * @category number\n * @type {Function}\n * @param {Number} source - Number to be checked.\n * @returns {Boolean} - Returns true or false.\n *\n * @example\n * import { isZero, assert } from '@universalweb/acid';\n * assert(isZero(0), true);\n */\nexport function isZero(source) {\n\treturn source === 0;\n}\n","/**\n * Extracts item(s) from an array starting from the last item in the array.\n *\n * @function last\n * @type {Function}\n * @category array\n * @param {Array} array - Array to have items extracted from.\n * @param {Number} [indexFrom = 0] - Value which determines how many items are extracted from the array.\n * @returns {Array} - Items from the array.\n *\n * @example\n * import { last, assert } from '@universalweb/acid';\n * assert(last([1, 2, 3, 4, 5] , 2), [4, 5]);\n */\nexport function last(array, indexFrom) {\n\tconst arrayLength = array.length;\n\treturn (indexFrom) ? array.slice(arrayLength - indexFrom, arrayLength) : array[arrayLength - 1];\n}\n\n","import { eachArray } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.\n *\n * @function mapRightArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapRightArray, assert } from '@universalweb/acid';\n * assert(mapRightArray([1, 2, 3], (item) => {\n *   return item * 2;\n * }), [6, 4, 2]);\n */\nexport function mapRightArray(source, iteratee, results = [], additionalArgument) {\n\tlet trueIndex = 0;\n\tconst arrayLength = source.length;\n\tfor (let index = arrayLength - 1;index >= 0;index--) {\n\t\tresults[trueIndex] = iteratee(source[index], index, source, arrayLength, additionalArgument);\n\t\ttrueIndex++;\n\t}\n\treturn results;\n}\n\n","import { eachArray } from './each.js';\nimport { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.\n *\n * @function mapWhile\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - An array with properties that passed the test.\n *\n * @example\n * import { mapWhile, assert } from '@universalweb/acid';\n * assert(mapWhile([1, 2, 0], (item) => {\n *   return Boolean(item);\n * }), [1, 2]);\n */\nexport function mapWhile(source, iteratee, results = [], additionalArgument) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0;index < arrayLength;index++) {\n\t\tconst item = source[index];\n\t\tconst returned = iteratee(item, index, results, source, arrayLength, additionalArgument);\n\t\tif (returned === false) {\n\t\t\tbreak;\n\t\t}\n\t\tresults[index] = item;\n\t}\n\treturn results;\n}\n\n","import { each } from './each.js';\nimport { isArray } from '../types/isArray.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\n/**\n * Recursively deep assign a target object with a source object. The source objects values are assigned onto the target object's matching properties.\n *\n * @function merge\n * @category utility\n * @type {Function}\n * @param {Object} target - The object which will be modified.\n * @param {Object} source - Source object to merge into the target object.\n * @returns {Object} - Returns target.\n *\n * @example\n * import { merge, assert } from '@universalweb/acid';\n * assert(merge([1,2,4],[3]), [3, 2, 4]);\n */\nconst structuredCloneSafe = globalThis.structuredClone;\nexport function merge(target, ...sources) {\n\teach(sources, (currentSource) => {\n\t\teach(currentSource, (sourceItem, sourceKey) => {\n\t\t\tif (target[sourceKey]) {\n\t\t\t\tif (isPlainObject(sourceItem) || isArray(sourceItem) || sourceItem.forEach) {\n\t\t\t\t\treturn merge(target[sourceKey], sourceItem);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[sourceKey] = sourceItem;\n\t\t});\n\t});\n\treturn target;\n}\n\n","/**\n * Multiplies two numbers.\n *\n * @function multiply\n * @category math\n * @type {Function}\n * @param {Number} source - First number.\n * @param {Number} value - Second number.\n * @returns {Number} - Returns the product of the arguments.\n *\n * @example\n * import { multiply, assert } from '@universalweb/acid';\n * assert(multiply(10, 5), 50);\n */\nexport function multiply(source, value) {\n\treturn source * value;\n}\n","/**\n * Creates a function that negates the result of the predicate callable.\n *\n * @function negate\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @returns {*} - Returns the given methods result.\n *\n * @example\n * negate(() => { return false;})();\n * // => true\n */\nexport function negate(callable) {\n\treturn (...args) => {\n\t\treturn !callable(...args);\n\t};\n}\n\n","/**\n * Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.\n *\n * @function nthArg\n * @category function\n * @type {Function}\n * @param {Number} [index = 0] - The index of the argument to return.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @example\n * nthArg(1)('a', 'b');\n * // => 'b'\n */\nexport function nthArg(index = 0) {\n\treturn (...args) => {\n\t\treturn args[index];\n\t};\n}\n\n","import { arrayToRegex } from '../regexps/arrayToRegex.js';\nimport { filterObject } from './filter.js';\nimport { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isNumber } from '../types/isNumber.js';\nimport { isRegex } from '../types/isRegex.js';\nimport { isString } from '../types/isString.js';\nimport { objectAssign } from './assign.js';\n/**\n * Returns a clone of the given object without the given properties.\n *\n * @function omit\n * @category object\n * @type {Function}\n * @param {Object} source - Object from which keys are extracted.\n * @param {Array|RegExp|String} blacklist - List of property keys to omit from the returned object.\n * @returns {Object|undefined} - A new object with the removed.\n *\n * @example\n * import { omit, assert } from '@universalweb/acid';\n * assert(omit({a:1, b:2}, ['a']), {b:2});\n * assert(omit({a:1, b:2}, 'a'), {b:2});\n * assert(omit({1:'test', b:2}, 1), {b:2});\n */\nexport function omit(source, blacklist) {\n\tif (!source) {\n\t\treturn {};\n\t}\n\tif (isArray(blacklist)) {\n\t\tconst blacklistRegex = arrayToRegex(blacklist);\n\t\treturn filterObject(source, (item, key) => {\n\t\t\treturn !blacklistRegex.test(key);\n\t\t});\n\t}\n\tif (isRegex(blacklist)) {\n\t\treturn filterObject(source, (item, key) => {\n\t\t\treturn !blacklist.test(key);\n\t\t});\n\t}\n\tif (isString(blacklist)) {\n\t\treturn filterObject(source, (item, key) => {\n\t\t\treturn key !== blacklist;\n\t\t});\n\t}\n\tif (isNumber(blacklist)) {\n\t\tconst numberToString = blacklist.toString();\n\t\treturn filterObject(source, (item, key) => {\n\t\t\treturn key !== numberToString;\n\t\t});\n\t}\n\tif (isFunction(blacklist)) {\n\t\treturn filterObject(source, (item, key) => {\n\t\t\treturn !blacklist(item, key);\n\t\t});\n\t}\n\treturn objectAssign({}, source);\n}\n\n","import { hasValue } from '../types/hasValue.js';\n/**\n * Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.\n *\n * @function once\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be called.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @example\n * const onceOnly = once((item) => { return item;});\n * onceOnly(5);\n * onceOnly(3);\n * // => 5\n */\nexport const once = (callable) => {\n\tlet value;\n\tconst onlyOnce = (...args) => {\n\t\tif (!hasValue(value)) {\n\t\t\tvalue = callable(...args);\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyOnce;\n};\n","import { map } from '../utilities/map.js';\n/**\n * Creates a function that invokes iteratee with the arguments it receives and returns their results.\n *\n * @function over\n * @category function\n * @type {Function}\n * @param {(Array.<function>|Object.<function>)} iteratees - The list of functions to loop through.\n * @returns {Function} - Returns the new over wrapped function.\n *\n * @example\n * import { overEvery, assert } from '@universalweb/acid';\n * assert(over([Math.max, Math.min])(1, 2, 3, 4), [4, 1]);\n */\nexport function over(iteratees) {\n\treturn (...args) => {\n\t\treturn map(iteratees, (item) => {\n\t\t\treturn item(...args);\n\t\t});\n\t};\n}\n","import { every } from '../utilities/every.js';\n/**\n * Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.\n *\n * @function overEvery\n * @category function\n * @type {Function}\n * @param {(Array.<function>|Object.<function>)} predicates - The list of functions to loop through.\n * @returns {Function} - Returns the new overEvery wrapped function.\n *\n * @example\n * import { overEvery, assert } from '@universalweb/acid';\n * assert(overEvery([Boolean, isFinite])('1'), true);\n */\nexport function overEvery(predicates) {\n\treturn (arg) => {\n\t\treturn every(predicates, (predicate) => {\n\t\t\treturn predicate(arg);\n\t\t});\n\t};\n}\n\n","import { eachRight } from '../arrays/eachRight.js';\n/**\n * Takes the first two arguments given and returns them inside a new array.\n *\n * @function pair\n * @category utility\n * @param {*} argument1 - The source object.\n * @param {*} argument2 - The source object.\n * @returns {Array} The array which holds the pair.\n *\n * @example\n * import { pair, assert } from '@universalweb/acid';\n * assert(air(1, 2), [1, 2]);\n */\nexport function pair(argument1, argument2) {\n\treturn [argument1, argument2];\n}\n","import { compactMapArray } from './compactMap.js';\n/**\n * Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.\n *\n * @function partition\n * @type {Function}\n * @category array\n * @param {Array} array - Takes an array to split.\n * @param {Function} predicate - Function run on each item in the array.\n * @returns {Array} - One array split into two arrays.\n *\n * @example\n * import { partition, assert } from '@universalweb/acid';\n * const result = partition([\n *  {user: 'barney', age: 36, active: false},\n *  {user: 'fred', age: 40, active: true},\n *  {user: 'pebbles', age: 1,  active: false}\n * ], (item) => { return item.active; });\n * assert(result, [{\"user\":\"fred\",\"age\":40,\"active\":true}],\n *   [{\"user\":\"barney\",\"age\":36,\"active\":false},\n *   {\"user\":\"pebbles\",\"age\":1,\"active\":false}]);\n */\nexport function partition(array, predicate) {\n\tconst rejected = [];\n\treturn [\n\t\tcompactMapArray(array, (item, index) => {\n\t\t\tif (predicate(item, index)) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\trejected.push(item);\n\t\t}),\n\t\trejected\n\t];\n}\n\n","import { eachArray } from '../arrays/each.js';\nimport { mapAsyncObject } from './mapAsync';\n/**\n * Returns a clone of the source object with the plucked properties.\n *\n * @function pick\n * @type {Function}\n * @category object\n * @param {Object} source - Object to be cloned.\n * @param {Array} whitelist - Array of property names used to determine what values to pluck.\n * @param {Object} [target = {}] - Object to be populated with plucked values.\n * @returns {Object|undefined} - A new object with plucked properties.\n *\n * @example\n * import { pick, assert } from '@universalweb/acid';\n * assert(pick({a:1, b:2, c:3}, ['a','b']), {a:1, b:2});\n */\nexport const pick = (source, whitelist, target = {}) => {\n\tif (!source) {\n\t\treturn;\n\t}\n\teachArray(whitelist, (item) => {\n\t\ttarget[item] = source[item];\n\t});\n\treturn target;\n};\n\n","import { mapArray } from '../arrays/map.js';\nimport { pluckObject } from '../objects/pluckObject.js';\n/**\n * Returns an array of the plucked values from the collection.\n *\n * @function pluck\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array used to determine what value to be plucked.\n * @param {(String|Number|Array.<string, number>)} targets - Property name.\n * @returns {Array} - An array of plucked values.\n *\n * @example\n * import { pluck, assert } from '@universalweb/acid';\n * assert(pluck([{a: 1}, {a: 2}], 'a'), [1, 2]);\n * assert(pluck([{a: 1, b:3}, {a: 1, b:3}], ['a','b']), [[1, 3], [1, 3]]);\n */\nexport function pluck(collection, targets) {\n\treturn mapArray(collection, (item) => {\n\t\treturn pluckObject(item, targets);\n\t});\n}\n","import { everyArray } from '../arrays/every.js';\nimport { isEqual } from './isEqual.js';\nimport { keys } from '../objects/keys.js';\n/**\n * Using a deep comparison it checks if properties of two objects using an array are equal.\n *\n * @function propertyMatch\n * @type {Function}\n * @category utility\n * @param {Object} source - The source object to compare.\n * @param {Object} compared - Object to be compared to source.\n * @param {Array} properties - List of properties to compare defaults to keys(source).\n * @returns {Array} - Returns an array of properties.\n *\n * @example\n * import { propertyMatch, assert } from '@universalweb/acid';\n * assert(propertyMatch({\n *   a: 1,\n *   b: 2\n * }, {\n *   a: 1,\n *   b: 2\n * }, ['a', 'b']), true);\n */\nexport const propertyMatch = (source, compared, properties = keys(source)) => {\n\treturn everyArray(properties, (property) => {\n\t\treturn isEqual(source[property], compared[property]);\n\t});\n};\n\n","/**\n * Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.\n *\n * @function reArg\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Array} indexes - The arranged argument indexes.\n * @returns {Function} - Returns the new function.\n *\n * @example\n * reArg((a, b, c) => {\n *   return [a, b, c];\n * }, [1,2,0])(1,2,3);\n * // => [2, 3, 1]\n */\nexport function reArg(callable, indexes) {\n\treturn (...args) => {\n\t\treturn callable(...indexes.map((item) => {\n\t\t\treturn args[item];\n\t\t}));\n\t};\n}\n\n","/**\n * Extracts the remainder between two numbers.\n *\n * @function remainder\n * @category math\n * @type {Function}\n * @param {Number} source - First number.\n * @param {Number} value - Second number.\n * @returns {Number} - Returns the remainder of the arguments.\n *\n * @example\n * import { multiply, assert } from '@universalweb/acid';\n * assert(multiply(10, 5), 50);\n * remainder(10, 6);\n * // => 4\n */\nexport function remainder(source, value) {\n\treturn source % value;\n}\n","/**\n * Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.\n *\n * @function remove\n * @category array\n * @param {Array} array - Array to be mutated.\n * @param {String|Array} removeThese - Items to remove from the array.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * remove([1, 2, 3, 3, 4, 3, 5], 1);\n * // => [2, 3, 3, 4, 3, 5]\n * @example\n * remove([3, 3, 4, 5], 3, 4);\n * // => [5]\n */\nexport function remove(array, removeThese) {\n\tlet arrayLength = array.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst item = array[index];\n\t\tif (removeThese.includes(item)) {\n\t\t\tarray.splice(index, 1);\n\t\t\tindex--;\n\t\t\tarrayLength--;\n\t\t}\n\t}\n\treturn array;\n}\n/**\n * Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.\n *\n * @function removeBy\n * @category array\n * @param {Array} source - Array to be mutated.\n * @param {Function} iteratee - Function used to check object. Return true to remove the value.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * removeBy([1, 2, 3, 3, 4, 3, 5], (item) => { return Boolean(item % 2);});\n * // => [2, 4]\n */\nexport function removeBy(source, iteratee) {\n\tlet arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst item = source[index];\n\t\tif (iteratee(item, index)) {\n\t\t\tsource.splice(index, 1);\n\t\t\tindex--;\n\t\t\tarrayLength--;\n\t\t}\n\t}\n\treturn source;\n}\n\n","/**\n * Replaces all occurrences of strings in an array with a value.\n *\n * @function replaceList\n * @category string\n * @type {Function}\n * @param {String} string - String to be replaced.\n * @param {Array} words - Strings to replace.\n * @param {String} value - The match replacement.\n * @returns {String} - The string with the replacement.\n *\n * @example\n * import { replaceList, assert } from '@universalweb/acid';\n * assert(replaceList('user name was user.', ['user'], 'this'), 'this name was this.');\n */\nexport function replaceList(string, words, value) {\n\treturn string.replace(new RegExp(`\\\\b${words.join('|')}\\\\b`, 'gi'), value);\n}\n","/**\n * Extracts all items in array except the first and last item.\n *\n * @function rest\n * @type {Function}\n * @category array\n * @param {Array} array - Array to be sliced.\n * @returns {Array} - Returns the aggregated array.\n *\n * @example\n * rest([1, 2, 3, 4, 5]);\n * // => [2, 3, 4, 5]\n */\nexport function rest(array) {\n\treturn array.slice(1, array.length);\n}\n\n","/**\n * Get the item at the supplied index starting at the end of the array.\n *\n * @function right\n * @type {Function}\n * @category array\n * @param {Array} source - Array to be sliced.\n * @param {Number} amount - Amount from the right.\n * @returns {*} - Returns the object at the evaluated position.\n *\n * @example\n * right([1, 2, 3, 4, 5] , 1);\n * // => 4\n */\nexport function right(source, amount) {\n\treturn source[source.length - 1 - amount];\n}\n\n","import { randomInt } from '../math/randomInt.js';\nimport { shuffle } from './shuffle.js';\n/**\n * Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.\n *\n * @function sample\n * @category array\n * @param {Array} source - The array to pull sample(s) from.\n * @param {Number} amount - The amount of samples to take.\n * @returns {Array} - An array of randomly pulled samples.\n *\n * @example\n * sample([1, 2, 3, 4] , 2);\n * // => [1, 3]\n */\nexport function sample(source, amount) {\n\tif (!source) {\n\t\treturn false;\n\t}\n\tconst arrayLength = source.length;\n\tif (arrayLength === amount || amount > arrayLength) {\n\t\treturn shuffle(source);\n\t}\n\tif (amount === 1) {\n\t\treturn [source[randomInt(arrayLength - 1, 0)]];\n\t}\n\tconst sampleArray = [];\n\tconst used = {};\n\tlet count = 0;\n\tlet index;\n\twhile (count < amount) {\n\t\tindex = randomInt(source.length - 1, 0);\n\t\tif (!used[index]) {\n\t\t\tsampleArray.push(source[index]);\n\t\t\tused[index] = true;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn sampleArray;\n}\n\n","import { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isNumber } from '../types/isNumber.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nexport function setKey(source, key, value) {\n\tif (key && isPlainObject(source)) {\n\t\tsource[key] = value;\n\t} else if (isNumber(key) && isArray(source)) {\n\t\tsource[key] = value;\n\t} else if (source.set) {\n\t\tsource.set(key, value);\n\t} else if (source.push) {\n\t\tsource.push(value);\n\t} else if (source.add) {\n\t\tsource.add(value);\n\t} else {\n\t\tsource[key] = value;\n\t}\n\treturn source;\n}\n","import { isArray } from '../types/isArray.js';\nimport { isFunction } from '../types/isFunction.js';\nimport { isNumber } from '../types/isNumber.js';\nimport { isPlainObject } from '../types/isPlainObject.js';\nexport function setValue(source, value, key) {\n\tif (isNumber(key) && isArray(source)) {\n\t\tsource[key] = value;\n\t} else if (source.push) {\n\t\tsource.push(value);\n\t} else if (source.add) {\n\t\tsource.add(value);\n\t} else {\n\t\tsource[key] = value;\n\t}\n\treturn source;\n}\n","import { subtract } from '../math/subtract.js';\n/**\n * Sorts an array of numbers in ascending order. Smallest to largest.\n *\n * @function sortNumberAscending\n * @category array\n * @param {Array} numberList - Array of numbers.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * import { sortNumberAscending, assert } from '@universalweb/acid';\n * assert(sortNumberAscending([10, 0, 2, 1]),  [0, 1, 2, 10]);\n */\nexport function sortNumberAscending(numberList) {\n\treturn numberList.sort(subtract);\n}\n","import { subtractReverse } from '../math/subtractReverse.js';\n/**\n * Sorts an array of numbers in descending order. Largest to smallest.\n *\n * @function sortNumberDescening\n * @category array\n * @param {Array} numberList - Array of numbers.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * import { sortNumberDescening, assert } from '@universalweb/acid';\n * assert(sortNumberDescening([10, 0, 2, 1]), [10, 2, 1, 0]);\n */\nexport function sortNumberDescening(numberList) {\n\treturn numberList.sort(subtractReverse);\n}\n","import { stubObject } from './stubObject';\n/**\n * This method returns a new empty string.\n *\n * @function stubString\n * @category utility\n * @type {Function}\n * @returns {String} - Returns the new empty string.\n *\n * @example\n * import { stubString, assert } from '@universalweb/acid';\n * assert(stubString(), '');\n */\nexport const stubString = () => {\n\treturn '';\n};\n","/**\n * Subtract all numbers in the array starting from left to right & return the difference.\n *\n * @function subtractAll\n * @category math\n * @type {Function}\n * @param {Number[]} source - Array of numbers.\n * @returns {Number} - Returns the final difference.\n *\n * @example\n * import { subtractAll, assert } from '@universalweb/acid';\n * assert(subtractAll([10, 1, 2, 3]), 5);\n */\nexport function subtractAll(source) {\n\treturn source.reduce((a, b) => {\n\t\treturn a - b;\n\t}, 0);\n}\n\n","/**\n * Sum all numbers in a given array.\n *\n * @function sumAll\n * @category math\n * @type {Function}\n * @param {Number[]} source - Array of numbers.\n * @returns {Number} - Returns a single number.\n *\n * @example\n * import { sumAll, assert } from '@universalweb/acid';\n * assert(sumAll([10, 1, 2, 3]), 5);\n */\nexport function sumAll(source) {\n\treturn source.reduce((a, b) => {\n\t\treturn a + b;\n\t}, 0);\n}\n\n","/**\n * Returns a shallow copy of the array up to an amount.\n *\n * @function take\n * @category array\n * @type {Function}\n * @param {Array} source - The source array to take from.\n * @param {Array} [endIndex = 1] - Zero-based index before which to end extraction.\n * @returns {Array} - The aggregated array.\n *\n * @example\n * import { take, assert } from '@universalweb/acid';\n * assert(take([1,2,3], 2), [1, 2]);\n */\nexport function take(source, endIndex = 1) {\n\treturn source.slice(0, endIndex);\n}\n\n","/**\n * Returns a shallow copy of the array up to an amount starting from the right.\n *\n * @function takeRight\n * @category array\n * @type {Function}\n * @param {Array} source - The source array to take right from.\n * @param {Array} [indexRight = 1] - Zero-based index from the right to begin extraction.\n * @returns {Array} - The aggregated array.\n *\n * @example\n * import { takeRight, assert } from '@universalweb/acid';\n * assert(takeRight([1,2,3], 2), [2, 3]);\n */\nexport function takeRight(source, indexRight = 1) {\n\tconst arrayLength = source.length;\n\treturn source.slice(arrayLength - indexRight, arrayLength);\n}\n\n","import { timer, timers } from '../utilities/timer.js';\nimport { falsy } from '../utilities/stubFalse.js';\nimport { truth } from '../utilities/stubTrue.js';\n/**\n * Creates a throttled function that only invokes callable at most once per every milliseconds. The throttle function has a clear method to cancel the timer.\n *\n * @function throttle\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Number} time - The time in milliseconds.\n * @returns {Function|undefined} - The throttled function.\n *\n * @example\n * const throttled = throttle(() => { console.log('throttle'); }, 0)();\n * throttled();\n * // 'throttle'\n */\nexport function throttle(callable, time) {\n\tfunction throttled(...args) {\n\t\tif (throttled.id) {\n\t\t\tthrottled.shouldThrottle = truth;\n\t\t\treturn;\n\t\t}\n\t\tthrottled.callable(...args);\n\t\tthrottled.id = timer(() => {\n\t\t\tif (throttled.shouldThrottle) {\n\t\t\t\tthrottled.callable(...args);\n\t\t\t}\n\t\t\tthrottled.id = falsy;\n\t\t}, time);\n\t}\n\tthrottled.id = falsy;\n\tthrottled.callable = callable.bind(throttled);\n\tthrottled.clear = () => {\n\t\ttimers.remove(throttled.id);\n\t\tthrottled.id = falsy;\n\t};\n\treturn throttled;\n}\n\n","/**\n * Asynchronously iterates based on the amount given awaiting on the iteratee with the current index as an argument.\n *\n * @async\n * @function timesAsync\n * @category utility\n * @type {Function}\n * @param {Number} amount - The amount of times to loop invoking the iteratee.\n * @param {Function} iteratee - Transformation function which is passed index and amount.\n * @returns {undefined} - Nothing.\n *\n * @example\n * import { timesAsync } from '@universalweb/acid';\n * await timesAsync(3, async (item) => {\n *   console.log(item);\n * });\n * // 0\n * // 1\n * // 2\n * // => undefined\n */\nexport async function timesAsync(amount, iteratee) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tawait iteratee(amount);\n\t}\n}\n/**\n * Asynchronously iterates based on the amount given and maps the results awaited on by the iteratee each time to an array.\n *\n * @async\n * @function timesMapAsync\n * @category array\n * @type {Function}\n * @param {Number} amount - The amount of times to loop invoking the iteratee.\n * @param {Function} iteratee - Transformation function which is passed index and amount.\n * @param {Array} [results = []] - Array that will have iteratee return pushed to.\n * @returns {Array} - An array with iteratee's returned values.\n *\n * @example\n * import { timesMapAsync } from '@universalweb/acid';\n * await timesMapAsync(3, (item) => {\n *   return item;\n * });\n * // => [0, 1, 2]\n */\nexport async function timesMapAsync(amount, iteratee, results = []) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tresults[index] = await iteratee(amount);\n\t}\n\treturn results;\n}\n","import { isEqual } from './isEqual.js';\n/**\n * Performs a toggle between 2 values using a deep or strict comparison.\n *\n * @function toggle\n * @type {Function}\n * @category utility\n * @param {(string|number|Object|Array)} value - Strictly compared against on & off arguments.\n * @param {(string|number|Object|Array)} on - The first object to be compared to.\n * @param {(string|number|Object|Array)} off - The second object to be compared to.\n * @returns {(string|number|Object|Array)} - The opposing value to the current.\n *\n * @example\n * import { toggle } from '@universalweb/acid';\n * let toggleMe = true;\n * toggleMe = toggle(toggleMe, true, false);\n * // => false\n */\nexport function toggle(value, on = true, off = false) {\n\treturn (isEqual(on, value)) ? off : on;\n}\n\n","const truncateDown = (string, maxLength, stringLength) => {\n\tconst breakAll = string.split('');\n\tconst breakAllLength = breakAll.length;\n\tlet item;\n\tlet index = stringLength - maxLength;\n\tfor (; index < breakAllLength && index >= 0; index--) {\n\t\titem = breakAll[index];\n\t\tif (item === ' ') {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn string.slice(0, index).trim();\n};\nconst truncateUp = (string, maxLength, stringLength) => {\n\tconst breakAll = string.split('');\n\tconst breakAllLength = breakAll.length;\n\tlet item;\n\tlet index = maxLength;\n\tfor (; index < breakAllLength && index > 0; index++) {\n\t\titem = breakAll[index];\n\t\tif (item === ' ') {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn string.substring(index, stringLength).trim();\n};\n/**\n * Truncates the string, accounting for word placement and character count.\n *\n * @function truncate\n * @type {Function}\n * @category string\n * @param {String} string - String to be truncated.\n * @param {Number} maxLength - The desired max length of the string.\n * @returns {String} - The mutated string.\n *\n * @example\n * import { truncate, assert } from '@universalweb/acid';\n * assert(truncate('Where is Lucy?', 2), 'Where is');\n */\nexport function truncate(string, maxLength) {\n\tconst stringLength = string.length;\n\treturn (stringLength > maxLength) ? truncateDown(string, maxLength, stringLength) : string;\n}\n/**\n * Truncates the string, accounting for word placement and character count from the right.\n *\n * @function truncateRight\n * @type {Function}\n * @category string\n * @param {String} string - String to be truncated.\n * @param {Number} maxLength - The desired max length of the string.\n * @returns {String} - The mutated string.\n *\n * @example\n * import { truncateRight, assert } from '@universalweb/acid';\n * assert(truncateRight('Where is Lucy?', 6), 'Lucy?');\n */\nexport function truncateRight(string, maxLength) {\n\tconst stringLength = string.length;\n\treturn (stringLength > maxLength) ? truncateUp(string, maxLength, stringLength) : string;\n}\n","/**\n * Merges together the values of each of the arrays with the values at the corresponding position.\n *\n * @function zip\n * @type {Function}\n * @category array\n * @param {Array} arrays - The arrays to process.\n * @returns {Array} - Returns the new array of regrouped elements.\n *\n * @example\n * zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n */\nexport function zip(...arrays) {\n\treturn arrays[0].map((item, index) => {\n\t\treturn arrays.map((array) => {\n\t\t\treturn array[index];\n\t\t});\n\t});\n}\n/**\n * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.\n *\n * @function unZip\n * @type {Function}\n * @category array\n * @param {Array} source - The array of grouped elements to process.\n * @returns {Array} - Returns the new array of regrouped elements.\n *\n * @example\n * unZip([['a', 1, true], ['b', 2, false]]);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nexport function unZip(source) {\n\treturn source[0].map((item, index) => {\n\t\treturn source.map((arraySet) => {\n\t\t\treturn arraySet[index];\n\t\t});\n\t});\n}\n\n","import { flattenDeep } from './flattenDeep.js';\nimport { unique } from './unique.js';\n/**\n * Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.\n *\n * @function union\n * @category array\n * @type {Function}\n * @param {...Array} arrays - The arrays to be evaluated.\n * @returns {Array} - The aggregated array.\n *\n * @example\n * union([1,2,4], [1,2,3]);\n * // => [1, 2, 4, 3]\n */\nexport function union(...arrays) {\n\treturn unique(flattenDeep(arrays));\n}\n\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Loops through an array invoking an iteratee with (value, key). If the iteratee always yields true then true is returned.\n * If and when the iteratee yields false the loop stops & false is returned.\n *\n * @function untilFalseArray\n * @category array\n * @type {Function}\n * @param {Array} source - The array to iterate over.\n * @param {Function} iteratee - Transformation function which is passed item & key and expects a boolean to be returned.\n * @returns {Array} - Returns true if all returns are true or false if one value returns false.\n *\n * @example\n * import { untilFalseArray, assert } from '@universalweb/acid';\n * assert(untilFalseArray([true, true, false], (item) => {\n *   return item;\n * }), false);\n * assert(untilFalseArray([true, true, true], (item) => {\n *   return item;\n * }), true);\n */\nexport function untilFalseArray(source, iteratee) {\n\tconst sourceLength = source.length;\n\tfor (let index = 0;index < sourceLength;index++) {\n\t\tif (iteratee(source[index], index) === false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Loops through an array invoking an iteratee with (value, key). If the iteratee always yields false then true is returned.\n * If and when the iteratee yields true the loop stops & false is returned.\n *\n * @function untilTrueArray\n * @category array\n * @type {Function}\n * @param {Array} source - The array to iterate over.\n * @param {Function} iteratee - Transformation function which is passed item & key and expects a boolean to be returned.\n * @returns {Array} - Returns true if all returns are false or false if one value returns true.\n *\n * @example\n * import { untilTrueArray, assert } from '@universalweb/acid';\n * assert(untilTrueArray([true], (item) => {\n *   return item;\n * }), false);\n * assert(untilTrueArray([true, true, true], (item) => {\n *   return item;\n * }), true);\n */\nexport function untilTrueArray(source, iteratee) {\n\tconst sourceLength = source.length;\n\tfor (let index = 0;index < sourceLength;index++) {\n\t\tif (iteratee(source[index], index) === true) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling object and creates a new object based on the calling object's type with the results,\n * (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n * Re-checks the length each loop.\n *\n * @function whileCompactMap\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileCompactMap, assert } from '@universalweb/acid';\n * assert(whileCompactMap([1, 2, 3, false, undefined, null], (item) => {\n *   return item;\n * }), [1, 2, 3, false]);\n */\nexport function whileCompactMap(source, iteratee, results = [], additionalArgument) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\tconst result = results.push(iteratee(source[index], index, source, source.length, additionalArgument));\n\t\tindex++;\n\t\tif (hasValue(result)) {\n\t\t\tresults.push(result);\n\t\t}\n\t}\n\treturn source;\n}\n\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the given array but re-checks the length each loop. Usefull while mutating the same array being looped over.\n *\n * @function whileEachArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileEachArray, assert } from '@universalweb/acid';\n * const list = [];\n * whileEachArray([1, 2, 3], (item, index) => {\n *   list[index] = item;\n * });\n * assert(list, [1, 2, 3]);\n */\nexport function whileEachArray(source, iteratee, additionalArgument) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\titeratee(source[index], index, source, source.length, additionalArgument);\n\t\tindex++;\n\t}\n\treturn source;\n}\n\n","import { hasValue } from '../types/hasValue.js';\nimport { returnValue } from '../utilities/returnValue.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n * Re-checks the length each loop.\n *\n * @function whileMapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} additionalArgument - An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileMapArray, assert } from '@universalweb/acid';\n * assert(whileMapArray([1, 2, 3], (item, index, source) => {\n *   if (index === 0) {\n *     source.push(4);\n *   }\n *   return item;\n * }), [1, 2, 3, 4]);\n */\nexport function whileMapArray(source, iteratee, results = [], additionalArgument) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\tresults.push(iteratee(source[index], index, source, source.length, additionalArgument));\n\t\tindex++;\n\t}\n\treturn source;\n}\n\n","import { construct } from '../classes/construct.js';\n/**\n * Returns a copy of the array with all instances of the values removed.\n *\n * @function without\n * @type {Function}\n * @category array\n * @param {Array} target - The target array to be filtered.\n * @param {Array} sources - Items to be removed.\n * @returns {Array} - The target array filtered.\n *\n * @example\n * import { without, assert } from '@universalweb/acid';\n * assert(without([1, 2, 2, 4], [4]), [1, 2, 2]);\n */\nexport function without(target, sources) {\n\tif (!sources) {\n\t\treturn target;\n\t}\n\tconst sourcesSet = construct(Set, sources);\n\treturn target.filter((item) => {\n\t\treturn !sourcesSet.has(item);\n\t});\n}\n\n","/**\n * Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.\n *\n * @function wrap\n * @category function\n * @type {Function}\n * @param {*} value - The value to wrap.\n * @param {Function} wrapper - The wrapper function.\n * @returns {Function} - The new function.\n *\n * @example\n * wrap('Lucy', (firstName, lastName) => {\n *  return `My name is ${firstName} ${lastName}.`;\n * })('Diamonds');\n * // => 'My name is Lucy Diamonds.'\n */\nexport function wrap(value, wrapper) {\n\treturn (...arg) => {\n\t\treturn wrapper(value, ...arg);\n\t};\n}\n\n","import { construct } from '../classes/construct.js';\nimport { difference } from './difference.js';\nimport { eachArray } from './each.js';\nimport { forEach } from '../utilities/forEach.js';\n/**\n * Creates an array that is the symmetric difference of the provided arrays.\n *\n * @function xor\n * @category array\n * @type {Function}\n * @param {...Array} sources - The array(s) to be filtered.\n * @returns {Array|undefined} - The filtered array.\n *\n * @example\n * xor([2, 1], [2, 3, 5], [6]);\n * // => [1, 3, 5, 6]\n */\nexport function xor(...sources) {\n\tconst xorMap = construct(Map);\n\tconst xored = [];\n\tconst sourcesLength = sources.length;\n\tif (sourcesLength === 2) {\n\t\treturn difference(sources[0], sources[1]);\n\t}\n\teachArray(sources, (currentArray, parentIndex) => {\n\t\teachArray(currentArray, (child, childIndex) => {\n\t\t\tlet childRoot = xorMap.get(child);\n\t\t\tif (!childRoot) {\n\t\t\t\tchildRoot = {\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tparentIndex,\n\t\t\t\t\tchild\n\t\t\t\t};\n\t\t\t\txorMap.set(child, childRoot);\n\t\t\t} else if (childRoot.parentIndex === parentIndex) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tchildRoot.count++;\n\t\t\t}\n\t\t});\n\t});\n\tforEach(xorMap, (item) => {\n\t\tif (item.count === 1) {\n\t\t\txored.push(item.child);\n\t\t}\n\t});\n\treturn xored;\n}\n\n"],"names":["clearArray","source","length","isUndefined","undefined","hasLength","Boolean","isNull","hasValue","returnValue","eachArray","iteratee","thisCall","additionalArg","arrayLength","index","call","compactMapArray","results","item","arrayOriginal","returned","push","async","eachAsyncArray","compactMapAsyncArray","result","sign","Math","isNegative","rangeUp","start","end","step","sourceArray","position","rangeDown","isArray","Array","reflectConstruct","Reflect","construct","target","argumentsList","newTarget","args","ensureArray","flattenDeep","flat","Infinity","forEach","callback","difference","sources","differencesMap","Map","differences","currentArray","parentIndex","child","childIndex","childRoot","get","count","set","drop","array","amount","upTo","splice","eachRight","additionalArgument","eachRightAsync","everyArray","sourceLength","everyAsyncArray","filterArray","filterAsyncArray","regexToPath","regexCloseBracket","emptyString","toPath","replace","split","propertyString","link","objectKeys","Object","keys","hasOwn","hasKeys","properties","pathArray","lastPath","pop","initialPathObject","isConstructor","constructor","isConstructorFactory","constructorName","name","isConstructorNameFactory","isTypeFactory","method","primarySource","otherSources","isBufferCall","isBuffer","isPlainObject","toString","trim","slice","isEqual","equals","sourceProperties","key","mathNativeMax","max","mapArray","concurrentArray","Promise","all","mapAsyncArray","subtract","minuend","subtrahend","subtractReverse","floor","random","randomInt","min","arrayFrom","from","toArray","arrayLike","mapFn","thisArg","shuffle","shuffleArray","value","mathNativeMin","onlyUnique","indexOf","sortUnique","unique","isSorted","filter","clearBuffer","fill","isFunction","Function","isNumberCall","isNumber","isString","String","objectAssign","assign","assignToObject","assignToClass","prototype","findIndexCache","element","indexMatch","propertyName","sortObjectsAlphabetically","previous","next","ifMatch","previousKey","nextKey","localeCompare","sortCollectionAscendingFilter","sortCollectionAscending","collection","sort","sortCollectionDescendingFilter","sortCollectionDescending","pluckObject","targets","sortObjectsAlphabeticallyReverse","regexTestFactory","regexType","test","isFileCSS","isFileHTML","isFileJS","isFileJSON","eachAsyncObject","propertyCount","eachObject","objectKeysArray","isSetCall","isSet","forOf","isGeneratorCall","isGenerator","forOfAsync","generatorArgs","isAsyncCall","isAsync","generateLoop","arrayLoop","arrayLoopAsync","objectLoop","objectLoopAsync","forOfLoop","forOfLoopAsync","argument1","argument2","argument3","isIterateeAsync","each","Chain","methods","this","addChainMethod","thisChain","methodName","setValue","done","everyObject","original","noop","falsy","times","truth","Timers","list","remove","id","clearTimeout","delete","has","callable","time","currentThis","setTimeout","clear","timers","timer","applyNative","apply","thisArgument","getType","cloneType","sourceType","forOfMap","resultsObject","methodPush","add","methodPushBound","bind","methodSet","forOfMapAsync","resultsGenerator","mapAsyncObject","thisObject","mapObject","map","everyAsyncObject","forOfEvery","forOfEveryAsync","every","functionPrototype","cacheNativeMethod","getPropNames","getOwnPropertyNames","getPropDesc","getOwnPropertyDescriptor","defProp","defineProperty","hasProp","hasOwnProperty","isSame","is","objectEntries","entries","compactMapAsyncObject","compactMapObject","filterObject","filterAsyncObject","escapeRegexRegex","escapeRegex","arrayToRegex","makeSafe","RegExp","join","isRegexCall","isRegex","objectSize","objectLengthProperty","objectSizeProperty","size","zipObject","values","zipedObject","normalizeCase","space","restString","string","substring","rawURLDecodeRegex","andRegex","lessThanRegex","moreThanRegex","doubleQuoteRegex","rawURLDecode","decodeURIComponent","htmlEntities","tokenizeRegEx","wordsRegEx","getWords","upperFirstLetter","toUpperCase","upperFirst","upperFirstOnly","toLowerCase","getTypeName","isMapCall","isMap","typedArrayRegex","arrayConstructorName","isTypedArray","noValue","isBigIntCall","isBigInt","isBooleanCall","isBoolean","isArrayBufferCall","isArrayBuffer","constructorNames","isDateCall","isDate","isFalse","isF32Call","isF32","isF64Call","isF64","isInteger","Number","isFloat","isI16Call","isI16","isI32Call","isI32","isI8Call","isI8","isPromise","isKindAsync","isSafeInteger","isSafeInt","isU16Call","isU16","isU32Call","isU32","isU8Call","isU8","isU8CCall","isU8C","isWeakMapCall","isWeakMap","isDeno","globalThis","Deno","isNodejs","process","versions","node","isTruthy","returnIfTrue","notEqual","jsonNative","JSON","stringify","createAssertError","expected","localOptions","options","errorTitle","title","file","Error","assertAsync","sourceArg","structuredCloneSafe","structuredClone","forOfCompactMapAsync","forOfCompactMap","compactMap","forOfFilter","forOfFilterAsync","returnFlow","arg","flow","flowRight","flowAsync","flowAsyncRight","hasDot","Intervals","clearInterval","setInterval","intervals","isAgent","userAgent","navigator","userAgentData","brands","brand","version","userAgentNormalized","Model","static","modelName","modelSource","models","promise","Store","property","data","Proxy","proxySource","console","log","UniqID","totalActive","freed","totalFree","shift","free","isActive","shouldReset","reset","uniqID","VirtualStorage","initialObject","items","getItem","hasItem","setItem","removeItem","virtualStorage","eventAdd","eventName","useCapture","addEventListener","createFragment","document","createDocumentFragment","append","parentNode","appendChild","nodeAttribute","object","getAttribute","setAttribute","classTest","tagTest","regexSpace","getByClass","getElementsByClassName","getByTag","getElementsByTagName","getById","getElementById","querySelector","querySelectorAll","createElementCache","createElement","importjs","url","src","accept","nodeAttachLoadingEvents","isDocumentReady","state","readyState","scriptTag","protocol","location","protocolSocket","hostname","info","hardware","cores","hardwareConcurrency","host","saveDimensions","bodyHeight","body","offsetHeight","bodyWidth","offsetWidth","windowHeight","window","innerHeight","windowWidth","innerWidth","updateDimensions","exports","hasLocal","storeCheck","e","hasStorage","localStorage","BrowserStorage","local","storage","generateTheme","color","bg","themes","alert","important","notify","warning","augend","addend","point","sortedObject","bindThis","targetAssign","virtualFlag","total","currentAmount","config","chunked","match","themeName","trace","background","sourceKeys","sourceKeysLength","targetObject","i","keyName","compactedKeys","queue","allSettled","arity","curries","curried","curryArgs","unshift","debounced","Buffer","alloc","removeEventListener","findIndex","find","level","reduce","previousValue","currentValue","concat","valuesLength","cloned","methodBound","lastIndexOf","insertIndex","search","includes","rootObject","equalThis","optional","firstArgument","text","arrays","otherItem","thisBind","strictFlag","indexes","sourceChild","targetParent","nodeType","eventObject","keyCode","Symbol","iterator","compareArray","targetKeys","sourceParent","targetChild","type","targetOne","targetTwo","other","otherType","reviver","parse","indexFrom","trueIndex","merge","currentSource","sourceItem","sourceKey","blacklist","blacklistRegex","numberToString","iteratees","predicates","predicate","rejected","whitelist","compared","removeThese","words","sampleArray","used","select","numberList","a","b","endIndex","indexRight","throttled","shouldThrottle","on","off","maxLength","stringLength","breakAll","breakAllLength","truncateDown","truncateUp","arraySet","unZippedKeys","sourcesSet","Set","wrapper","xorMap","xored"],"mappings":"yOAaO,SAASA,EAAWC,GAE1B,OADAA,EAAOC,OAAS,EACTD,CACR,CCLO,SAASE,EAAYF,GAC3B,YAAkBG,IAAXH,CACR,CCAO,SAASI,EAAUJ,GACzB,OAAOK,QAAQL,EAAOC,OACvB,CCFO,SAASK,EAAON,GACtB,OAAkB,OAAXA,CACR,CCDO,SAASO,EAASP,GACxB,OAAQE,EAAYF,KAAYM,EAAON,EACxC,CCRO,SAASQ,EAAYR,GAC3B,OAAOA,CACR,CCYO,SAASS,EAAUT,EAAQU,EAAUC,EAAUC,GACrD,IAAKZ,EACJ,OAED,MAAMa,EAAcb,EAAOC,OAC3B,GAAIM,EAASI,GACZ,IAAK,IAAIG,EAAQ,EAAGA,EAAQD,EAAaC,IACxCJ,EAASK,KAAKJ,EAAUX,EAAOc,GAAQA,EAAOd,EAAQa,EAAaD,QAGpE,IAAK,IAAIE,EAAQ,EAAGA,EAAQD,EAAaC,IACxCJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,EAAaD,GAGtD,OAAOZ,CACR,CCfO,SAASgB,EAAgBhB,EAAQU,EAAWF,EAAaS,EAAU,GAAIN,EAAUC,GAgBvF,OAfIL,EAASI,GACZF,EAAUT,GAAQ,CAACkB,EAAMJ,EAAOK,EAAeN,KAC9C,MAAMO,EAAWV,EAASK,KAAKJ,EAAUO,EAAMJ,EAAOG,EAASE,EAAeN,EAAaD,GACvFL,EAASa,IACZH,EAAQI,KAAKD,EACb,IAGFX,EAAUT,GAAQ,CAACkB,EAAMJ,EAAOK,EAAeN,KAC9C,MAAMO,EAAWV,EAASQ,EAAMJ,EAAOG,EAASE,EAAeN,EAAaF,EAAUC,GAClFL,EAASa,IACZH,EAAQI,KAAKD,EACb,IAGIH,CACR,CCjBOK,eAAeC,EAAevB,EAAQU,EAAUC,EAAUC,GAChE,IAAKZ,EACJ,OAED,MAAMa,EAAcb,EAAOC,OAC3B,GAAIM,EAASI,GACZ,IAAK,IAAIG,EAAQ,EAAGA,EAAQD,EAAaC,UAClCJ,EAASK,KAAKJ,EAAUX,EAAOc,GAAQA,EAAOd,EAAQa,EAAaD,QAG1E,IAAK,IAAIE,EAAQ,EAAGA,EAAQD,EAAaC,UAClCJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,EAAaD,GAG5D,OAAOZ,CACR,CCjBOsB,eAAeE,EAAqBxB,EAAQU,EAAWF,GAC7D,MAAMS,EAAU,GAOhB,aANMM,EAAevB,GAAQsB,MAAOJ,EAAMJ,EAAOD,KAChD,MAAMY,QAAef,EAASQ,EAAMJ,EAAOG,EAASJ,GAChDN,EAASkB,IACZR,EAAQI,KAAKI,EACb,IAEKR,CACR,CChBA,MAAQS,KAAAA,GAASC,KACV,SAASC,EAAW5B,GAC1B,OAAyB,IAAlB0B,EAAK1B,EACb,CCfO,SAAS6B,EAAQC,EAAOC,EAAKC,EAAMC,GACzC,IAAIC,EAAWJ,EACf,KAAOI,EAAWH,GACjBE,EAAYZ,KAAKa,GACjBA,GAAYF,EAEb,OAAOC,CACR,CACO,SAASE,EAAUL,EAAOC,EAAKC,EAAMC,GAC3C,IAAIC,EAAWJ,EACf,KAAOI,EAAWH,GACjBE,EAAYZ,KAAKa,GACjBA,GAAYF,EAEb,OAAOC,CACR,CCHY,MAACG,EAAUC,MAAMD,QCQ7B,MAAME,EAAmBC,QAAQC,UAE1B,SAASA,EAAUC,EAAQC,EAAgB,GAAIC,GACrD,MAAMC,EAAQR,EAAQM,GAAkBA,EAAgB,CAACA,GACzD,OAAIC,EACIL,EAAiBG,EAAQG,EAAMD,GAEhCL,EAAiBG,EAAQG,EACjC,CCdO,SAASC,EAAY7C,GAC3B,OAAQoC,EAAQpC,IAAWA,GAAYO,EAASP,IAAW,CAACA,IAAY,EACzE,CCHO,SAAS8C,EAAY9C,GAC3B,OAAOA,EAAO+C,KAAKC,IACpB,CChBO,SAASC,EAAQjD,EAAQkD,GAE/B,OADAlD,EAAOiD,QAAQC,GACRlD,CACR,CCcO,SAASmD,KAAcC,GAC7B,MAAMC,EAAiBb,EAAUc,KAC3BC,EAAc,GAuBpB,OAtBA9C,EAAU2C,GAAS,CAACI,EAAcC,KACjChD,EAAU+C,GAAc,CAACE,EAAOC,KAC/B,IAAIC,EAAYP,EAAeQ,IAAIH,GACnC,GAAKE,EAOE,IAAIA,EAAUH,cAAgBA,EACpC,OAEAG,EAAUE,OACV,MAVAF,EAAY,CACXE,MAAO,EACPL,cACAC,SAEDL,EAAeU,IAAIL,EAAOE,EAK1B,GACA,IAEHX,EAAQI,GAAiBnC,IACL,IAAfA,EAAK4C,OAAoC,IAArB5C,EAAKuC,aAC5BF,EAAYlC,KAAKH,EAAKwC,MACtB,IAEKH,CACR,CC3BO,SAASS,EAAKC,EAAOC,EAAS,EAAGC,EAAOF,EAAMhE,QACpD,OAAOgE,EAAMG,OAAOF,EAAQC,EAC7B,CCGO,SAASE,EAAUrE,EAAQU,EAAU4D,GAC3C,IAAKtE,EACJ,OAED,MAAMa,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQD,EAAc,EAAEC,GAAS,EAAEA,IAC3CJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,EAAayD,GAErD,OAAOtE,CACR,CCXOsB,eAAeiD,EAAevE,EAAQU,GAC5C,IAAKV,EACJ,OAED,MAAMa,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQD,EAAc,EAAGC,GAAS,EAAGA,UACvCJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,GAE9C,OAAOb,CACR,CCNO,SAASwE,EAAWxE,EAAQU,EAAU4D,GAC5C,IAAKtE,EACJ,OAED,MAAMyE,EAAezE,EAAOC,OAC5B,IAAK,IAAIa,EAAQ,EAAEA,EAAQ2D,EAAa3D,IACvC,IAAiF,IAA7EJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQyE,EAAcH,GACxD,OAAO,EAGT,OAAO,CACR,CCXOhD,eAAeoD,EAAgB1E,EAAQU,EAAU4D,GACvD,IAAKtE,EACJ,OAED,MAAMyE,EAAezE,EAAOC,OAC5B,IAAK,IAAIa,EAAQ,EAAEA,EAAQ2D,EAAa3D,IACvC,IAAuF,UAA7EJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQyE,EAAcH,GAC9D,OAAO,EAGT,OAAO,CACR,CCXO,SAASK,EAAY3E,EAAQU,EAAUO,EAAU,GAAIqD,GAM3D,OALA7D,EAAUT,GAAQ,CAACkB,EAAMJ,EAAOK,EAAeN,MACyC,IAAnFH,EAASQ,EAAMJ,EAAOG,EAASE,EAAeN,EAAayD,IAC9DrD,EAAQI,KAAKH,EACb,IAEKD,CACR,CCPOK,eAAesD,EAAiB5E,EAAQU,EAAUO,EAAU,GAAIqD,GAMtE,aALM/C,EAAevB,GAAQsB,MAAOJ,EAAMJ,EAAOK,EAAeN,MAC8B,UAAnFH,EAASQ,EAAMJ,EAAOG,EAASE,EAAeN,EAAayD,IACpErD,EAAQI,KAAKH,EACb,IAEKD,CACR,CC7BA,MAAM4D,EAAc,QACdC,EAAoB,KACpBC,EAAc,GAcb,SAASC,EAAOhF,GACtB,OAAOA,EAAOiF,QAAQH,EAAmBC,GAAaG,MAAML,EAC7D,CCKO,SAAShB,EAAIsB,EAAgB1C,GACnC,IAAKA,EACJ,OAAO,EAER,IAAI2C,EAAO3C,EAMX,OAJA+B,EADmBpC,EAAQ+C,GAAmBA,EAAiBH,EAAOG,IAC/CjE,IACtBkE,EAAOA,EAAKlE,GACLX,EAAS6E,MAEVA,CACR,CCtBA,MAAMC,EAAaC,OAAOC,KACnB,SAASA,EAAKvF,GACpB,GAAIA,EACH,OAAOqF,EAAWrF,EAEpB,CCbA,MAAMwF,EAASF,OAAOE,OAef,SAASC,EAAQzF,KAAW0F,GAClC,GAAK1F,EAGL,OAAOwE,EAAWkB,GAAaxE,IAC9B,MAAMyE,EAAYX,EAAO9D,GACzB,GAAyB,IAArByE,EAAU1F,OACb,OAAOuF,EAAOxF,EAAQkB,GAChB,CACN,MAAM0E,EAAWD,EAAUE,MACrBC,EAAoBjC,EAAI8B,EAAW3F,GACzC,QAAI8F,GACIN,EAAOM,EAAmBF,EAGlC,IAEH,CCtBO,SAASG,EAActD,EAAQzC,GACrC,OAAOyC,GAAQuD,cAAgBhG,IAAU,CAC1C,CACO,SAASiG,EAAqBjG,GACpC,OAAQyC,GACAsD,EAActD,EAAQzC,EAE/B,CACO,SAASkG,EAAgBlG,GAC/B,OAAOA,GAAQgG,aAAaG,IAC7B,CACO,SAASC,EAAyBpG,GACxC,OAAQyC,GACAyD,EAAgBzD,KAAYzC,IAAU,CAE/C,CC5BO,SAASqG,EAAcC,GAC7B,OAAO,SAASC,KAAkBC,GACjC,OAAIA,EACIF,EAAOC,IAAkB/B,EAAWgC,EAAcF,GAEnDA,EAAOC,EAChB,CACA,CCMY,MAACE,EAAeL,EAAyB,UACxCM,EAAWL,EAAcI,GCDzBE,EAAiB3G,KACzBO,EAASP,IAEO,YADZA,EAAOgG,YAAYY,WAAWC,OACnCC,MAAM,EAAG,ICIAC,EAAU,CAAC/G,EAAQyC,KAC/B,GAAIzC,IAAWyC,EACd,OAAO,EACD,GAAIiE,EAAS1G,GACnB,OAAOA,EAAOgH,OAAOvE,GACf,GAAIzC,EAAO4G,aAAenE,EAAOmE,WACvC,GAAID,EAAc3G,GAAS,CAC1B,MAAMiH,EAAmB1B,EAAKvF,GAC9B,GAAIyF,EAAQhD,EAAQwE,GACnB,OAAOzC,EAAWyC,GAAmBC,GAC7BH,EAAQ/G,EAAOkH,GAAMzE,EAAOyE,KAGxC,MAAS,GAAI9E,EAAQpC,IACdA,EAAOC,SAAWwC,EAAOxC,OAC5B,OAAOuE,EAAWxE,GAAQ,CAACkB,EAAMJ,IACzBiG,EAAQ7F,EAAMuB,EAAO3B,MAKhC,OAAO,CAAK,EC1Cb,MAAMqG,EAAgBxF,KAAKyF,ICsBpB,SAASC,EAASrH,EAAQU,EAAUO,EAAU,GAAIN,EAAUC,GAUlE,OATIL,EAASI,GACZF,EAAUT,GAAQ,CAACkB,EAAMJ,EAAOK,EAAeN,KAC9CI,EAAQH,GAASJ,EAASK,KAAKJ,EAAUO,EAAMJ,EAAOG,EAASE,EAAeN,EAAaD,EAAc,IAG1GH,EAAUT,GAAQ,CAACkB,EAAMJ,EAAOK,EAAeN,KAC9CI,EAAQH,GAASJ,EAASQ,EAAMJ,EAAOG,EAASE,EAAeN,EAAaD,EAAc,IAGrFK,CACR,CCfOK,eAAegG,EAAgBtH,EAAQU,GAC7C,IAAKV,EACJ,OAED,MAAMiB,EAAU,GACVJ,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQ,EAAGA,EAAQD,EAAaC,IACxCG,EAAQH,GAASJ,EAASV,EAAOc,GAAQA,EAAOG,EAASJ,GAE1D,OAAO0G,QAAQC,IAAIvG,EACpB,CCVOK,eAAemG,EAAczH,EAAQU,GAC3C,MAAMO,EAAU,GAIhB,aAHMM,EAAevB,GAAQsB,MAAOJ,EAAMJ,EAAOD,KAChDI,EAAQH,SAAeJ,EAASQ,EAAMJ,EAAOG,EAASJ,EAAY,IAE5DI,CACR,CCVO,SAASyG,EAASC,EAASC,GACjC,OAAOD,EAAUC,CAClB,CCFO,SAASC,EAAgBD,EAAYD,GAC3C,OAAOA,EAAUC,CAClB,CChBA,MAAME,MACLA,EACDC,OAACA,IACGpG,KAeG,SAASqG,GAAUZ,EAAKa,EAAM,GACpC,OAAOH,EAAMC,MAAYX,EAAMa,IAAQA,CACxC,CCnBA,MAAMC,GAAY7F,MAAM8F,KAejB,SAASC,GAAQC,EAAWC,EAAOC,GACzC,GAAIhI,EAAS8H,GACZ,OAAOH,GAAUG,EAAWC,EAAOC,EAErC,CCJO,SAASC,GAAQ/F,EAAQyB,EAASzB,EAAOxC,QAC/C,GAAIwC,EAAOxC,QAAU,EACpB,OAAOmI,GAAQ3F,GAEhB,MAAMgG,EAAeL,GAAQ3F,GAC7B,IACI3B,EACA4H,EAFA5E,EAAQ,EAGZ,KAAOA,EAAQI,GACdpD,EAAQkH,GAAUS,EAAaxI,OAAS,EAAG,GAC3CyI,EAAQD,EAAa3E,GACrB2E,EAAa3E,GAAS2E,EAAa3H,GACnC2H,EAAa3H,GAAS4H,EACtB5E,IAED,OAAO2E,CACR,CChCA,MAAME,GAAgBhH,KAAKsG,ICApB,SAASW,GAAWF,EAAO5H,EAAOmD,GACxC,OAAOA,EAAM4E,QAAQH,KAAW5H,CACjC,CACO,SAASgI,GAAW5H,EAAMJ,EAAOmD,GACvC,OAAO/C,IAAS+C,EAAMnD,EAAQ,EAC/B,CAeO,SAASiI,GAAO/I,EAAQgJ,GAC9B,OAAIA,EACIhJ,EAAOiJ,OAAOH,IAEf9I,EAAOiJ,OAAOL,GACtB,CCZO,SAASM,GAAYlJ,GAE3B,OADAA,EAAOmJ,KAAK,GACLnJ,CACR,CCFY,MAACoJ,GAAcpJ,KAClBO,EAASP,IAAWA,aAAkBqJ,SCDlCC,GAAelD,EAAyB,UACxCmD,GAAWlD,EAAciD,ICD1B,MAACE,GAAWvD,EAAqBwD,QCRjC,MAACC,GAAepE,OAAOqE,OAC5B,SAASC,GAAenH,EAAQzC,GACtC,GAAI2G,EAAc3G,GACjB0J,GAAajH,EAAQzC,QACf,GAAIoJ,GAAWpJ,GAAS,CAC9B,MAAMkH,EAAMlH,EAAOmG,KACfe,EACHzE,EAAOyE,GAAOlH,EAEd0J,GAAajH,EAAQzC,EAEtB,MAAUwJ,GAASxJ,IAAWuJ,GAASvJ,MACvCyC,EAAOzC,GAAUA,GAElB,OAAOyC,CACR,CAcO,SAASkH,GAAOlH,KAAWW,GACjC,MAAMqB,EAAerB,EAAQnD,OAC7B,IAAK,IAAIa,EAAQ,EAAGA,EAAQ2D,EAAc3D,IACzC8I,GAAenH,EAAQW,EAAQtC,IAEhC,OAAO2B,CACR,CCnCO,SAASoH,GAAcpH,EAAQzC,GACrC,GAAI2G,EAAc3G,GACjB0J,GAAajH,EAAOqH,UAAW9J,QACzB,GAAIoJ,GAAWpJ,GAAS,CAC9B,MAAMkH,EAAMlH,EAAOmG,KACfe,IACHzE,EAAOqH,UAAU5C,GAAOlH,EAE3B,MAAQ,GAAI+F,EAAc/F,GAAS,CACjC,MAAMkH,EAAMlH,EAAOgG,aAAaG,KAC5Be,IACHzE,EAAOqH,UAAU5C,GAAOlH,EAEzB,MAAUwJ,GAASxJ,IAAWuJ,GAASvJ,MACvCyC,EAAOqH,UAAU9J,GAAUA,GAE5B,OAAOyC,CACR,CCvBO,SAASsH,GAAeC,EAASlJ,EAAOmD,EAAOgG,EAAYC,GACjE,GAAIF,EAAQE,KAAkBD,EAC7B,OAAO,CAET,CCJO,SAASE,GAA0BC,EAAUC,EAAMH,EAAcI,GACvE,MAAMC,EAAcH,EAASF,GACvBM,EAAUH,EAAKH,GACrB,OAAIK,IAAgBC,GAAWF,EACvBA,EAAQF,EAAUC,EAAMH,GAEzBK,EAAYE,cAAcD,EAClC,CCPO,SAASE,GAA8BN,EAAUC,EAAMH,EAAcI,GAC3E,MAAMC,EAAcH,EAASF,GACvBM,EAAUH,EAAKH,GACrB,OAAIK,IAAgBC,GAAWF,EACvBA,EAAQF,EAAUC,EAAMH,GAE3BM,EAEOD,EAEDA,EAAcC,GAChB,EACED,EAAcC,EACjB,EAED,GANE,EAFD,CAST,CAmBO,SAASG,GAAwBC,EAAYV,EAAe,KAAMI,GACxE,OAAOM,EAAWC,MAAK,CAACT,EAAUC,IAC1BK,GAA8BN,EAAUC,EAAMH,EAAcI,IAErE,CCvCO,SAASQ,GAA+BV,EAAUC,EAAMH,EAAcI,GAC5E,MAAMC,EAAcH,EAASF,GACvBM,EAAUH,EAAKH,GACrB,OAAIK,IAAgBC,GAAWF,EACvBA,EAAQF,EAAUC,EAAMH,GAE3BM,EAEOD,EAEDA,EAAcC,EACjB,EACGD,EAAcC,GAChB,EAEF,EANC,GAFC,CASV,CAmBO,SAASO,GAAyBH,EAAYV,EAAe,KAAMI,GACzE,OAAOM,EAAWC,MAAK,CAACT,EAAUC,IAC1BS,GAA+BV,EAAUC,EAAMH,EAAcI,IAEtE,CCvBO,SAASU,GAAYhL,EAAQiL,GACnC,GAAKjL,EAEE,OAAIwJ,GAASyB,GACZjL,EAAOiL,GAER5D,EAAS4D,GAAU/J,GAClBlB,EAAOkB,IAEhB,CCzBO,SAASgK,GAAiCd,EAAUC,EAAMH,EAAcI,GAC9E,MAAMC,EAAcH,EAASF,GACvBM,EAAUH,EAAKH,GACrB,OAAIK,IAAgBC,GAAWF,EACvBA,EAAQF,EAAUC,EAAMH,GAEzBM,EAAQC,cAAcF,EAC9B,CCNO,SAASY,GAAiBC,GAChC,OAAQlK,KACCX,EAASW,IAASkK,EAAUC,KAAKnK,EAE3C,CCQY,MAACoK,GAAYH,GAAiB,UCA7BI,GAAaJ,GAAiB,WCA9BK,GAAWL,GAAiB,SCA5BM,GAAaN,GAAiB,WCU9B,MAAAO,GAAkBpK,MAAOtB,EAAQU,EAAUC,EAAUC,KACjE,IAAKZ,EACJ,OAED,MAAMqF,EAAaE,EAAKvF,GAUxB,OATIO,EAASI,SACNY,EAAe8D,GAAY,CAAC6B,EAAKpG,EAAOmD,EAAO0H,IAC7CjL,EAASK,KAAKJ,EAAUX,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAetG,EAAYzE,WAG/EW,EAAe8D,GAAY,CAAC6B,EAAKpG,EAAOmD,EAAO0H,IAC7CjL,EAASV,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAetG,EAAYzE,KAGhEZ,CAAM,EChBP,SAAS4L,GAAW5L,EAAQU,EAAUC,EAAUC,GACtD,IAAKZ,EACJ,OAED,MAAMqF,EAAaE,EAAKvF,GAUxB,OATIO,EAASI,GACZF,EAAU4E,GAAY,CAAC6B,EAAKpG,EAAO+K,EAAiBF,KACnDjL,EAASK,KAAKJ,EAAUX,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAeE,EAAiBjL,EAAc,IAGjGH,EAAU4E,GAAY,CAAC6B,EAAKpG,EAAO+K,EAAiBF,KACnDjL,EAASV,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAeE,EAAiBjL,EAAc,IAG5EZ,CACR,CCrBY,MAAC8L,GAAY1F,EAAyB,OACrC2F,GAAQ1F,EAAcyF,ICf5B,SAASE,GAAMhM,EAAQU,GAC7B,GAAIqL,GAAM/L,GAAS,CAClB,IAAK,MAAM0I,KAAS1I,EACnBU,EAASgI,EAAO1I,GAEjB,OAAOA,CACP,CACD,IAAK,MAAOkH,EAAKwB,KAAU1I,EAC1BU,EAASgI,EAAOxB,EAAKlH,GAEtB,OAAOA,CACR,CCGY,MAACiM,GAAkB7F,EAAyB,qBAC3C8F,GAAc7F,EAAc4F,ICdlC3K,eAAe6K,GAAWnM,EAAQU,EAAU0L,GAClD,GAAIL,GAAM/L,GAAS,CAClB,IAAK,MAAM0I,KAAS1I,QACbU,EAASgI,EAAO1I,GAEvB,OAAOA,CACP,CACD,GAAIkM,GAAYlM,GACf,UAAW,MAAMkB,KAAQlB,KAAUoM,SAC5B1L,EAASQ,EAAMlB,GAGvB,IAAK,MAAOkH,EAAKwB,KAAU1I,QACpBU,EAASgI,EAAOxB,EAAKlH,GAE5B,OAAOA,CACR,CCJY,MAACqM,GAAcjG,EAAyB,iBACvCkG,GAAUjG,EAAcgG,ICT9B,SAASE,GAAaC,EAAWC,EAAgBC,EAAYC,EAAiBC,EAAWC,GAC/F,MAAO,CAAC7M,EAAQU,EAAUoM,EAAWC,EAAWC,KAC/C,IAAI5L,EACJ,MAAM6L,EAAkBX,GAAQ5L,GAChC,GAAKH,EAASP,IAAYU,EAa1B,OAVCU,EADUgB,EAAQpC,GACP,EAAoByM,EAAiBD,EACtC7F,EAAc3G,IAAWoJ,GAAWpJ,GACnC,EAAoB2M,EAAkBD,EACvCE,EACC,EAAoBC,EAAiBD,EACtCV,GAAYlM,GACX6M,EAEA,EAAoBF,EAAkBD,EAE3CtL,EAASpB,EAAQU,EAAUoM,EAAWC,EAAWC,EAAU,CAEpE,CCIY,MAACE,GAAOX,GAAa9L,EAAWc,EAAgBqK,GAAYF,GAAiBM,GAAOG,ICvBzF,MAAMgB,GACZ,WAAAnH,CAAYoH,GACXC,KAAKC,eAAeF,EACpB,CACD,cAAAE,CAAeF,GACd,MAAMG,EAAYF,KAClBH,GAAKE,GAAS,CAAC9G,EAAQkH,KACtBD,EAAUC,GAAc,YAAY5K,GAEnC,OADAyK,KAAK3E,MAAQpC,EAAOvF,KAAKwM,EAAWA,EAAU7E,SAAU9F,GACjD2K,CACX,CAAI,GAEF,CACD,QAAAE,CAAS/E,GAER,OADA2E,KAAK3E,MAAQA,EACN2E,IACP,CACD,IAAAK,GACC,MAAMhF,EAAQ2E,KAAK3E,MAEnB,OADA2E,KAAK3E,MAAQ,KACNA,CACP,CACDA,MAAQ,KCTF,SAASiF,GAAY3N,EAAQU,GACnC,IAAKV,EACJ,OAGD,OAAOwE,EADYe,EAAKvF,IACM,CAACkH,EAAKpG,EAAO8M,EAAUjC,IAC7CjL,EAASV,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAeiC,IAE3D,CCdO,SAASC,KAEhB,CCFa,MCAAC,IAAQ,ECOd,SAASC,GAAM7J,EAAQxD,GAC7B,IAAK,IAAII,EAAQ,EAAGA,EAAQoD,EAAQpD,IACnCJ,EAASI,EAEX,CCXa,MCAAkN,IAAQ,ECRd,MAAMC,GACZC,KAAO1L,EAAUc,KACjB,SAAAd,GACC,CAYD,MAAA2L,CAAOC,GACNC,aAAaD,GACbf,KAAKa,KAAKI,OAAOF,EACjB,CACD,GAAAG,CAAIH,GACH,OAAOf,KAAKa,KAAKK,IAAIH,EACrB,CACD,GAAAvK,CAAIuK,GACH,OAAOf,KAAKa,KAAKrK,IAAIuK,EACrB,CAcD,GAAArK,CAAIyK,EAAUC,GACb,MAAMC,EAAcrB,KACde,EAAKO,YAAW,KACrBH,IACAE,EAAYP,OAAOC,EAAG,GACpBK,GAEH,OADApB,KAAKa,KAAKnK,IAAIqK,EAAIJ,IACXI,CACP,CAWD,KAAAQ,GACC,MAAMF,EAAcrB,KACpBqB,EAAYR,KAAKjL,SAASmL,IACzBM,EAAYP,OAAOC,EAAG,GAEvB,EAEU,MAACS,GAASrM,EAAUyL,IAgBzB,SAASa,GAAMN,EAAUC,GAC/B,OAAOI,GAAO9K,IAAIyK,EAAUC,EAC7B,CCvFA,MAAMM,GAAcxM,QAAQyM,MAiBrB,SAASA,GAAMvM,EAAQwM,EAAcvM,GAC3C,GAAI0G,GAAW3G,GACd,OAAOsM,GAAYtM,EAAQwM,EAAcvM,EAE3C,CCTO,SAASwM,GAAQlP,GACvB,OAAOA,GAAQgG,WAChB,CCAO,SAASmJ,GAAUnP,EAAQ4C,EAAO,IACxC,MAAMwM,EAAaF,GAAQlP,GAC3B,OAAIoP,IAAe/F,UACM,aAApB+F,EAAWjJ,KACP,WAAW,EAGb3D,EAAU4M,EAAYxM,EAC9B,CCEO,SAASyM,GAASrP,EAAQU,EAAWF,EAAa8O,GACxD,MAAMrO,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,CAE3ByP,EADe/O,EAASgI,EAAOzH,EAASjB,GAExC,CACD,OAAOiB,CACP,CACD,MAAM0O,EAAYvG,GAAWnI,EAAQ8C,KACrC,IAAK,MAAOmD,EAAKwB,KAAU1I,EAAQ,CAClC,MAAMyB,EAASf,EAASgI,EAAOxB,EAAKjG,EAASjB,GACzC2P,EACH1O,EAAQ8C,IAAImD,EAAKzF,GAEjBR,EAAQiG,GAAOzF,CAEhB,CACD,OAAOR,CACR,CCrBOK,eAAesO,GAAc5P,EAAQU,EAAWF,EAAa8O,EAAelD,GAClF,GAAIF,GAAYlM,GAAS,CACxB,MAAM6P,EAAmB,GACzB,UAAW,MAAM3O,KAAQlB,KAAUoM,GAClCyD,EAAiBxO,WAAWX,EAASQ,EAAM2O,EAAkB7P,IAE9D,OAAO6P,CACP,CACD,MAAM5O,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,CAE3ByP,QADqB/O,EAASgI,EAAOzH,EAASjB,GAE9C,CACD,OAAOiB,CACP,CACD,MAAM0O,EAAYvG,GAAWnI,EAAQ8C,KACrC,UAAW,MAAOmD,EAAKwB,KAAU1I,EAAQ,CACxC,MAAMyB,QAAef,EAASgI,EAAOxB,EAAKjG,EAASjB,GAC/C2P,EACH1O,EAAQ8C,IAAImD,EAAKzF,GAEjBR,EAAQiG,GAAOzF,CAEhB,CACD,OAAOR,CACR,CCjCOK,eAAewO,GAAe9P,EAAQU,EAAUO,EAAU,CAAA,GAChE,GAAKjB,EAML,aAHM0L,GAAgB1L,GAAQsB,MAAOJ,EAAMgG,EAAK6I,EAAYpE,EAAetG,KAC1EpE,EAAQiG,SAAaxG,EAASQ,EAAMgG,EAAKjG,EAAS8O,EAAYpE,EAAetG,EAAW,IAElFpE,CACR,CCLO,SAAS+O,GAAUhQ,EAAQU,EAAUO,EAAU,CAAE,EAAEN,EAAUC,GACnE,GAAKZ,EAYL,OATIO,EAASI,GACZiL,GAAW5L,GAAQ,CAACkB,EAAMgG,EAAK0G,EAAUjC,EAAetG,KACvDpE,EAAQiG,GAAOxG,EAASK,KAAKJ,EAAUO,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,EAAYzE,EAAc,IAG/GgL,GAAW5L,GAAQ,CAACkB,EAAMgG,EAAK0G,EAAUjC,EAAetG,KACvDpE,EAAQiG,GAAOxG,EAASQ,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,EAAYzE,EAAc,IAG1FK,CACR,CCVY,MAACgP,GAAM1D,GAAalF,EAAUI,EAAeuI,GAAWF,GAAgBT,GAAUO,ICNvFtO,eAAe4O,GAAiBlQ,EAAQU,GAC9C,IAAKV,EACJ,OAGD,OAAO0E,EADYa,EAAKvF,IACW,CAACkH,EAAKpG,EAAO8M,EAAUjC,IAClDjL,EAASV,EAAOkH,GAAMA,EAAKlH,EAAQ2L,EAAeiC,IAE3D,CCPO,SAASuC,GAAWnQ,EAAQU,EAAWF,GAC7C,GAAI4B,EAAQpC,IAAW+L,GAAM/L,GAC5B,IAAK,MAAM0I,KAAS1I,EAAQ,CAE3B,IAAe,IADAU,EAASgI,EAAO1I,GAE9B,OAAO,CAER,MAED,IAAK,MAAOkH,EAAKwB,KAAU1I,EAAQ,CAElC,IAAe,IADAU,EAASgI,EAAOxB,EAAKlH,GAEnC,OAAO,CAER,CAEF,OAAO,CACR,CChBOsB,eAAe8O,GAAgBpQ,EAAQU,EAAWF,EAAa4L,GACrE,GAAIF,GAAYlM,GACf,UAAW,MAAMkB,KAAQlB,KAAUoM,GAAgB,CAElD,IAAe,UADM1L,EAASQ,EAAMlB,GAEnC,OAAO,CAER,MACK,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GACnC,IAAK,MAAM0I,KAAS1I,EAAQ,CAE3B,IAAe,UADMU,EAASgI,EAAO1I,GAEpC,OAAO,CAER,MAED,IAAK,MAAOkH,EAAKwB,KAAU1I,EAAQ,CAElC,IAAe,UADMU,EAASgI,EAAOxB,EAAKlH,GAEzC,OAAO,CAER,CAEF,OAAO,CACR,CCvBY,MAACqQ,GAAQ9D,GAAa/H,EAAYE,EAAiBiJ,GAAauC,GAAkBC,GAAYC,ICvB1G,MAAME,GAAoBjH,SAASS,UAc5B,SAASyG,GAAkBjK,GACjC,OAAOgK,GAAkBvP,KAAK2O,KAAKpJ,EACpC,CCHY,MAACkK,GAAelL,OAAOmL,oBActBC,GAAcpL,OAAOqL,yBAoBrBC,GAAUtL,OAAOuL,eACjBC,GAAUP,GAAkBjL,OAAOyL,gBClCnCC,GAAS1L,OAAO2L,GCd7B,MAAMlJ,OAAEA,IAAWpG,KCanB,MAAMD,KAAEA,IAASC,KCZL,MAACuP,GAAgB5L,OAAO6L,QCoB7B7P,eAAe8P,GAAsBpR,EAAQU,EAAWF,EAAaS,EAAU,CAAA,GAOrF,aANMyK,GAAgB1L,GAAQsB,MAAOJ,EAAMgG,EAAK0G,EAAUjC,EAAetG,KACxE,MAAM5D,QAAef,EAASQ,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,GACvE9E,EAASkB,KACZR,EAAQiG,GAAOzF,EACf,IAEKR,CACR,CCPO,SAASoQ,GAAiBrR,EAAQU,EAAWF,EAAaS,EAAU,CAAA,GAO1E,OANA2K,GAAW5L,GAAQ,CAACkB,EAAMgG,EAAK0G,EAAUjC,EAAetG,KACvD,MAAM5D,EAASf,EAASQ,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,GACjE9E,EAASkB,KACZR,EAAQiG,GAAOzF,EACf,IAEKR,CACR,CCZO,SAASqQ,GAAatR,EAAQU,EAAUO,EAAU,CAAA,GAMxD,OALA2K,GAAW5L,GAAQ,CAACkB,EAAMgG,EAAK0G,EAAUjC,EAAetG,MACmB,IAAtE3E,EAASQ,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,KACzDpE,EAAQiG,GAAOhG,EACf,IAEKD,CACR,CCPOK,eAAeiQ,GAAkBvR,EAAQU,EAAUO,EAAU,CAAA,GAMnE,aALMyK,GAAgB1L,GAAQsB,MAAOJ,EAAMgG,EAAK0G,EAAUjC,EAAetG,MACQ,UAAtE3E,EAASQ,EAAMgG,EAAKjG,EAAS2M,EAAUjC,EAAetG,KAC/DpE,EAAQiG,GAAOhG,EACf,IAEKD,CACR,CCRY,MCJCuQ,GAAmB,4BACzB,SAASC,GAAYzR,GAC3B,OAAOA,EAAOiF,QAAQuM,GAAkB,OACzC,CCDO,SAASE,GAAa1R,EAAQ2R,GACpC,OAAIA,EACID,GAAarK,EAASrH,EAAQyR,KAE/BG,OAAO5R,EAAO6R,KAAK,KAC3B,CCNY,MAACC,GAAc1L,EAAyB,UACvC2L,GAAU1L,EAAcyL,ICC9B,SAASE,GAAWhS,GAC1B,IAAKA,EACJ,OAED,GAAI2G,EAAc3G,GACjB,OAAOuF,EAAKvF,GAAQC,OAErB,MAAMgS,EAAuBjS,EAAOC,OACpC,GAAIM,EAAS0R,GACZ,OAAOA,EAER,MAAMC,EAAqBlS,EAAOmS,KAClC,OAAI5R,EAAS0R,GACLC,EAED3M,EAAKvF,GAAQC,MACrB,CChBY,MAACmS,GAAY,CAAC1M,EAAY2M,KACrC,MAAMC,EAAc,CAAA,EAIpB,OAHA7R,EAAUiF,GAAY,CAACxE,EAAMgG,KAC5BoL,EAAYpR,GAAQmR,EAAOnL,EAAI,IAEzBoL,CAAW,ECrBbC,GAAgB,UCAtB,MAAMA,GAAgB,UAChBC,GAAQ,QCDd,MAAMD,GAAgB,UAChBC,GAAQ,QCDd,MAAMD,GAAgB,UCAtB,MAAMA,GAAgB,UCoFf,SAASE,GAAWC,EAAQ5R,EAAQ,GAC1C,OAAO4R,EAAOC,UAAU7R,EACzB,CCrFA,MAAM8R,GAAoB,oBACpBC,GAAW,KACXC,GAAgB,KAChBC,GAAgB,KAChBC,GAAmB,KAclB,SAASC,GAAaP,GAC5B,OAAOQ,mBAAmBR,EAAOzN,QAAQ2N,IAAmB,IACpD,QAET,CAcO,SAASO,GAAaT,GAC5B,OAAOA,EAAOzN,QAAQ4N,GAAU,SAC9B5N,QAAQ6N,GAAe,QACvB7N,QAAQ8N,GAAe,QACvB9N,QAAQ+N,GAAkB,SAC7B,CC1CA,MAAMI,GAAgB,OAChBC,GAAa,OCAnB,MAAMC,GAAW,OAcV,SAASC,GAAiBb,GAChC,OAAOA,EAAO,GAAGc,aAClB,CAgBO,SAASC,GAAWf,GAC1B,OAAOa,GAAiBb,GAAUD,GAAWC,EAC9C,CAcO,SAASgB,GAAehB,GAC9B,OAAOa,GAAiBb,GAAUD,GAAWC,GAAQiB,aACtD,CCtCO,SAASC,GAAY5T,GAC3B,OAAOkP,GAAQlP,IAASmG,IACzB,CCCY,MAAC0N,GAAYzN,EAAyB,OACrC0N,GAAQzN,EAAcwN,ICH7BE,GAAkB,QAClBC,GAAuB,QACtB,SAASC,GAAajU,GAC5B,GAAIA,EAAQ,CACX,MAAMkG,EAAkB0N,GAAY5T,GACpC,GAAI+T,GAAgB1I,KAAKnF,IAAoBA,IAAoB8N,GAChE,OAAO,CAER,CACD,OAAO,CACR,CCRO,SAASE,GAAQlU,GACvB,OAAQO,EAASP,EAClB,CCJY,MAACmU,GAAe/N,EAAyB,UACxCgO,GAAW/N,EAAc8N,ICAzBE,GAAgBjO,EAAyB,WACzCkO,GAAYjO,EAAcgO,ICF1BE,GAAoBnO,EAAyB,eAC7CoO,GAAgBnO,EAAckO,ICF3C,MAAME,GAAmB7C,OAAO,uKCCpB,MAAC8C,GAAatO,EAAyB,QACtCuO,GAAStO,EAAcqO,ICA7B,SAASE,GAAQ5U,GACvB,OAAkB,IAAXA,CACR,CCHY,MAAC6U,GAAYzO,EAAyB,gBACrC0O,GAAQzO,EAAcwO,ICAtBE,GAAY3O,EAAyB,gBACrC4O,GAAQ3O,EAAc0O,KChB7BE,UAAEA,IAAcC,OAcTC,GAAUF,GCCVG,GAAYhP,EAAyB,cACrCiP,GAAQhP,EAAc+O,ICFtBE,GAAYlP,EAAyB,cACrCmP,GAAQlP,EAAciP,ICAtBE,GAAWpP,EAAyB,aACpCqP,GAAOpP,EAAcmP,ICH3B,SAASE,GAAU1V,GACzB,QAAIA,GACIA,aAAkBuH,OAG3B,CCHO,SAASoO,GAAY3V,GAC3B,QAAIA,IACI0V,GAAU1V,IAAWsM,GAAQtM,IAAWkM,GAAYlM,GAG7D,CCpBA,MAAM4V,cAAEA,IAAkBV,OAcbW,GAAYD,GCCb,MAACE,GAAY1P,EAAyB,eACrC2P,GAAQ1P,EAAcyP,ICDtBE,GAAY5P,EAAyB,eACrC6P,GAAQ5P,EAAc2P,ICDtBE,GAAW9P,EAAyB,cACpC+P,GAAO9P,EAAc6P,ICDrBE,GAAYhQ,EAAyB,qBACrCiQ,GAAQhQ,EAAc+P,ICDtBE,GAAgBlQ,EAAyB,WACzCmQ,GAAYlQ,EAAciQ,IChB1BE,QAAoC,IAApBC,WAAWC,KCA3BC,QAAyC,IAAvBF,WAAWG,SAA2BA,QAAQC,UAAYD,QAAQC,SAASC,KCenG,SAASC,GAAS/W,EAAQgX,GAAe,GAC/C,OAAO3W,QAAQL,IAAWgX,CAC3B,CCDO,SAASC,GAASjX,EAAQyC,GAChC,OAAOmS,GAAQ7N,EAAQ/G,EAAQyC,GAChC,CClBA,MAAMyU,GAAaC,KAiCN,MAAAC,GAAYF,GAAWE,UC7BpC,SAASC,GAAkBrX,EAAQsX,EAAUC,GAC5C,MAAMC,EAAUf,WAAWe,SAAWD,EACtC,IAAIE,EAMJ,OALIrO,GAAWoO,GACdC,EAAa,GAAGD,EAAQrR,UAAUqR,EAAQxR,YAAYG,OAC5CqR,IACVC,EAAa,GAAGD,EAAQE,OAASF,EAAQlR,OAAOH,WAAWqR,EAAQG,QAE7D,IAAIC,MAAM,gBAAgBH,kBACtBL,GAAUpX,qBACRoX,GAAUE,KAAaE,EACrC,CACOlW,eAAeuW,GAAYC,EAAWR,EAAUE,GACtD,MAAMxX,QAAe8X,EAErB,QADyB1O,GAAWkO,KAAiD,UAA9BA,EAAStX,EAAQwX,MAChDP,GAASjX,EAAQsX,IACjCD,GAAkBrX,EAAQsX,EAAUE,EAG7C,CCVA,MAAMO,GAAsBtB,WAAWuB,gBCchC1W,eAAe2W,GAAqBjY,EAAQU,EAAWF,EAAa8O,EAAelD,GACzF,GAAIF,GAAYlM,GAAS,CACxB,MAAM6P,EAAmB,GACzB,UAAW,MAAM3O,KAAQlB,KAAUoM,GAAgB,CAClD,MAAM3K,QAAef,EAASQ,EAAM2O,EAAkB7P,GAClDO,EAASkB,IACZoO,EAAiBxO,KAAKI,EAEvB,CACD,OAAOoO,CACP,CACD,MAAM5O,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,CAC3B,MAAMyB,QAAef,EAASgI,EAAOzH,EAASjB,GAC1CO,EAASkB,IACZgO,EAAgBhO,EAEjB,CACD,OAAOR,CACP,CACD,MAAM0O,EAAYvG,GAAWnI,EAAQ8C,KACrC,UAAW,MAAOmD,EAAKwB,KAAU1I,EAAQ,CACxC,MAAMyB,QAAef,EAASgI,EAAOxB,EAAKjG,EAASjB,GAC/CO,EAASkB,KACRkO,EACH1O,EAAQ8C,IAAImD,EAAKzF,GAEjBR,EAAQiG,GAAOzF,EAGjB,CACD,OAAOR,CACR,CCnCO,SAASiX,GAAgBlY,EAAQU,EAAWF,EAAa8O,GAC/D,MAAMrO,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,CAC3B,MAAMyB,EAASf,EAASgI,EAAOzH,EAASjB,GACpCO,EAASkB,IACZgO,EAAgBhO,EAEjB,CACD,OAAOR,CACP,CACD,MAAM0O,EAAYvG,GAAWnI,EAAQ8C,KACrC,IAAK,MAAOmD,EAAKwB,KAAU1I,EAAQ,CAClC,MAAMyB,EAASf,EAASgI,EAAOxB,EAAKjG,EAASjB,GACzCO,EAASkB,KACRkO,EACH1O,EAAQ8C,IAAImD,EAAKzF,GAEjBR,EAAQiG,GAAOzF,EAGjB,CACD,OAAOR,CACR,CC5BY,MAACkX,GAAa5L,GAAavL,EAAiBQ,EACvD6P,GAAkBD,GAAuB8G,GAAiBD,ICCpD,SAASG,GAAYpY,EAAQU,EAAWF,EAAa8O,GAC3D,MAAMrO,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,EAEZ,IADAU,EAASgI,EAAOzH,EAASjB,IAEvCyP,EAAgB/G,EAEjB,CACH,KAAQ,CACN,MAAMiH,EAAYvG,GAAWnI,EAAQ8C,KACrC,IAAK,MAAOmD,EAAKwB,KAAU1I,EAAQ,EAEnB,IADAU,EAASgI,EAAOxB,EAAKjG,EAASjB,KAExC2P,EACH1O,EAAQ8C,IAAImD,EAAKwB,GAEjBzH,EAAQiG,GAAOwB,EAGjB,CACD,CACD,OAAOzH,CACR,CCxBOK,eAAe+W,GAAiBrY,EAAQU,EAAWF,EAAa8O,EAAelD,GACrF,GAAIF,GAAYlM,GAAS,CACxB,MAAM6P,EAAmB,GACzB,UAAW,MAAM3O,KAAQlB,KAAUoM,IACqB,UAA7C1L,EAASQ,EAAM2O,EAAkB7P,IAC1C6P,EAAiBxO,KAAKH,GAGxB,OAAO2O,CACP,CACD,MAAM5O,EAAUqO,GAAiBH,GAAUnP,GAC3C,GAAIoC,EAAQpC,IAAW+L,GAAM/L,GAAS,CACrC,MAAMuP,EAAatO,EAAQI,MAAQJ,EAAQuO,IACrCC,EAAkBF,GAAcA,EAAWG,KAAKzO,GACtD,IAAK,MAAMyH,KAAS1I,EAAQ,EAEZ,UADMU,EAASgI,EAAOzH,EAASjB,IAE7CyP,EAAgB/G,EAEjB,CACH,KAAQ,CACN,MAAMiH,EAAYvG,GAAWnI,EAAQ8C,KACrC,UAAW,MAAOmD,EAAKwB,KAAU1I,EAAQ,EAEzB,UADMU,EAASgI,EAAOxB,EAAKjG,EAASjB,KAE9C2P,EACH1O,EAAQ8C,IAAImD,EAAKwB,GAEjBzH,EAAQiG,GAAOwB,EAGjB,CACD,CACD,OAAOzH,CACR,CCrCY,MAACgI,GAASsD,GAAa5H,EAAaC,EAAkB0M,GAAcC,GAAmB6G,GAAaC,ICtBhH,SAASC,GAAW9J,GACnB,MAAO,IAAIpB,IACFmL,IACP,IAAI7P,EAAQ6P,EAIZ,OAHA/J,EAASpB,GAAUlM,IAClBwH,EAAQxH,EAAKwH,EAAM,IAEbA,CAAK,CAGf,CAcY,MAAC8P,GAAOF,GAAW7X,GAclBgY,GAAYH,GAAWjU,GCtCpC,SAASiU,GAAW9J,GACnB,MAAO,IAAIpB,IACH9L,MAAOiX,IACb,IAAI7P,EAAQ6P,EAIZ,aAHM/J,EAASpB,GAAS9L,MAAOJ,IAC9BwH,QAAcxH,EAAKwH,EAAM,IAEnBA,CAAK,CAGf,CAeY,MAACgQ,GAAYJ,GAAW/W,GAevBoX,GAAiBL,GAAW/T,GC7B7B,MAACqU,GAASzN,GAAiB,MCRhC,MAAM0N,GACZ3K,KAAO1L,EAAUc,KACjB,SAAAd,GACC,CAWD,MAAA2L,CAAOC,GACN0K,cAAc1K,GACdf,KAAKa,KAAKI,OAAOF,EACjB,CACD,GAAAG,CAAIH,GACH,OAAOf,KAAKa,KAAKK,IAAIH,EACrB,CACD,GAAAvK,CAAIuK,GACH,OAAOf,KAAKa,KAAKrK,IAAIuK,EACrB,CAaD,GAAArK,CAAIyK,EAAUC,GAEb,MAAML,EAAK2K,aAAY,KACtBvK,GAAU,GACRC,GAEH,OADApB,KAAKa,KAAKnK,IAAIqK,EAAIJ,IACXI,CACP,CAUD,KAAAQ,GACC,MAAMF,EAAcrB,KACpBqB,EAAYR,KAAKjL,SAASmL,IACzBM,EAAYP,OAAOC,EAAG,GAEvB,EAEU,MAAC4K,GAAYxW,EAAUqW,IC9C5B,SAASI,GAAQjZ,GACvB,OAAQO,EAASP,GAAWiZ,GAAQjZ,GAAUuF,EAAK0T,GACpD,CACA,MAAMC,GAAYzC,WAAW0C,WAAWC,cACxC,GAAIF,GACHtN,GAAWsN,IAAW,CAACxQ,EAAOxB,KACzBoN,GAAU5L,IAAUA,IACvBuQ,GAAQ/R,GAAOwB,EACf,IAEFjI,EAAUyY,GAAUG,QAAS3Q,IAC5BuQ,GAAQvQ,EAAM4Q,OAAS5Q,EAAM6Q,OAAO,SAE/B,GAAIJ,UAAUD,UAAW,CAC/B,IAAIM,EAAsBL,UAAUD,UAAUvF,cAC9C6F,EAAsBA,EAAoBvU,QAAQ,KAAM,KACxDuU,EAAsBA,EAAoBvU,QAAQ,YAAa,IAE/DxE,EADuB+Y,EAAoBtU,MAAM,SACtBhE,IAC1B+X,GAAQ/X,IAAQ,CAAI,GAEtB,CCpBO,MAAMuY,GACZC,cAAgB,IAAIpW,IACpB,WAAA0C,CAAY2T,EAAWC,GAClBrZ,EAASqZ,IACZjQ,GAAO0D,KAAMuM,GACbvM,KAAKsM,UAAYA,EACjBF,GAAMI,OAAO9V,IAAI4V,EAAWC,IAE5BjQ,GAAO0D,KAAMsM,EAEd,CACD,OAAOA,GACNF,GAAMI,OAAOvL,OAAOqL,GAAatM,KAAKsM,UACtC,CACD,GAAA5V,CAAI4V,GACCA,IACHtM,KAAKsM,UAAYA,GAElBF,GAAMI,OAAO9V,IAAI4V,GAAatM,KAAKsM,UAAWtM,KAC9C,CACD,GAAAkB,CAAIoL,GACH,OAAOF,GAAMI,OAAOtL,IAAIoL,GAAatM,KAAKsM,UAC1C,CACD,GAAA9V,CAAI8V,GACH,OAAOF,GAAMI,OAAOhW,IAAI8V,GAAatM,KAAKsM,UAC1C,EChCK,SAASG,GAAQ5W,GACvB,OAAO,IAAIqE,QAAQrE,EACpB,CCdO,MAAM6W,GACZ/Z,OACA,WAAAgG,CAAYhG,EAAS,IAEpB,GADAqN,KAAKrN,OAASA,EACC,OAAXA,GAAqC,iBAAXA,EAC7B,OAAOA,EAER4L,GAAW5L,GAASga,IACnBha,EAAOga,GAAY,IAAID,GAAM/Z,EAAOga,GAAU,IAE/C3M,KAAK4M,KAAO,IAAIC,MAAMla,EAAQ,CAC7B6D,IAAG,CAACsW,EAAaH,KAChBI,QAAQC,IAAIF,EAAaH,EAAUG,EAAYH,IACxCG,EAAYH,IAEpBjW,IAAG,CAACoW,EAAaH,EAAUtR,KAC1B0R,QAAQC,IAAIF,EAAaH,EAAUG,EAAYH,IAC/CG,EAAYH,GAAY,IAAID,GAAMrR,IAC3B,IAGT,ECCK,MAAM4R,GACZC,YAAc,EACdC,MAAQ,GACRC,UAAY,EAeZ,GAAA5W,GACC,IAAIpC,EAAS4L,KAAKmN,MAAME,QAOxB,OANIna,EAASkB,GACZ4L,KAAKoN,aAELhZ,EAAS4L,KAAKkN,YACdlN,KAAKkN,eAEC9Y,CACP,CAkBD,IAAAkZ,CAAKvM,GACJf,KAAKmN,MAAMnZ,KAAK+M,GAChBf,KAAKoN,YACL,MAAMG,EAAWvN,KAAKkN,YAAc,EAC9BM,EAAcxN,KAAKkN,cAAgBlN,KAAKoN,UAC1CG,GAAYC,GACfxN,KAAKyN,OAEN,CACD,KAAAA,GACCzN,KAAKkN,YAAc,EACnBlN,KAAKmN,MAAMva,OAAS,EACpBoN,KAAKoN,UAAY,CACjB,EAeU,MAACM,GAASvY,EAAU8X,ICjFzB,MAAMU,GACZ,WAAAhV,CAAYiV,EAAgB,IAAI3X,KAC/B+J,KAAK6N,MAAQD,CACb,CAcD,OAAAE,CAAQjU,GACP,OAAImG,KAAKyG,MACDzG,KAAK6N,MAAMrX,IAAIqD,GAEfmG,KAAK6N,MAAMhU,EAEnB,CACD,GAAArD,IAAOjB,GACN,OAAOyK,KAAK8N,WAAWvY,EACvB,CACD,OAAAwY,CAAQlU,GACP,OAAImG,KAAKyG,MACDzG,KAAK6N,MAAM3M,IAAIrH,GAEf3G,EAAS8M,KAAK6N,MAAMhU,GAE5B,CACD,GAAAqH,IAAO3L,GACN,OAAOyK,KAAK+N,WAAWxY,EACvB,CAcD,OAAAyY,CAAQnU,EAAKwB,GAMZ,OALI2E,KAAKyG,MACRzG,KAAK6N,MAAMnX,IAAImD,EAAKwB,GAEpB2E,KAAK6N,MAAMhU,GAAOwB,EAEZ2E,IACP,CACD,GAAAtJ,IAAOnB,GACN,OAAOyK,KAAKgO,WAAWzY,EACvB,CAcD,KAAAgM,GAMC,OALIvB,KAAKyG,MACRzG,KAAK6N,MAAMtM,QAEXvB,KAAK6N,MAAQ/L,GAAU9B,KAAK6N,OAEtB7N,IACP,CAeD,UAAAiO,CAAWpU,GAMV,OALImG,KAAKyG,MACRzG,KAAK6N,MAAM5M,OAAOpH,GAElBmG,KAAK6N,MAAMhU,GAAO,KAEZmG,IACP,CACD,MAAAc,IAAUvL,GACT,OAAOyK,KAAKiO,cAAc1Y,EAC1B,EAiBK,SAAS2Y,GAAeN,GAC9B,OAAO,IAAID,GAAeC,EAC3B,CC5HO,SAASO,GAAS1E,EAAM2E,EAAWvY,EAAUwY,GAEnD,OADA5E,EAAK6E,iBAAiBF,EAAWvY,EAAUwY,GACpC5E,CACR,CCVa,MAAA8E,GAAiBC,SAASC,uBAAuBpM,KAAKmM,UCG5D,SAASE,GAAOC,EAAYtY,GAElC,OADAsY,EAAWC,YAAYvY,GAChBA,CACR,CCIO,SAASwY,GAAcpF,EAAMqF,GACnC,OAAI/Z,EAAQ+Z,GACJ/J,GAAU+J,EAAQ9U,EAAS8U,GAASjb,GACnC4V,EAAKsF,aAAalb,OAG3B0K,GAAWuQ,GAAQ,CAACjb,EAAMgG,KACzB4P,EAAKuF,aAAanV,EAAKhG,EAAK,IAEtB4V,EACR,CC5BA,MAEMwF,GAAY,aACZC,GAAU,cACVC,GAAa,KASNC,GAAaZ,SAASa,uBAAuBhN,KAAKmM,UASlDc,GAAWd,SAASe,qBAAqBlN,KAAKmM,UAS9CgB,GAAUhB,SAASiB,eAAepN,KAAKmM,UASvCkB,GAAgBlB,SAASkB,cAAcrN,KAAKmM,UAS5CmB,GAAmBnB,SAASmB,iBAAiBtN,KAAKmM,UC5C/D,MAAMoB,GAAqBpB,SAASqB,cAAcxN,KAAKmM,UAuBhD,SAASsB,GAASC,GACxB,MAAMC,EAAMzE,GAAOwE,IAAQA,GAAO,GAAGA,OAKrC,MA5B+B,CAACtG,GACzBgD,IAASwD,IACf9B,GAAS1E,EAAM,OAAQwG,GAAQ,GAC/B9B,GAAS1E,EAAM,QAASwG,GAAQ,GAChCvB,GAAOgB,GAAc,QAASjG,EAAK,IAwB7ByG,CAJMrB,GAAce,GAAmB,UAAW,CACxD3b,MAAO,GACP+b,QAGF,CCnBO,SAASG,GAAgBhP,GAC/B,MAAMiP,EAAQ5B,SAAS6B,WAEvB,MAD8B,gBAAVD,GAAqC,cAAVA,GAAmC,aAAVA,GAEhE,GAAajP,KAEjBA,GACHgN,GAASK,SAAU,mBAAoBrN,IAEjC,EACR,CACAgP,IAAgB,KACf,MAAMG,EAAYd,GAAQ,WAE1BM,GADoBQ,GAAaA,EAAUvB,aAAa,eAAkB,SACtD,IC/BrB,MAAMwB,GAAWC,SAASD,SACpBE,GAA+B,UAAbF,GAAwB,KAAO,MACjDG,GAAWF,SAASE,SAUbC,GAAO,CACnBC,SAAU,CACTC,MAAO/E,UAAUgF,qBAElBC,KAAM,CACLjY,KAAM4X,GACNH,YACAE,oBCfK,SAASO,KACf1U,GAAOqU,GAAM,CACZM,WAAYzC,SAAS0C,KAAKC,aAC1BC,UAAW5C,SAAS0C,KAAKG,YACzBC,aAAcC,OAAOC,YACrBC,YAAaF,OAAOG,YAEtB,CAaO,SAASC,KACfX,IACD,CACAb,GAAgBwB,IAChBxD,GAASoD,OAAQ,OAAQI,IAAkB,GAC3CxD,GAASoD,OAAQ,SAAUI,IAAkB,GCpBzBC,EAAAC,cAAA,EACpB,SAAoBC,GACnB,IACCA,IAAa7D,WAAW,WACxB4D,EAAAA,UAAW,CACX,CAAC,MAAOE,GACRF,EAAAA,UAAW,CACX,CACF,CACAG,EAAW,IACHC,eAkBD,MAAMC,GACZ,WAAAvZ,CAAYiV,GACP5N,KAAK6R,WACR7R,KAAKmS,MAAQF,cAEdjS,KAAKoS,QAAUlE,GAAeN,EAC9B,CACDiE,SAAWA,EAAAA,SAiBX,OAAA7D,CAAQnU,EAAKwB,GAIZ,OAHI2E,KAAK6R,UACR7R,KAAKmS,MAAMnE,QAAQnU,EAAMsC,GAASd,GAAUA,EAAQ0O,GAAU1O,IAExD2E,KAAKoS,QAAQpE,QAAQnU,EAAKwB,EACjC,CAgBD,OAAAyS,CAAQjU,GACP,MAAMhG,EAAOmM,KAAKoS,QAAQtE,QAAQjU,GAClC,OAAI3G,EAASW,GACLA,GAEHX,EAASW,IAASmM,KAAK6R,SACpB7R,KAAKmS,MAAMrE,QAAQjU,QAD3B,CAGA,CAiBD,KAAA0H,GACKvB,KAAK6R,UACR7R,KAAKmS,MAAM5Q,QAEZvB,KAAKoS,QAAQ7Q,OACb,CAkBD,UAAA0M,CAAWpU,GACNmG,KAAK6R,UACR7R,KAAKmS,MAAMlE,WAAWpU,GAEvBmG,KAAKoS,QAAQnE,WAAWpU,EACxB,ECrIF,MAAMwY,GAAgB,CAACC,EAAOC,IACtB,SAASD,gBAAoBC,KAExBC,GAAS,CACrBC,MAAOJ,GAAc,OAAQ,WAC7BK,UAAWL,GAAc,OAAQ,WACjCM,OAAQN,GAAc,OAAQ,WAC9BO,QAASP,GAAc,OAAQ,kICKzB,SAAaQ,EAAQC,GAC3B,OAAOD,EAASC,CACjB,UCAO,SAAejc,EAAQsK,GAC7B,IACI9F,EADA0X,EAAQlc,EAYZ,MAVkB,IAAItB,KACP,OAAVwd,GACHA,IAEGA,GAAS,IACZ1X,EAAQ8F,KAAY5L,GACpBwd,EAAQ,MAEF1X,EAGT,4DCfO,SAAwB1I,EAAQ0F,GACtC,MAAM2a,EAAe,CAAA,EAIrB,OAHA5f,EAAUT,GAAQ,CAACkB,EAAMgG,KACxBmZ,EAAa3a,EAAWwB,IAAQhG,CAAI,IAE9Bmf,CACR,QCPO,SAAa7R,EAAUtK,GAC7B,MAAO,IAAItB,IACH4L,KAAY5L,EAAKwB,OAAO,EAAGF,GAEpC,WhCuBO,SAAgBlE,EAAQsX,EAAUE,GACxC,OAAI7B,GAAY3V,IAAW2V,GAAY2B,GAC/BO,GAAY7X,EAAQsX,EAAUE,KAEbpO,GAAWkO,KAA2C,IAA9BA,EAAStX,EAAQwX,MAC1CP,GAASjX,EAAQsX,IACjCD,GAAkBrX,EAAQsX,EAAUE,EAG7C,+EiCnCO,SAAgBtT,EAAQsK,GAC9B,IACI9F,EADA0X,EAAQlc,EAaZ,MAXmB,IAAItB,KACR,OAAVwd,GACHA,IAEGA,GAAS,EACZ1X,EAAQ8F,KAAY5L,GAEpBwd,EAAQ,KAEF1X,EAGT,YCVO,SAAiBkC,EAAY0V,EAAUC,GAC7C,MAAMtf,EAAUgP,GAAIrF,GAAa1J,GACzBkI,GAAWlI,GAAQA,EAAKwO,KAAK4Q,GAAYpf,IAEjD,OAAO,EAAiByI,GAAO4W,EAActf,GAAWA,CACzD,mBP4HO,SAAwBuf,GAC9B,OAAO,IAAIjB,GAAeiB,EAC3B,wCQzIO,SAAsBC,EAAOC,GACnC,OAAc,IAAVD,IAGkB,IAAlBC,EACI,EAEAA,EAAgBD,EAAS,IAClC,czERO,SAAmBzgB,GACzB,IAAIyB,EAAS,GAUb,OATAzB,EAAOiF,QAAQsN,GAAe,KAAK1L,OACjC3B,MAAM,KACNjC,SAAQ,CAAC/B,EAAMJ,KAEdW,GADa,IAAVX,EACOI,EAAKyS,cAELzS,EAAK,GAAGsS,cAAgBtS,EAAK4F,MAAM,GAAG6M,aAChD,IAEIlS,CACR,UrCsBO,SAAekf,GACrB,OAAOne,EAAU2K,GAAO,CAACwT,GAC1B,U+GpCO,SAAe1c,EAAOkO,EAAO,GACnC,MAAMyO,EAAU,GAChB,IAAI9f,EAAQ,EAUZ,OATAmD,EAAMhB,SAAQ,CAAC/B,EAAMgG,KACdA,EAAMiL,IACXyO,EAAQvf,KAAK,IACT6F,GACHpG,KAGF8f,EAAQ9f,GAAOO,KAAKH,EAAK,IAEnB0f,CACR,gBrEuBO,SAAqBlO,EAAQP,GACnC,OAAOO,EAAOmO,MAAM,IAAIjP,OAAO,gBAAgBO,KAAS,KACzD,UsEnCO,SAAenS,GACrB,GAAIA,EAAQ,CACX,GAAI0G,EAAS1G,GACZ,OAAOkJ,GAAYlJ,GACb,GAAIoC,EAAQpC,GAClB,OAAOD,EAAWC,GACRA,EAAO4O,MACjB5O,EAAO4O,QACG5O,EAAOC,SACjBD,EAAOC,OAAS,EAEjB,CACD,OAAOD,CACR,mD1BgEO,WAEN+N,GADWY,WAAWd,GAAM,IACjB/M,IACVkY,GAAU7K,OAAOrN,EAAM,GAEzB,gB9ECO,WAENiN,GADWY,WAAWd,GAAM,IACjB/M,IACV+N,GAAOV,OAAOrN,EAAM,GAEtB,UoE3FO,SAAed,GACrB,OAAO+X,GAAoB/X,EAC5B,eqCHO,SAAoBA,GAC1B,OAAOA,EAAO8G,OACf,wBVWoB,CAAC4B,EAAOoY,KAC3B,MAAM7G,EAAOzQ,GAASd,GAASA,EAAQ0O,GAAU1O,GACjD,GAAkB,UAAdoY,GAAuC,YAAdA,EAC5B,OAAO1G,QAAQ2G,MAAM,KAAK9G,IAAQ,GAAG4F,GAAOiB,uDAE7C1G,QAAQC,IAAI,KAAKJ,IAAQ,GAAG4F,GAAOiB,sDAA8D,cAiBzE,CAACA,EAAWnB,EAAOqB,KAC3CnB,GAAOiB,GAAapB,GAAcC,EAAOqB,EAAW,YWjC9C,SAAiBhhB,GACvB,GAAI2G,EAAc3G,GAAS,CAC1B,MAAMihB,EAAa1b,EAAKvF,GAClBkhB,EAAmBD,EAAWhhB,OAC9BkhB,EAAe,CAAA,EACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAkBE,IAAK,CAC1C,MAAMC,EAAUJ,EAAWG,GACrBlgB,EAAOlB,EAAOqhB,GACDtK,GAAS7V,KAE3BigB,EAAaE,GAAWngB,EAEzB,CACD,OAAOigB,CACP,CACD,OAAOnhB,EAAOiJ,QAAQ/H,GACd6V,GAAS7V,IAElB,gBClBO,SAAqBib,GAC3B,MAAMmF,EAAgB,GAMtB,OALA1V,GAAWuQ,GAAQ,CAACjb,EAAMgG,KACrB3G,EAASW,IACZogB,EAAcjgB,KAAK6F,EACnB,IAEKoa,CACR,6HCJOhgB,eAA0BtB,EAAQU,EAAU4D,GAClD,GAAKtE,EAGL,OAAIoC,EAAQpC,GACJsH,EAAgBtH,EAAQU,QADhC,CAID,yCCPO,SAA0BV,EAAQU,EAAU4D,GAClD,MAAMzD,EAAcb,EAAOC,OACrBshB,EAAQ,GACd,IAAK,IAAIzgB,EAAQ,EAAEA,EAAQD,EAAaC,IACvCygB,EAAMzgB,GAASJ,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,EAAayD,GAEpE,OAAOiD,QAAQia,WAAWD,EAC3B,8CCZO,SAAiB3W,EAAYlK,GACnC,MAAMyb,EAAS,CAAA,EACf,IAAI1a,EAQJ,OAPAhB,EAAUmK,GAAa1J,IACtBO,EAASf,EAASQ,GACbib,EAAO1a,KACX0a,EAAO1a,GAAU,GAElB0a,EAAO1a,IAAS,IAEV0a,CACR,aCZO,SAAkBvR,EAAYV,GACpC,IAAIpG,EAAQ,EAMZ,OALArD,EAAUmK,GAAa1J,IAClBA,EAAKgJ,IACRpG,GACA,IAEKA,CACR,oBCRO,SAAyB8G,EAAYV,GAC3C,IAAIpG,EAAQ,EAMZ,OALArD,EAAUmK,GAAa1J,IACjBA,EAAKgJ,IACTpG,GACA,IAEKA,CACR,8BCLO,SAAe0K,EAAUiT,EAAQjT,EAASvO,QAChD,MAAMyhB,EAAU,GACVC,EAAU,IAAIC,KAEnB,GADAF,EAAQrgB,QAAQugB,GACZF,EAAQzhB,SAAWwhB,EAAO,CAC7B,MAAMhgB,EAAS+M,KAAYkT,GAE3B,OADA3hB,EAAW2hB,GACJjgB,CACP,CACD,OAAOkgB,CAAO,EAEf,OAAOA,CACR,eCbO,SAAoBnT,EAAUiT,EAAQjT,EAASvO,QACrD,MAAMyhB,EAAU,GACVC,EAAU,IAAIC,KAEnB,GADAF,EAAQG,WAAWD,GACfF,EAAQzhB,SAAWwhB,EAAO,CAC7B,MAAMhgB,EAAS+M,KAAYkT,GAE3B,OADA3hB,EAAW2hB,GACJjgB,CACP,CACD,OAAOkgB,CAAO,EAEf,OAAOA,CACR,aCRO,SAAkBnT,EAAUC,GAClC,SAASqT,KAAalf,GACjBkf,EAAU1T,KAAON,IACpBe,GAAOV,OAAO2T,EAAU1T,IAEzB0T,EAAU1T,GAAKU,IAAM,KACpBgT,EAAUtT,YAAY5L,GACtBkf,EAAU1T,GAAKN,EAAK,GAClBW,EACH,CASD,OARAqT,EAAU1T,GAAKN,GACfgU,EAAUtT,SAAWA,EAASkB,KAAKoS,GACnCA,EAAUlT,MAAQ,KACbkT,EAAU1T,KAAON,KACpBe,GAAOV,OAAO2T,EAAU1T,IACxB0T,EAAU1T,GAAKN,GACf,EAEKgU,CACR,WCzBO,SAAgB9hB,GACtB,OAAOA,EAAS,CACjB,uCCHO,SAAgBA,EAAQ0I,GAC9B,OAAO1I,EAAS0I,CACjB,uBCCyB,CAACzE,EAAOC,EAAS,EAAGC,EAAOF,EAAMhE,SAClD+D,EAAKC,EAAO,EAAGE,EAAOD,mJCHvB,SAAsBlE,GAC5B,OAAQ0G,EAAS1G,IAAWA,GAAYO,EAASP,IAAW+hB,OAAO5Z,KAAKnI,IAAY+hB,OAAOC,MAAM,EAClG,qElCmBO,SAAqBlL,EAAM2E,EAAWvY,EAAUwY,GAEtD,OADA5E,EAAKmL,oBAAoBxG,EAAWvY,EAAUwY,GACvC5E,CACR,wBmCrCO,YAAqB1J,GAC3B,OAAId,GAAQc,EAAQ,IACZ9L,kBAAkBsB,GACxB,OAAOyN,GAAMjD,GAAS9L,MAAOgF,GACrB+J,GAAMzN,GAAMtB,MAAOJ,GAClBoF,EAAOpF,MAGnB,EAEQ,YAAY0B,GAClB,OAAOyN,GAAMjD,GAAU9G,GACf+J,GAAMzN,GAAO1B,GACZoF,EAAOpF,MAGlB,CACA,0FrJmBO,SAAqBuB,KAAWW,GACtC,MAAMqB,EAAerB,EAAQnD,OAC7B,IAAK,IAAIa,EAAQ,EAAGA,EAAQ2D,EAAc3D,IACzC+I,GAAcpH,EAAQW,EAAQtC,IAE/B,OAAO2B,CACR,mHsJ5BO,SAAmBmI,EAAYwD,EAAIlE,EAAe,MACxD,MAAMzI,EAASmJ,EAAWsX,WAAU,CAAClY,EAASlJ,IACtCiJ,GAAeC,EAASlJ,EAAO8J,EAAYwD,EAAIlE,KAEvD,OAAoB,IAAZzI,GAAyBA,CAClC,iCCLO,SAAkBmJ,EAAYwD,EAAIlE,EAAe,MACvD,MAAMzI,EAASmJ,EAAWuX,MAAK,CAACnY,EAASlJ,IACjCiJ,GAAeC,EAASlJ,EAAO8J,EAAYwD,EAAIlE,KAEvD,OAAoB,IAAZzI,GAAyBA,CAClC,UCPO,SAAewC,EAAOE,GAC5B,OAAO,EAASF,EAAM6C,MAAM,EAAG3C,GAAQF,EAAM,EAC9C,YCDO,SAAiBjE,EAAQoiB,EAAQ,GACvC,IAAKpiB,EACJ,OAED,IAAIiC,EAAcjC,EAClB,IAAK,IAAIohB,EAAI,EAAGA,EAAIgB,EAAOhB,IAC1Bnf,EAAcA,EAAYogB,QAAO,CAACC,EAAeC,IACzCD,EAAcE,OAAO3f,EAAY0f,KACtC,IAEJ,OAAOtgB,CACR,yGC1BOX,eAA4BtB,EAAQkD,GAC1C,MAAMmP,EAAS,GACT3M,EAAa,GACnB,IAAI+c,EAAe,EACnBziB,EAAOiD,SAAQ,CAAC/B,EAAMgG,KACrBmL,EAAOoQ,GAAgBvhB,EACvBwE,EAAW+c,GAAgBvhB,EAC3BuhB,GAAc,IAEf,IAAK,IAAI3hB,EAAQ,EAAGA,EAAQ2hB,EAAc3hB,UACnCoC,EAASmP,EAAOvR,GAAQ4E,EAAW5E,IAE1C,OAAOd,CACR,WCVO,SAAgBA,EAAQkD,GAC9B,MAAMwf,EAASvT,GAAUnP,GACnBsG,EAASoc,EAAOrhB,MAAQqhB,EAAOlT,IACrC,GAAIlJ,GAAU8C,GAAW9C,GAAS,CACjC,MAAMqc,EAAcrc,EAAOoJ,KAAKgT,GAChC1iB,EAAOiD,SAAS/B,IACf,MAAMO,EAASyB,EAAShC,EAAMwhB,GAC9BC,EAAYlhB,EAAO,GAEpB,MAAU2H,GAAWsZ,EAAO3e,KAC5B/D,EAAOiD,SAAQ,CAAC/B,EAAMgG,KACrB,MAAMzF,EAASyB,EAAShC,EAAMgG,EAAKwb,GACnCA,EAAO3e,IAAImD,EAAKzF,EAAO,IAGxBzB,EAAOiD,SAAQ,CAAC/B,EAAMgG,KACrB,MAAMzF,EAASyB,EAAShC,EAAMgG,EAAKwb,GACnCA,EAAOxb,GAAOzF,CAAM,IAGtB,OAAOihB,CACR,2Q5GVO,SAAoB1iB,GAC1B,GAAIO,EAASP,GACZ,OAAOkR,GAAclR,EAEvB,qB6GNO,SAA0BA,GAChC,GAAIA,EACH,OAAOA,EAAO2S,UAAU3S,EAAO4iB,YAAY,KAAO,EAEpD,gBCJO,SAAqB5iB,GAC3B,GAAIA,EACH,OAAOA,EAAO2S,UAAU3S,EAAO4iB,YAAY,KAAO,EAEpD,eCAO,SAAoBhY,EAAYV,EAAe,MACrD,OAAOS,GAAwBC,EAAYV,GAAc,EAC1D,cCDO,SAAmBU,EAAYV,GACrC,OAAOa,GAAyBH,EAAYV,GAAc,GAAO,EAClE,yBCJO,SAA8BlK,EAAQyC,GAC5C,IAAIogB,EAAc,EAUlB,OATAre,EAAWxE,GAAQ,CAACkB,EAAMJ,KACzB+hB,EAAc/hB,EACV2B,GAAUvB,IACb2hB,EAAc/hB,EAAQ,GACf,MAKF+hB,CACR,6ECVO,SAAiBjY,EAAYlK,GACnC,MAAM2f,EAAe,CAAA,EAQrB,OAPA5f,EAAUmK,GAAa1J,IACtB,MAAMD,EAAUP,EAASQ,GACpBmf,EAAapf,KACjBof,EAAapf,GAAW,IAEzBof,EAAapf,GAASI,KAAKH,EAAK,IAE1Bmf,CACR,QCHO,SAAS9R,EAAIvO,EAAQ8iB,EAAQ5gB,GACnC,OAAIgS,GAAQlU,KAAWkU,GAAQ4O,KAG3B9iB,IAAW8iB,IAGXtZ,GAASxJ,GACRwJ,GAASsZ,GACL9iB,EAAO+iB,SAASD,EAAQ5gB,GAE5B6P,GAAQ+Q,GACJA,EAAOzX,KAAKrL,GAEhBoJ,GAAW0Z,GACPA,EAAO9iB,GAEXoC,EAAQ0gB,GACJte,EAAWse,GAAS5hB,GACnBqN,EAAIvO,EAAQkB,KAGdmP,GAAMyS,GAAS5hB,GACdqN,EAAIvO,EAAQkB,KAGjBkB,EAAQpC,GACP+R,GAAQ+Q,GACJte,EAAWxE,GAASkB,GACnBA,EAAKmK,KAAKyX,KAGf1Z,GAAW0Z,GACPte,EAAWxE,EAAQ8iB,GAEvB1gB,EAAQ0gB,GACJte,EAAWse,GAAS5hB,GACnBqN,EAAIvO,EAAQkB,KAGdlB,EAAO+iB,SAASD,EAAQ5gB,KAE5ByE,EAAc3G,KACb+R,GAAQ+Q,GACJnV,GAAY3N,GAASkB,GACpBA,EAAKmK,KAAKyX,KAGf1Z,GAAW0Z,GACPnV,GAAY3N,EAAQ8iB,GAExBnc,EAAcmc,GACVnV,GAAY3N,GAAQ,CAACkB,EAAMgG,IAC1BhG,IAAS4hB,EAAO5b,KAGlByG,GAAY3N,GAASkB,GACpBqN,EAAIrN,EAAM4hB,OAIpB,exLjCO,SAAoB9iB,KAAW0F,GACrC,GAAK1F,EAGL,OAAOK,QAAQqF,EAAWyc,MAAMjhB,IAC/B,MAAMyE,EAAYX,EAAO9D,GACzB,GAAyB,IAArByE,EAAU1F,OACb,OAAOuF,EAAOxF,EAAQkB,GAChB,CACN,MAAM0E,EAAWD,EAAUE,MACrBC,EAAoBjC,EAAI8B,EAAW3F,GACzC,QAAI8F,GACIN,EAAOM,EAAmBF,EAGlC,KAEH,+FyLtDO,SAAkB4I,KAAa5L,GACrC,GAAIwG,GAAWoF,GACd,OAAOA,KAAY5L,EAErB,gBCH2B,CAACogB,EAAYhJ,EAAUiJ,KAC7CjJ,IAAazZ,EAASyiB,EAAWhJ,MACpCgJ,EAAWhJ,GAAYiJ,GAEjBD,aCDD,SAAiBhjB,EAAQyC,EAAQygB,EAAUtgB,GACjD,GAAIrC,EAASP,GAAS,CACrB,GAAIoJ,GAAW3G,GACd,OAAIygB,EACIlU,GAAMvM,EAAQygB,EAAUtgB,GAEzBH,KAAUG,GACX,GAAI+D,EAAclE,GAExB,OADAA,EAAOygB,GAAYljB,EACZyC,CAER,CACF,0BCTOnB,eAAuBtB,EAAQmjB,GACrC,MAAMtiB,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQ,EAAGA,EAAQD,EAAaC,IAAS,CACjD,MAAMwF,EAAStG,EAAOc,SAChBwF,EAAO6c,EAAeriB,EAAOd,EAAQa,EAC3C,CACD,OAAOb,CACR,WCZsB,CAAC4K,EAAYlC,IAC3BwE,GAAKtC,GAAa1J,IACxBA,EAAKwH,EAAM,gBCJN,SAAmB1I,GACzB,OAAOA,EAAS,CACjB,YCAO,SAAiB4K,EAAYV,EAAe,MAClD,MAAMmW,EAAe,CAAA,EAIrB,OAHA5f,EAAUmK,GAAa1J,IACtBmf,EAAanf,EAAKgJ,IAAiBhJ,CAAI,IAEjCmf,CACR,sBCVO,SAAiBpc,GACvB,OAAOA,EAAM6C,MAAM,EAAG7C,EAAMhE,OAAS,EACtC,kB3GoDO,SAAuByS,EAAQ5R,EAAQ,GAC7C,OAAO4R,EAAO5L,MAAM,GAAY,EAAThG,EACxB,kBAtDO,SAAuB4R,EAAQ5R,EAAOsiB,GAC5C,OAAO1Q,EAAO5L,MAAM,EAAGhG,GAASsiB,EAAO1Q,EAAO5L,MAAMhG,EAAO4R,EAAOzS,OACnE,iB4GAO,SAAsBgE,KAAUof,GACtC,OAAOriB,EAAgBiD,GAAQ/C,IAI9B,GAHqBsD,EAAW6e,GAASC,GACjCA,EAAUP,SAAS7hB,KAG1B,OAAOA,CACP,GAEH,ahEsDO,SAAkBsN,EAAUC,GAClC,OAAOuK,GAAUjV,IAAIyK,EAAUC,EAChC,0BiElEO,SAAgBzO,EAAQyC,EAAS,IACvC,GAAKzC,EAML,OAHA4L,GAAW5L,GAAQ,CAACkB,EAAMgG,KACzBzE,EAAOvB,GAAQgG,CAAG,IAEZzE,CACR,gBCJO,SAAqBzC,EAAQY,EAAeD,GAClD,IAAKX,EACJ,OAED,MAAMa,EAAcb,EAAOC,OAC3B,GAAIM,EAASI,GACZ,IAAK,IAAIG,EAAQ,EAAGA,EAAQD,EAAaC,IACxCd,EAAOc,GAAOC,KAAKJ,EAAUC,QAG9B,IAAK,IAAIE,EAAQ,EAAGA,EAAQD,EAAaC,IACxCd,EAAOc,GAAOF,GAGhB,OAAOZ,CACR,qBChBO,SAA0B4K,EAAYoP,EAAUtR,EAAO6a,GAC7D,OACQlc,EAASuD,EADb2Y,EACyB,CAACriB,EAAMJ,IAC3BI,EAAK8Y,GAAUjZ,KAAKwiB,EAAU7a,GAGX,CAACxH,EAAMJ,IAC3BI,EAAK8Y,GAAUtR,GAExB,0BCRO,SAA+BkC,EAAYoP,EAAUtR,EAAO6a,GAClE,OACQ9b,EAAcmD,EADlB2Y,EAC+BriB,GAC1BA,EAAK8Y,GAAUjZ,KAAKwiB,EAAU7a,GAGNpH,MAAOJ,GAChCA,EAAK8Y,GAAUtR,GAExB,6BCdO,SAAqB1I,GAC3B,QAAQO,EAASP,IAFM,uBAEKA,EAAO4G,UACpC,sECMO,SAAqB5G,EAAQwjB,GACnC,GAAItP,GAAQlU,IAAWoJ,GAAWpJ,GACjC,OAAO,EAER,GAAIoC,EAAQpC,IAAWiU,GAAajU,GACnC,OAAO,EAER,MAAMyE,EAAezE,EAAOC,OAC5B,IAAKiU,GAAQzP,KAAkB8E,GAAS9E,IAAiBA,EAAe,EACvE,OAAO,EAER,GAAI+e,EAAY,CACf,MAAMC,EAAUle,EAAKvF,GACrB,QAAIyjB,GACIpT,GAAMoT,GAAS,CAAC/a,EAAO5H,IACtBA,GAAS,GAAKyI,GAASzI,IAIhC,CACD,OAAO,CACR,0ICxBO,SAAiB4iB,EAAaC,GACpC,SAAKD,IAAgBC,IAGdD,aAAuBC,CAC/B,gBxGXO,SAAqB3jB,GAC3B,GAAIO,EAASP,GAAS,CACrB,MAAMkG,EAAkBlG,GAAQgG,aAAaG,KAC7C,OAAOsO,GAAiBpJ,KAAKnF,EAC7B,CACD,OAAO,CACR,+IyGLO,SAAelG,GACrB,OAAOA,GAA8B,IAApBA,EAAO4jB,QACzB,YCCO,SAAiB5jB,GACvB,OAAIwJ,GAASxJ,IAAWoC,EAAQpC,IACvBI,EAAUJ,GACR2G,EAAc3G,IAChBgS,GAAWhS,IAEZO,EAASP,EAClB,YCZO,SAAiB6jB,GACvB,OAA+B,KAAxBA,EAAYC,OACpB,yFCAO,SAAiB9jB,EAAQgX,GAAe,GAC9C,OAA2B,IAApB3W,QAAQL,IAAqBgX,CACrC,qJHgBO,SAA0BhX,GAChC,QAAQO,EAASP,IAFW,4BAEAA,EAAO4G,UACpC,2FIpBO,SAAoB5G,GAC1B,OAAOO,EAASP,IAA8C,mBAA5BA,EAAO+jB,OAAOC,SACjD,4DCDO,SAAsBhkB,EAAQikB,GACpC,OAAIjkB,EAAOC,SAAWgkB,EAAahkB,QAC3BuE,EAAWxE,GAAQ,CAACkB,EAAMJ,IACzBiG,EAAQkd,EAAanjB,GAAQI,IAIvC,kBpIN6B,CAAClB,EAAQyC,KACrC,GAAIzC,IAAWyC,EACd,OAAO,EAER,MAAMwe,EAAa1b,EAAKvF,GAClBkkB,EAAa3e,EAAK9C,GACxB,OAAIwe,EAAWhhB,SAAWikB,EAAWjkB,QAC7BuE,EAAWyc,GAAa/Z,GACvBlH,EAAOkH,KAASzE,EAAOyE,IAGpB,8B+HuBN,SAAoBlH,GAC1B,QAAQO,EAASP,IAFK,sBAEMA,EAAO4G,UACpC,6BzN1BO,SAAoB5G,GAC1B,OAAQoC,EAAQpC,EACjB,gBmCDO,SAAqBA,GAC3B,OAAQuJ,GAASvJ,EAClB,gBCFO,SAAqBA,GAC3B,OAAQwJ,GAASxJ,EAClB,6D2LhBO,SAAuBA,EAAQyC,GACrC,OAAOzC,IAAWyC,CACnB,oBCAO,SAAyBzC,EAAQ8B,EAAOC,GAC9C,OAAO/B,EAAS8B,GAAS9B,EAAS+B,CACnC,uBCFO,SAA4B/B,EAAQ8B,EAAOC,GACjD,OAAO/B,EAAS8B,GAAS9B,EAAS+B,CACnC,aCEO,SAAkBoiB,EAAcC,GACtC,SAAKD,GAAiBC,GAAgBA,EAAYrjB,OAG3CojB,aAAwBC,CAChC,iC9IXO,SAAoBpkB,GAC1B,OAAwB,IAAjB0B,GAAK1B,EACb,gB+IHO,SAAqBA,GAC3B,MAAMqkB,SAAc3b,MACpB,OAAO1I,SAAqD,WAATqkB,GAA8B,aAATA,CACzE,2DCMO,SAAmBC,EAAWC,GACpC,OAAIrQ,GAAQoQ,KAAcpQ,GAAQqQ,KAG9BD,EAAUvjB,KACNwjB,aAAqBD,EAEzBC,EAAUxjB,KACNujB,aAAqBC,EAEtBA,EAAUve,cAAgBse,EAAUte,YAC5C,0CChCO,SAAoBhG,EAAQwkB,GAClC,MAAMpV,EAAaF,GAAQlP,GACrBykB,EAAYvV,GAAQsV,GAC1B,OAAIpV,IAAeqV,GACdrV,EAAWjJ,OAASse,EAAUte,IAKpC,mDCKO,SAAgBnG,GACtB,OAAkB,IAAXA,CACR,qNCJO,SAAgBA,GACtB,OAAkB,IAAXA,CACR,clGAO,SAAmBA,EAAQ0kB,GACjC,GAAI1kB,EACH,OAAOkX,GAAWyN,MAAM3kB,EAAQ0kB,EAElC,cpCJO,SAAmB1kB,GACzB,OAAOA,EAAOiF,QAAQ,YAAa,OACjCA,QAAQsN,GAAe,KACvB1L,OACA8M,cACA1O,QAAQuN,GAAO,IAClB,qB3EPO,SAAiBvO,GACvB,OAAOkD,KAAiBlD,EACzB,SkNFO,SAAcA,EAAO2gB,GAC3B,MAAM/jB,EAAcoD,EAAMhE,OAC1B,OAAO,EAAcgE,EAAM6C,MAAMjG,EAAc+jB,EAAW/jB,GAAeoD,EAAMpD,EAAc,EAC9F,cpIHO,SAAmBb,GACzB,OAAOA,EACLiF,QAAQ,YAAa,OACrBA,QAAQsN,GAAe,KACvB1L,OACA8M,aACH,6FqICO,SAAuB3T,EAAQU,EAAUO,EAAU,GAAIqD,GAC7D,IAAIugB,EAAY,EAChB,MAAMhkB,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQD,EAAc,EAAEC,GAAS,EAAEA,IAC3CG,EAAQ4jB,GAAankB,EAASV,EAAOc,GAAQA,EAAOd,EAAQa,EAAayD,GACzEugB,IAED,OAAO5jB,CACR,aCRO,SAAkBjB,EAAQU,EAAUO,EAAU,GAAIqD,GACxD,MAAMzD,EAAcb,EAAOC,OAC3B,IAAK,IAAIa,EAAQ,EAAEA,EAAQD,EAAYC,IAAS,CAC/C,MAAMI,EAAOlB,EAAOc,GAEpB,IAAiB,IADAJ,EAASQ,EAAMJ,EAAOG,EAASjB,EAAQa,EAAayD,GAEpE,MAEDrD,EAAQH,GAASI,CACjB,CACD,OAAOD,CACR,UCdO,SAAS6jB,EAAMriB,KAAWW,GAWhC,OAVA8J,GAAK9J,GAAU2hB,IACd7X,GAAK6X,GAAe,CAACC,EAAYC,KAChC,GAAIxiB,EAAOwiB,KACNte,EAAcqe,IAAe5iB,EAAQ4iB,IAAeA,EAAW/hB,SAClE,OAAO6hB,EAAMriB,EAAOwiB,GAAYD,GAGlCviB,EAAOwiB,GAAaD,CAAU,GAC7B,IAEIviB,CACR,UxFgCO,SAAekX,EAAWC,GAChC,OAAIrZ,EAASqZ,GACLpX,EAAUiX,GAAO,CAACE,EAAWC,IAE9B/V,EAAI8V,EAAWF,GAAMI,OAC7B,ayFrDO,SAAkB7Z,EAAQ0I,GAChC,OAAO1I,EAAS0I,CACjB,WCHO,SAAgB8F,GACtB,MAAO,IAAI5L,KACF4L,KAAY5L,EAEtB,mECJO,SAAgB9B,EAAQ,GAC9B,MAAO,IAAI8B,IACHA,EAAK9B,EAEd,8DCOO,SAAcd,EAAQklB,GAC5B,IAAKllB,EACJ,MAAO,GAER,GAAIoC,EAAQ8iB,GAAY,CACvB,MAAMC,EAAiBzT,GAAawT,GACpC,OAAO5T,GAAatR,GAAQ,CAACkB,EAAMgG,KAC1Bie,EAAe9Z,KAAKnE,IAE7B,CACD,GAAI6K,GAAQmT,GACX,OAAO5T,GAAatR,GAAQ,CAACkB,EAAMgG,KAC1Bge,EAAU7Z,KAAKnE,KAGzB,GAAIsC,GAAS0b,GACZ,OAAO5T,GAAatR,GAAQ,CAACkB,EAAMgG,IAC3BA,IAAQge,IAGjB,GAAI3b,GAAS2b,GAAY,CACxB,MAAME,EAAiBF,EAAUte,WACjC,OAAO0K,GAAatR,GAAQ,CAACkB,EAAMgG,IAC3BA,IAAQke,GAEhB,CACD,OAAIhc,GAAW8b,GACP5T,GAAatR,GAAQ,CAACkB,EAAMgG,KAC1Bge,EAAUhkB,EAAMgG,KAGnBwC,GAAa,GAAI1J,EACzB,SCxCqBwO,IACpB,IAAI9F,EAOJ,MANiB,IAAI9F,KACfrC,EAASmI,KACbA,EAAQ8F,KAAY5L,IAEd8F,EAEO,yBCVT,SAAc2c,GACpB,MAAO,IAAIziB,IACHqN,GAAIoV,GAAYnkB,GACfA,KAAQ0B,IAGlB,cCNO,SAAmB0iB,GACzB,OAAQ/M,GACAlI,GAAMiV,GAAaC,GAClBA,EAAUhN,IAGpB,SCNO,SAAczL,EAAWC,GAC/B,MAAO,CAACD,EAAWC,EACpB,cCMO,SAAmB9I,EAAOshB,GAChC,MAAMC,EAAW,GACjB,MAAO,CACNxkB,EAAgBiD,GAAO,CAAC/C,EAAMJ,KAC7B,GAAIykB,EAAUrkB,EAAMJ,GACnB,OAAOI,EAERskB,EAASnkB,KAAKH,EAAK,IAEpBskB,EAEF,SChBoB,CAACxlB,EAAQylB,EAAWhjB,EAAS,CAAA,KAChD,GAAKzC,EAML,OAHAS,EAAUglB,GAAYvkB,IACrBuB,EAAOvB,GAAQlB,EAAOkB,EAAK,IAErBuB,CAAM,UCPP,SAAemI,EAAYK,GACjC,OAAO5D,EAASuD,GAAa1J,GACrB8J,GAAY9J,EAAM+J,IAE3B,gDCG6B,CAACjL,EAAQ0lB,EAAUhgB,EAAaH,EAAKvF,KAC1DwE,EAAWkB,GAAasU,GACvBjT,EAAQ/G,EAAOga,GAAW0L,EAAS1L,6DpKVrC,SAAqB5S,EAAKa,EAAM,GACtC,OAAOF,MAAYX,EAAMa,GAAOA,CACjC,yBpFcO,SAAenG,EAAOC,EAAKC,EAAO,EAAGC,EAAc,IACzD,OAAIL,EAAWI,GACPC,EAEJH,EAAQC,EACJF,EAAQC,EAAOC,EAAKC,EAAMC,GAE1BE,EAAUL,EAAOC,EAAKC,EAAMC,EAErC,sDyPzBO,SAAeuM,EAAUiV,GAC/B,MAAO,IAAI7gB,IACH4L,KAAYiV,EAAQxT,KAAK/O,GACxB0B,EAAK1B,KAGf,oCCNO,SAAmBlB,EAAQ0I,GACjC,OAAO1I,EAAS0I,CACjB,WCFO,SAAgBzE,EAAO0hB,GAC7B,IAAI9kB,EAAcoD,EAAMhE,OACxB,IAAK,IAAIa,EAAQ,EAAGA,EAAQD,EAAaC,IAAS,CACjD,MAAMI,EAAO+C,EAAMnD,GACf6kB,EAAY5C,SAAS7hB,KACxB+C,EAAMG,OAAOtD,EAAO,GACpBA,IACAD,IAED,CACD,OAAOoD,CACR,aAcO,SAAkBjE,EAAQU,GAChC,IAAIG,EAAcb,EAAOC,OACzB,IAAK,IAAIa,EAAQ,EAAGA,EAAQD,EAAaC,IAAS,CAE7CJ,EADSV,EAAOc,GACDA,KAClBd,EAAOoE,OAAOtD,EAAO,GACrBA,IACAD,IAED,CACD,OAAOb,CACR,gBCrCO,SAAqB0S,EAAQkT,EAAOld,GAC1C,OAAOgK,EAAOzN,QAAQ,IAAI2M,OAAO,MAAMgU,EAAM/T,KAAK,UAAW,MAAOnJ,EACrE,SCJO,SAAczE,GACpB,OAAOA,EAAM6C,MAAM,EAAG7C,EAAMhE,OAC7B,0CCDO,SAAeD,EAAQkE,GAC7B,OAAOlE,EAAOA,EAAOC,OAAS,EAAIiE,EACnC,gBxJiBO,SAAqBwO,EAAQ5R,EAAQ,GAC3C,OAAO4R,EAAOA,EAAOzS,OAASa,EAC/B,WyJpBO,SAAgBd,EAAQkE,GAC9B,IAAKlE,EACJ,OAAO,EAER,MAAMa,EAAcb,EAAOC,OAC3B,GAAIY,IAAgBqD,GAAUA,EAASrD,EACtC,OAAO2H,GAAQxI,GAEhB,GAAe,IAAXkE,EACH,MAAO,CAAClE,EAAOgI,GAAUnH,EAAc,EAAG,KAE3C,MAAMglB,EAAc,GACdC,EAAO,CAAA,EACb,IACIhlB,EADAgD,EAAQ,EAEZ,KAAOA,EAAQI,GACdpD,EAAQkH,GAAUhI,EAAOC,OAAS,EAAG,GAChC6lB,EAAKhlB,KACT+kB,EAAYxkB,KAAKrB,EAAOc,IACxBglB,EAAKhlB,IAAS,EACdgD,KAGF,OAAO+hB,CACR,axJiBO,SAAkBnT,GACxB,OAAOS,GAAaF,GAAaP,GAClC,iCsDOO,SAAkBqT,GAExB,OADoBA,EAAO,IAE1B,IAlEkB,IAmEjB,IAAKvJ,GAAWnR,KAAK0a,GACpB,OAAOlJ,GAAQpK,GAAWsT,IAE3B,MACD,IAxEgB,IAyEf,GAAIzJ,GAAUjR,KAAK0a,GAClB,OAAOtJ,GAAWhK,GAAWsT,IAE9B,MACD,QACC,GAAIxJ,GAAQlR,KAAK0a,GAChB,OAAOpJ,GAASoJ,GAGnB,OAAO/I,GAAiB+I,EACzB,WmGhFO,SAAgB/lB,EAAQkH,EAAKwB,GAcnC,OAbIxB,GAAOP,EAAc3G,IAEduJ,GAASrC,IAAQ9E,EAAQpC,GADnCA,EAAOkH,GAAOwB,EAGJ1I,EAAO+D,IACjB/D,EAAO+D,IAAImD,EAAKwB,GACN1I,EAAOqB,KACjBrB,EAAOqB,KAAKqH,GACF1I,EAAOwP,IACjBxP,EAAOwP,IAAI9G,GAEX1I,EAAOkH,GAAOwB,EAER1I,CACR,aCfO,SAAkBA,EAAQ0I,EAAOxB,GAUvC,OATIqC,GAASrC,IAAQ9E,EAAQpC,GAC5BA,EAAOkH,GAAOwB,EACJ1I,EAAOqB,KACjBrB,EAAOqB,KAAKqH,GACF1I,EAAOwP,IACjBxP,EAAOwP,IAAI9G,GAEX1I,EAAOkH,GAAOwB,EAER1I,CACR,0BjODO,SAAkBiE,GACxB,OAAO0E,MAAiB1E,EACzB,cmEDO,SAAmBjE,GACzB,OAAOA,EAAOiF,QAAQ,YAAa,OACjCA,QAAQsN,GAAe,KACvB1L,OACA8M,cACA1O,QAAQuN,GAAO,IAClB,iC1DaO,SAAsC5H,EAAYV,EAAe,KAAMI,GAC7E,OAAOM,EAAWC,MAAK,CAACT,EAAUC,IAC1BF,GAA0BC,EAAUC,EAAMH,EAAcI,IAEjE,wCIZO,SAA6CM,EAAYV,EAAe,KAAMI,GACpF,OAAOM,EAAWC,MAAK,CAACT,EAAUC,IAC1Ba,GAAiCd,EAAUC,EAAMH,EAAcI,IAExE,0JqNjBO,SAA6B0b,GACnC,OAAOA,EAAWnb,KAAKnD,EACxB,wBCFO,SAA6Bse,GACnC,OAAOA,EAAWnb,KAAKhD,EACxB,kHpMFyB,IACjB,eCAiB,IACjBiG,gBEFkB,KAClB,iBkMDkB,IAClB,cjMAgB,IAChBE,8BkMFD,SAAqBhO,GAC3B,OAAOA,EAAOqiB,QAAO,CAAC4D,EAAGC,IACjBD,EAAIC,GACT,EACJ,+BCJO,SAAgBlmB,GACtB,OAAOA,EAAOqiB,QAAO,CAAC4D,EAAGC,IACjBD,EAAIC,GACT,EACJ,SCHO,SAAclmB,EAAQmmB,EAAW,GACvC,OAAOnmB,EAAO8G,MAAM,EAAGqf,EACxB,cCFO,SAAmBnmB,EAAQomB,EAAa,GAC9C,MAAMvlB,EAAcb,EAAOC,OAC3B,OAAOD,EAAO8G,MAAMjG,EAAculB,EAAYvlB,EAC/C,yBCCO,SAAkB2N,EAAUC,GAClC,SAAS4X,KAAazjB,GACjByjB,EAAUjY,GACbiY,EAAUC,eAAiBtY,IAG5BqY,EAAU7X,YAAY5L,GACtByjB,EAAUjY,GAAKU,IAAM,KAChBuX,EAAUC,gBACbD,EAAU7X,YAAY5L,GAEvByjB,EAAUjY,GAAKN,EAAK,GAClBW,GACH,CAOD,OANA4X,EAAUjY,GAAKN,GACfuY,EAAU7X,SAAWA,EAASkB,KAAK2W,GACnCA,EAAUzX,MAAQ,KACjBC,GAAOV,OAAOkY,EAAUjY,IACxBiY,EAAUjY,GAAKN,EAAK,EAEduY,CACR,iDClBO/kB,eAA0B4C,EAAQxD,GACxC,IAAK,IAAII,EAAQ,EAAGA,EAAQoD,EAAQpD,UAC7BJ,EAASwD,EAEjB,azMkBO,SAAkBA,EAAQxD,EAAUO,EAAU,IACpD,IAAK,IAAIH,EAAQ,EAAGA,EAAQoD,EAAQpD,IACnCG,EAAQH,GAASJ,EAASwD,GAE3B,OAAOjD,CACR,kByMHOK,eAA6B4C,EAAQxD,EAAUO,EAAU,IAC/D,IAAK,IAAIH,EAAQ,EAAGA,EAAQoD,EAAQpD,IACnCG,EAAQH,SAAeJ,EAASwD,GAEjC,OAAOjD,CACR,mCChCO,SAAgByH,EAAO6d,GAAK,EAAMC,GAAM,GAC9C,OAAQzf,EAAQwf,EAAI7d,GAAU8d,EAAMD,CACrC,anKLO,SAAkB7T,GACxB,OAAOA,EAAOmO,MAAMzN,KAAkB,EACvC,aoKuBO,SAAkBV,EAAQ+T,GAChC,MAAMC,EAAehU,EAAOzS,OAC5B,OAAQymB,EAAeD,EA1CH,EAAC/T,EAAQ+T,EAAWC,KACxC,MAAMC,EAAWjU,EAAOxN,MAAM,IACxB0hB,EAAiBD,EAAS1mB,OAChC,IAAIiB,EACAJ,EAAQ4lB,EAAeD,EAC3B,KAAO3lB,EAAQ8lB,GAAkB9lB,GAAS,IACzCI,EAAOylB,EAAS7lB,GACH,MAATI,GAFwCJ,KAM7C,OAAO4R,EAAO5L,MAAM,EAAGhG,GAAO+F,MAAM,EA+BAggB,CAAanU,EAAQ+T,EAAWC,GAAgBhU,CACrF,kBAeO,SAAuBA,EAAQ+T,GACrC,MAAMC,EAAehU,EAAOzS,OAC5B,OAAQymB,EAAeD,EA/CL,EAAC/T,EAAQ+T,EAAWC,KACtC,MAAMC,EAAWjU,EAAOxN,MAAM,IACxB0hB,EAAiBD,EAAS1mB,OAChC,IAAIiB,EACAJ,EAAQ2lB,EACZ,KAAO3lB,EAAQ8lB,GAAkB9lB,EAAQ,IACxCI,EAAOylB,EAAS7lB,GACH,MAATI,GAFuCJ,KAM5C,OAAO4R,EAAOC,UAAU7R,EAAO4lB,GAAc7f,MAAM,EAoCfigB,CAAWpU,EAAQ+T,EAAWC,GAAgBhU,CACnF,qBC5BO,SAAe1S,GACrB,OAAOA,EAAO,GAAGiQ,KAAI,CAAC/O,EAAMJ,IACpBd,EAAOiQ,KAAK8W,GACXA,EAASjmB,MAGnB,gB7KH4Bqb,IAC3B,MAAM6K,EAAe,GACf3U,EAAS,GAKf,OAJAzG,GAAWuQ,GAAQ,CAACjb,EAAMgG,KACzB8f,EAAa3lB,KAAK6F,GAClBmL,EAAOhR,KAAKH,EAAK,IAEX,CAAC8lB,EAAc3U,EAAO,U8K5BvB,YAAkBgR,GACxB,OAAOta,GAAOjG,EAAYugB,GAC3B,4CCKO,SAAyBrjB,EAAQU,GACvC,MAAM+D,EAAezE,EAAOC,OAC5B,IAAK,IAAIa,EAAQ,EAAEA,EAAQ2D,EAAa3D,IACvC,IAAuC,IAAnCJ,EAASV,EAAOc,GAAQA,GAC3B,OAAO,EAGT,OAAO,CACR,mBCRO,SAAwBd,EAAQU,GACtC,MAAM+D,EAAezE,EAAOC,OAC5B,IAAK,IAAIa,EAAQ,EAAEA,EAAQ2D,EAAa3D,IACvC,IAAuC,IAAnCJ,EAASV,EAAOc,GAAQA,GAC3B,OAAO,EAGT,OAAO,CACR,oC5KfO,SAAmBd,GACzB,OAAOA,EACLiF,QAAQ,YAAa,OACrBA,QAAQsN,GAAe,KACvB1L,OACA2M,aACH,kCK4CO,SAAuBd,GAC7B,OAAOA,EAAOzN,QAAQqO,IAAWuN,GACzBpN,GAAWoN,IAEpB,gEAcO,SAA2BnO,GACjC,OAAOA,EAAOzN,QAAQqO,IAAWuN,GACzBnN,GAAemN,IAExB,wCwKjEO,SAAyB7gB,EAAQU,EAAUO,EAAU,GAAIqD,GAC/D,IAAIxD,EAAQ,EACZ,KAAOA,EAAQd,EAAOC,QAAQ,CAC7B,MAAMwB,EAASR,EAAQI,KAAKX,EAASV,EAAOc,GAAQA,EAAOd,EAAQA,EAAOC,OAAQqE,IAClFxD,IACIP,EAASkB,IACZR,EAAQI,KAAKI,EAEd,CACD,OAAOzB,CACR,mBCXO,SAAwBA,EAAQU,EAAU4D,GAChD,IAAIxD,EAAQ,EACZ,KAAOA,EAAQd,EAAOC,QACrBS,EAASV,EAAOc,GAAQA,EAAOd,EAAQA,EAAOC,OAAQqE,GACtDxD,IAED,OAAOd,CACR,kBCJO,SAAuBA,EAAQU,EAAUO,EAAU,GAAIqD,GAC7D,IAAIxD,EAAQ,EACZ,KAAOA,EAAQd,EAAOC,QACrBgB,EAAQI,KAAKX,EAASV,EAAOc,GAAQA,EAAOd,EAAQA,EAAOC,OAAQqE,IACnExD,IAED,OAAOd,CACR,YChBO,SAAiByC,EAAQW,GAC/B,IAAKA,EACJ,OAAOX,EAER,MAAMwkB,EAAazkB,EAAU0kB,IAAK9jB,GAClC,OAAOX,EAAOwG,QAAQ/H,IACb+lB,EAAW1Y,IAAIrN,IAEzB,U5KOO,SAAewR,GACrB,OAAOA,EAAOmO,MAAMxN,KAAe,EACpC,S6KhBO,SAAc3K,EAAOye,GAC3B,MAAO,IAAI5O,IACH4O,EAAQze,KAAU6P,EAE3B,QCHO,YAAgBnV,GACtB,MAAMgkB,EAAS5kB,EAAUc,KACnB+jB,EAAQ,GAEd,OAAsB,IADAjkB,EAAQnD,OAEtBkD,EAAWC,EAAQ,GAAIA,EAAQ,KAEvC3C,EAAU2C,GAAS,CAACI,EAAcC,KACjChD,EAAU+C,GAAc,CAACE,EAAOC,KAC/B,IAAIC,EAAYwjB,EAAOvjB,IAAIH,GAC3B,GAAKE,EAOE,IAAIA,EAAUH,cAAgBA,EACpC,OAEAG,EAAUE,OACV,MAVAF,EAAY,CACXE,MAAO,EACPL,cACAC,SAED0jB,EAAOrjB,IAAIL,EAAOE,EAKlB,GACA,IAEHX,EAAQmkB,GAASlmB,IACG,IAAfA,EAAK4C,OACRujB,EAAMhmB,KAAKH,EAAKwC,MAChB,IAEK2jB,EACR,QTlCO,YAAgBhE,GACtB,OAAOA,EAAO,GAAGpT,KAAI,CAAC/O,EAAMJ,IACpBuiB,EAAOpT,KAAKhM,GACXA,EAAMnD,MAGhB"}