{"version":3,"file":"index.js","sources":["../../../source/internal/apply.js","../../../source/internal/array.js","../../../source/internal/isSame.js","../../../source/internal/object.js","../../../source/type/isUndefined.js","../../../source/type/isNull.js","../../../source/type/hasValue.js","../../../source/internal/regexTestFactory.js","../../../source/type/isBoolean.js","../../../source/type/isConstructor.js","../../../source/type/isString.js","../../../source/type/isArray.js","../../../source/type/isPlainObject.js","../../../source/utility/hasLength.js","../../../source/object/keys.js","../../../source/object/size.js","../../../source/type/isEmpty.js","../../../source/type/isI32.js","../../../source/type/isBuffer.js","../../../source/type/isF32.js","../../../source/type/isI8.js","../../../source/type/isPrimitive.js","../../../source/type/isU16.js","../../../source/type/isWeakMap.js","../../../source/type/isArguments.js","../../../source/type/isF64.js","../../../source/type/isMap.js","../../../source/type/isPromise.js","../../../source/type/isU32.js","../../../source/type/isDate.js","../../../source/type/isFunction.js","../../../source/type/isRegExp.js","../../../source/type/isU8.js","../../../source/type/isAsync.js","../../../source/type/isDecimal.js","../../../source/type/isI16.js","../../../source/type/isNumber.js","../../../source/type/isSet.js","../../../source/type/isU8C.js","../../../source/file/getExtension.js","../../../source/file/isFileCSS.js","../../../source/file/isFileHTML.js","../../../source/file/isFileJS.js","../../../source/file/isFileJSON.js","../../../source/array/chunk.js","../../../source/array/clear.js","../../../source/array/clone.js","../../../source/utility/returnValue.js","../../../source/array/each.js","../../../source/array/compactMap.js","../../../source/array/eachAsync.js","../../../source/array/compactMapAsync.js","../../../source/array/createrange.js","../../../source/object/each.js","../../../source/utility/generateLoop.js","../../../source/utility/each.js","../../../source/array/ensure.js","../../../source/array/flattenDeep.js","../../../source/class/construct.js","../../../source/array/difference.js","../../../source/array/drop.js","../../../source/array/dropRight.js","../../../source/array/eachRight.js","../../../source/array/eachRightAsync.js","../../../source/array/every.js","../../../source/array/filterArray.js","../../../source/array/first.js","../../../source/array/flatten.js","../../../source/array/initial.js","../../../source/array/intersect.js","../../../source/object/hasKeys.js","../../../source/utility/isEqual.js","../../../source/array/isMatch.js","../../../source/array/largest.js","../../../source/array/last.js","../../../source/array/map.js","../../../source/array/mapAsync.js","../../../source/array/mapRight.js","../../../source/array/mapWhile.js","../../../source/array/numSort.js","../../../source/array/object.js","../../../source/array/partition.js","../../../source/array/rNumSort.js","../../../source/array/remove.js","../../../source/array/rest.js","../../../source/array/right.js","../../../source/number/math.js","../../../source/array/shuffle.js","../../../source/array/sample.js","../../../source/array/smallest.js","../../../source/array/sortedIndex.js","../../../source/array/sum.js","../../../source/array/take.js","../../../source/array/unique.js","../../../source/array/union.js","../../../source/array/whileCompactMap.js","../../../source/array/whileEach.js","../../../source/array/whileMap.js","../../../source/array/without.js","../../../source/array/xor.js","../../../source/array/zip.js","../../../source/collection/countBy.js","../../../source/collection/findIndex.js","../../../source/collection/groupBy.js","../../../source/collection/indexBy.js","../../../source/collection/invoke.js","../../../source/collection/invokeAsync.js","../../../source/collection/pluck.js","../../../source/object/pluckObject.js","../../../source/collection/pluckValues.js","../../../source/collection/sortAlphabet.js","../../../source/collection/sortNewest.js","../../../source/collection/sortOldest.js","../../../source/function/after.js","../../../source/function/ary.js","../../../source/function/before.js","../../../source/object/map.js","../../../source/utility/map.js","../../../source/function/bind.js","../../../source/object/assign.js","../../../source/function/chain.js","../../../source/function/curry.js","../../../source/utility/stubTrue.js","../../../source/utility/stubFalse.js","../../../source/utility/noop.js","../../../source/utility/times.js","../../../source/utility/timer.js","../../../source/function/debounce.js","../../../source/function/ifInvoke.js","../../../source/function/inAsync.js","../../../source/function/inSync.js","../../../source/function/negate.js","../../../source/function/nthArg.js","../../../source/function/once.js","../../../source/object/every.js","../../../source/utility/every.js","../../../source/function/over.js","../../../source/function/overEvery.js","../../../source/function/rearged.js","../../../source/function/throttle.js","../../../source/function/wrap.js","../../../source/number/isNumberEqual.js","../../../source/number/isNumberInRange.js","../../../source/number/isZero.js","../../../source/object/compactKeys.js","../../../source/object/compactMap.js","../../../source/object/eachAsync.js","../../../source/object/filterObject.js","../../../source/object/invert.js","../../../source/object/isMatch.js","../../../source/object/mapAsync.js","../../../source/object/omit.js","../../../source/object/pick.js","../../../source/object/zip.js","../../../source/string/case.js","../../../source/string/range.js","../../../source/string/replace.js","../../../source/string/sanitize.js","../../../source/string/tokenize.js","../../../source/string/truncate.js","../../../source/string/typography.js","../../../source/utility/json.js","../../../source/utility/assert.js","../../../source/utility/cacheNativeMethod.js","../../../source/utility/clone.js","../../../source/utility/truey.js","../../../source/utility/compact.js","../../../source/utility/falsey.js","../../../source/utility/filter.js","../../../source/utility/flow.js","../../../source/utility/flowAsync.js","../../../source/utility/toPath.js","../../../source/utility/get.js","../../../source/utility/has.js","../../../source/utility/hasDot.js","../../../source/utility/ifNotEqual.js","../../../source/utility/ifValue.js","../../../source/utility/interval.js","../../../source/utility/merge.js","../../../source/utility/model.js","../../../source/utility/promise.js","../../../source/utility/propertyMatch.js","../../../source/utility/store.js","../../../source/utility/stubArray.js","../../../source/utility/stubObject.js","../../../source/utility/stubString.js","../../../source/utility/timesAsync.js","../../../source/utility/toggle.js","../../../source/utility/uid.js","../../../source/utility/virtualStorage.js","../../../source/browser/agent.js","../../../source/browser/event.js","../../../source/browser/isEnter.js","../../../source/browser/frag.js","../../../source/browser/append.js","../../../source/browser/attribute.js","../../../source/browser/selector.js","../../../source/browser/importScript.js","../../../source/browser/ready.js","../../../source/browser/info.js","../../../source/browser/dimensions.js","../../../source/browser/storage.js","../../../source/browser/console.js","../../../source/browser/is.js"],"sourcesContent":["/**\n * Calls a target function with arguments as specified.\n *\n * @function apply\n * @category function\n * @param {Function} target - The target function to call.\n * @param {*} thisArgument - Array like object.\n * @param {Array} argumentsList - An array-like object specifying the arguments with which target should be called.\n * @returns {*} - The result of calling the given target function with the specified this value and arguments.\n *\n * @example\n * apply(function (a) {return a;}, undefined, [2]);\n * // => 2\n*/\nexport const apply = Reflect.apply;\n","const arrayNative = Array;\n/**\n * Takes an array like object and creates a new Array from it.\n *\n * @function toArray\n * @category array\n * @param {*} arrayLike - Array like object.\n * @returns {*} - New array.\n *\n * @example\n * toArray([1, 2, 3]);\n * // => [1, 2, 3]\n*/\nexport const toArray = arrayNative.from;\n\n","/**\n * Determines whether two values are the same value.\n *\n * @function isSame\n * @category object\n * @param {*} source - Value to compare to.\n * @param {*} target - A value to compare.\n * @returns {Boolean} - A Boolean indicating whether or not the two arguments are the same value.\n *\n * @example\n * isSame('foo', 'foo');\n * // => true\n*/\nexport const isSame = Object.is;\n","/**\n * Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.\n *\n * @function getOwnPropertyDescriptor\n * @category object\n * @param {Object} target - The target object.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @returns {Object} - A property descriptor of the given property if it exists on the object, undefined otherwise.\n *\n * @example\n * getOwnPropertyDescriptor({ bar: 42 }, 'bar');\n * // => { configurable: true, enumerable: true, value: 42, writable: true }\n*/\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/**\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n *\n * @function defineProperty\n * @category object\n * @param {Object} target - The object on which to define the property.\n * @param {String} property - The name of the property whose description is to be retrieved.\n * @param {Object} descriptor - The descriptor for the property being defined or modified.\n * @returns {Object} - The object that was passed to the function.\n *\n * @example\n * defineProperty({}, 'key', {\n *  enumerable: false,\n *  configurable: false,\n *  writable: false,\n *  value: 'static'\n * }).key;\n * // => 'static'\n*/\nexport const defineProperty = Object.defineProperty;\n/**\n * Returns an array of all properties (enumerable or not) found directly upon a given object.\n *\n * @function getOwnPropertyNames\n * @category object\n * @param {Object} source - The object whose enumerable and non-enumerable own properties are to be returned.\n * @returns {Object} - An array of strings that correspond to the properties found directly upon the given object.\n *\n * @example\n * getOwnPropertyNames({ 0: 'a', 1: 'b', 2: 'c' });\n * // => ['0', '1', '2']\n*/\nexport const getOwnPropertyNames = Object.getOwnPropertyNames;\n\n","/** Checks if the value is undefined.\n*\n* @function isUndefined\n* @category type\n* @param {*} value - Object to be checked.\n* @returns {boolean} - Returns true or false.\n*\n* @example\n * import { isUndefined } from './Acid.js';\n* isUndefined(undefined);\n* // => true\n*/\nexport function isUndefined(value) {\n\treturn value === undefined;\n}\n","/**\n * Checks if the value is null.\n *\n * @function isNull\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isNull } from './Acid.js';\n * isNull(null);\n * // => true\n*/\nexport function isNull(value) {\n\treturn value === null;\n}\n","import { isUndefined } from './isUndefined.js';\nimport { isNull } from './isNull.js';\n/**\n * Checks if the value is not null or undefined.\n *\n * @function hasValue\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { hasValue } from './Acid.js';\n * assert(hasValue(1), true);\n*/\nexport function hasValue(value) {\n\treturn !isUndefined(value) && !isNull(value);\n}\n","import { hasValue } from '../type/hasValue.js';\nexport function regexTestFactory(regexType) {\n\treturn (item) => {\n\t\treturn (hasValue(item)) ? regexType.test(item) : false;\n\t};\n}\n","/**\n * Checks if the value is a Boolean.\n *\n * @function isBoolean\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isBoolean } from './Acid.js';\n * isBoolean(true);\n * // => true\n*/\nexport function isBoolean(value) {\n\treturn value.constructor.name === 'Boolean';\n}\n","import { hasValue } from './hasValue.js';\n/**\n * Checks to see if the constructor is that of a native object.\n *\n * @function isConstructor\n * @category type\n * @param {Object} target - The target object.\n * @param {Object} nativeObject - The source object.\n * @returns {Object} - Returns the target object.\n *\n * @example\n * import { isConstructor } from 'Acid';\n * isConstructor(2, Number);\n * // => true\n*/\nexport function isConstructor(obj, nativeObject) {\n\treturn (hasValue(obj)) ? obj.constructor === nativeObject : false;\n}\n/**\n * Checks to see if the constructor is that of a native object.\n *\n * @function isConstructor\n * @category type\n * @param {Object} target - The target object.\n * @param {...Object} source - The source object.\n * @returns {Object} - Returns the target object.\n *\n * @example\n * import { isConstructor } from 'Acid';\n * isConstructor(2, Number);\n * // => {b: 2, a: 1}\n*/\nexport function isConstructorFactory(source) {\n\treturn (target) => {\n\t\treturn isConstructor(target, source);\n\t};\n}\nexport function constructorName(source) {\n\treturn source?.constructor?.name;\n}\nfunction isConstructorNameFactory(target) {\n\treturn (source) => {\n\t\treturn source && constructorName(source) === target || false;\n\t};\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the value is a string.\n *\n * @function isString\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isString } from './Acid.js';\n * isString('Lucy');\n * // => true\n*/\nexport const isString = isConstructorFactory(String);\n","/**\n * Checks if the value is an array.\n *\n * @function isArray\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isArray } from './Acid.js';\n * isArray([]);\n * // => true\n*/\nexport const isArray = Array.isArray;\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the value is a plain object.\n *\n * @function isPlainObject\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isPlainObject } from './Acid.js';\n * isPlainObject({});\n * // => true\n*/\nexport const isPlainObject = (value) => {\n\tif (hasValue(value)) {\n\t\treturn value.constructor.toString().trim()\n\t\t\t.slice(9, 16) === 'Object(';\n\t}\n\treturn false;\n};\n","/**\n * Checks if the value has length greater than 0.\n *\n * @function hasLength\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * hasLength([1]);\n * // => true\n*/\nexport function hasLength(value) {\n\treturn Boolean(value.length);\n}\n","/**\n * Get object's keys.\n *\n * @function keys\n * @category object\n * @param {*} source - The source object to pull keys from.\n * @returns {Array} - Array of keys.\n *\n * @example\n * keys({a: 1, b: 2});\n * // => ['a', 'b']\n*/\nconst objectKeys = Object.keys;\nexport function keys(source) {\n\tif (source) {\n\t\treturn objectKeys(source);\n\t}\n}\n","import { keys } from './keys.js';\n/**\n * Returns the amount of keys on the object.\n *\n * @function objectSize\n * @category object\n * @param {Object} source - The source object.\n * @returns {number} - The amount of keys.\n *\n * @example\n * objectSize({ 0: 'a', 1: 'b', 2: 'c' });\n * // => 3\n*/\nexport function objectSize(source) {\n\treturn keys(source).length;\n}\n","import { isString } from './isString.js';\nimport { isArray } from './isArray.js';\nimport { isPlainObject } from './isPlainObject.js';\nimport { hasLength } from '../utility/hasLength.js';\nimport { objectSize } from '../object/size.js';\nimport { hasValue } from './hasValue.js';\n/**\n * Checks if the value is empty.\n *\n * @function isEmpty\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isEmpty } from './Acid.js';\n * isEmpty([]);\n * // => true\n*/\nexport function isEmpty(source) {\n\tif (isString(source) || isArray(source)) {\n\t\treturn !hasLength(source);\n\t} else if (isPlainObject(source)) {\n\t\treturn !objectSize(source);\n\t}\n\treturn !hasValue(source);\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Int32Array.\n *\n * @function isI32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isI32 } from './Acid.js';\n * isI32(new Int32Array());\n * // => true\n*/\nexport const isI32 = isConstructorFactory('Int32Array');\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a ArrayBuffer.\n *\n * @function isBuffer\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isBuffer(new ArrayBuffer());\n * // => true\n*/\nexport const isBuffer = isConstructorFactory('ArrayBuffer');\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Float32Array.\n *\n * @function isF32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isFloat32 } from './Acid.js';\n * isFloat32(new Float32Array());\n * // => true\n*/\nexport const isF32 = isConstructorFactory('Float32Array');\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Int8Array.\n *\n * @function isI8\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isInt8 } from './Acid.js';\n * isInt8(new Int8Array());\n * // => true\n*/\nexport const isI8 = isConstructorFactory('Int8Array');\n","/**\n * Checks if an object is a primitive.\n *\n * @function isPrimitive\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - True or false.\n *\n * @example\n * import { isPrimitive } from './Acid.js';\n * isPrimitive(1);\n * // => true\n * isPrimitive(() => {});\n * // => false\n*/\nexport function isPrimitive(value) {\n\tconst type = typeof value;\n\treturn value === null || value === undefined || (type !== 'object' && type !== 'function');\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Uint16Array.\n *\n * @function isU16\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isU16 } from './Acid.js';\n * isU16(new Uint16Array());\n * // => true\n*/\nexport const isU16 = isConstructorFactory('Uint16Array');\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the source is a WeakMap.\n *\n * @function isWeakMap\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isWeakMap } from './Acid.js';\n * assert(isWeakMap(new WeakMap()), true);\n*/\nconst objectWeakMap = '[object WeakMap]';\nexport function isWeakMap(source) {\n\treturn (hasValue(source)) ? source.toString() === objectWeakMap : false;\n}\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the value is an Arguments object.\n *\n * @function isArguments\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isArguments } from './Acid.js';\n * isArguments([]);\n * // => false\n*/\nconst objectArguments = '[object Arguments]';\nexport function isArguments(source) {\n\treturn (hasValue(source)) ? source.toString() === objectArguments : false;\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Float64Array.\n *\n * @function isF64\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isF64 } from './Acid.js';\n * isF64(new Float64Array());\n * // => true\n*/\nexport const isF64 = isConstructorFactory('Float64Array');\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the source is a Map.\n *\n * @function isMap\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isMap } from './Acid.js';\n * isMap(new Map());\n * // => true\n*/\nconst objectMap = '[object Map]';\nexport function isMap(source) {\n\treturn (hasValue(source)) ? source.toString() === objectMap : false;\n}\n","/**\n * Checks if an object is a promise.\n *\n * @function isPromise\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - True or false.\n *\n * @example\n * import { isPromise } from './Acid.js';\n * isPromise(new Promise(() => {}));\n * // => true\n*/\nexport function isPromise(value) {\n\tif (value) {\n\t\treturn value instanceof Promise;\n\t}\n\treturn false;\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Uint32Array.\n *\n * @function isU32\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isU32 } from './Acid.js';\n * isU32(new Uint32Array());\n * // => true\n*/\nexport const isU32 = isConstructorFactory('Uint32Array');\n","/**\n * Checks if the value is a Date.\n *\n * @function isDate\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isDate } from './Acid.js';\n * isDate(new Date());\n * // => true\n*/\nexport function isDate(value) {\n\treturn value instanceof Date;\n}\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the value is a plain object.\n *\n * @function isFunction\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isFunction } from './Acid.js';\n * isFunction(() => {});\n * // => true\n*/\nexport const isFunction = (value) => {\n\treturn (hasValue(value)) ? value instanceof Function : false;\n};\n","/**\n * Checks if the value is a RegExp.\n *\n * @function isRegExp\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isRegExp } from './Acid.js';\n * isRegExp(/test/);\n * // => true\n*/\nexport function isRegExp(value) {\n\treturn value instanceof RegExp;\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Uint8Array.\n *\n * @function isU8\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isU8 } from './Acid.js';\n * isU8(new Uint8Array());\n * // => true\n*/\nexport const isU8 = isConstructorFactory('Uint8Array');\n","import { isPromise } from './isPromise.js';\n/**\n * Checks if an object is an async function.\n *\n * @function isAsync\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - True or false.\n *\n * @example\n * import { isAsync, assert } from './Acid.js';\n * assert(isAsync(async() => {}), true);\n*/\nexport function isAsync(value) {\n\tif (value) {\n\t\treturn value.constructor?.name === 'AsyncFunction';\n\t}\n\treturn false;\n}\n/**\n * Checks if an object is an async function or promise.\n *\n * @function isKindAsync\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - True or false.\n *\n * @example\n * import { isKindAsync, assert } from './Acid.js';\n * assert(isKindAsync(async() => {}), true);\n*/\nexport function isKindAsync(value) {\n\tif (value) {\n\t\treturn isPromise(value) || isAsync(value);\n\t}\n\treturn false;\n}\n","export const decimalCheck = /\\.|\\+/;\n/**\n * Checks if the value (typically a number) as a string has a decimal point.\n *\n * @function isDecimal\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isDecimal } from './Acid.js';\n * isDecimal(1.01);\n * // => true\n*/\nexport const isDecimal = (value) => {\n\treturn decimalCheck.test(value.toString());\n};\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Int16Array.\n *\n * @function isI16\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isI16 } from './Acid.js';\n * isI16(new Int16Array());\n * // => true\n*/\nexport const isI16 = isConstructorFactory('Int16Array');\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the value is a number.\n *\n * @function isNumber\n * @category type\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isNumber } from './Acid.js';\n * isNumber(1);\n * // => true\n*/\nexport const isNumber = isConstructorFactory(Number);\n","import { hasValue } from './hasValue.js';\n/**\n * Checks if the source is a Set.\n *\n * @function isSet\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isSet } from './Acid.js';\n * isSet(new Set());\n * // => true\n*/\nconst objectSet = '[object Set]';\nexport function isSet(source) {\n\treturn (hasValue(source)) ? source.toString() === objectSet : false;\n}\n","import { isConstructorFactory } from './isConstructor.js';\n/**\n * Checks if the source is a Uint8ClampedArray.\n *\n * @function isU8C\n * @category type\n * @param {*} source - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isU8C } from './Acid.js';\n * isU8C(new Uint8ClampedArray());\n * // => true\n*/\nexport const isU8C = isConstructorFactory('Uint8ClampedArray');\n","export const getExtensionRegex = /\\.([0-9a-z]+)/;\n/**\n * Return the file extension.\n *\n * @function getFileExtension\n * @category file\n * @param {*} source - Object to be checked.\n * @returns {string} - Returns the extension.\n *\n * @example\n * getFileExtension('test.js');\n * // => 'js'\n*/\nexport function getFileExtension(source) {\n\tconst match = source.match(getExtensionRegex);\n\tif (match) {\n\t\treturn match[1];\n\t}\n}\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .css extension.\n *\n * @function isFileCSS\n * @category file\n * @param {string} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isFileCSS('test.css');\n * // => true\n*/\nexport const isFileCSS = regexTestFactory(/\\.css$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .html extension.\n *\n * @function isFileHTML\n * @category file\n * @param {string} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isFileHTML('test.html');\n * // => true\n*/\nexport const isFileHTML = regexTestFactory(/\\.html$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .js extension.\n *\n * @function isFileJS\n * @category file\n * @param {string} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isFileJS('test.js');\n * // => true\n*/\nexport const isFileJS = regexTestFactory(/\\.js$/);\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a .json extension.\n *\n * @function isFileJSON\n * @category file\n * @param {string} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isFileJSON('test.json');\n * // => true\n*/\nexport const isFileJSON = regexTestFactory(/\\.json$/);\n","/**\n * Chunks an array according to a user defined number.\n *\n * @function chunk\n * @category Array\n * @type {Function}\n * @param {Array} array - Array to be chunked.\n * @param {number} size - Number which determines the size of each chunk.\n * @returns {Array} - A chunked version of the source array.\n *\n * @example\n * import { chunk, assert } from './Acid.js';\n * assert(chunk([1,2,3], 1), [[1],[2],[3]]);\n */\nexport function chunk(array, size = 1) {\n\tconst chunked = [];\n\tlet index = 0;\n\tarray.forEach((item, key) => {\n\t\tif (!(key % size)) {\n\t\t\tchunked.push([]);\n\t\t\tif (key) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tchunked[index].push(item);\n\t});\n\treturn chunked;\n}\n","/**\n * Clears the values out of an array.\n *\n * @function clear\n * @category Array\n * @type {Function}\n * @param {Array} array - Takes an array to be emptied.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { clear, assert } from './Acid.js';\n * assert(clear([1,'B', 'Cat']), []);\n */\nexport function clear(array) {\n\tarray.length = 0;\n\treturn array;\n}\n\n","/**\n * Clears the values out of an array.\n *\n * @function cloneArray\n * @category Array\n * @type {Function}\n * @param {Array} array - Takes an array to be cloned.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { cloneArray, assert } from './Acid.js';\n * assert(cloneArray([1,'B', 'Cat']), [1, 'B', 'Cat']);\n */\nexport function cloneArray(array) {\n\treturn array.slice();\n}\n\n","/**\n * A simple function which returns the value it's given.\n *\n * @function returnValue\n * @category function\n * @param {*} source - The source object.\n * @returns {source} The source object.\n */\nexport function returnValue(source) {\n\treturn source;\n}\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the given array.\n *\n * @function eachArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} thisBind - An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { eachArray, assert } from './Acid.js';\n * const list = [];\n * eachArray([1, 2, 3], (item, index) => {\n *   list[index] = item;\n * });\n * assert(list, [1, 2, 3]);\n */\nexport function eachArray(source, iteratee, thisBind) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0;index < arrayLength;index++) {\n\t\titeratee(source[index], index, source, arrayLength, thisBind);\n\t}\n\treturn source;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { eachArray } from './each.js';\n/**\n * Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.\n *\n * @function compactMapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisBind - An object to be given each time to the iteratee.\n * @returns {Array} - An array with mapped properties that are not null or undefined.\n *\n * @example\n * import { compactMapArray, assert } from './Acid.js';\n * assert(compactMapArray([null, 2, 3], (item) => {\n *   return item;\n * }), [2, 3]);\n */\nexport function compactMapArray(source, iteratee = returnValue, results = [], thisBind) {\n\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\tconst returned = iteratee(item, index, results, arrayOriginal, arrayLength, thisBind);\n\t\tif (hasValue(returned)) {\n\t\t\tresults.push(returned);\n\t\t}\n\t});\n\treturn results;\n}\n\n","/**\n * Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.\n *\n * @function eachAsyncArray\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @returns {Array} - Returns source the originally given array.\n *\n * @example\n * import { eachAsyncArray, assert } from './Acid.js';\n * const tempList = [];\n * await eachAsyncArray([1, 2, 3], async (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [1, 2, 3]);\n */\nexport async function eachAsyncArray(source, iteratee) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tawait iteratee(source[index], index, source, arrayLength);\n\t}\n\treturn source;\n}\n\n","import { eachAsyncArray } from './eachAsync.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { hasValue } from '../type/hasValue.js';\n/**\n * Asynchronously iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.\n *\n * @function compactMapAsync\n * @type {Function}\n * @category array\n * @async\n * @param {Array} source - Array to be compacted.\n * @param {Function} iteratee - Iteratee to be performed on array.\n * @returns {Array} - Array values after being put through an iterator.\n *\n * @example\n * import { compactMapAsync, assert } from './Acid.js';\n * assert(await compactMapAsync([1, 2, 3, null], async (item) => {\n *   return item;\n * }), [1, 2, 3]);\n */\nexport async function compactMapAsync(source, iteratee = returnValue) {\n\tconst results = [];\n\tawait eachAsyncArray(source, async (item, index, arrayLength) => {\n\t\tconst result = await iteratee(item, index, results, arrayLength);\n\t\tif (hasValue(result)) {\n\t\t\tresults.push(result);\n\t\t}\n\t});\n\treturn results;\n}\n\n","export function rangeUp(start, end, incrementArg) {\n\tconst rangeArray = [];\n\tlet position = start;\n\twhile (position < end) {\n\t\trangeArray.push(position);\n\t\tposition += incrementArg;\n\t}\n\treturn rangeArray;\n}\nexport function rangeDown(start, end, incrementArg) {\n\tconst increment = (incrementArg < 0) ? incrementArg * -1 : incrementArg;\n\tconst rangeArray = [];\n\tlet position = start;\n\twhile (position > end) {\n\t\trangeArray.push(position);\n\t\tposition -= increment;\n\t}\n\treturn rangeArray;\n}\n/**\n * Create a numbered list of integers.\n *\n * @function range\n * @category array\n * @type {Function}\n * @param {number} start - Value which determines the start of the range.\n * @param {number} end - Value which determines the end of the range.\n * @param {number} step - Value used to step between integers.\n * @returns {Array} - An array of integers.\n *\n * @example\n * import { range, assert } from './Acid.js';\n * assert(range(0, 30, 5), [0, 5, 10, 15, 20, 25]);\n */\nexport function range(start, end, step = 1) {\n\tif (start < end) {\n\t\treturn rangeUp(start, end, step);\n\t} else {\n\t\treturn rangeDown(start, end, step);\n\t}\n}\n\n","import { keys } from '../object/keys.js';\nimport { eachArray } from '../array/each.js';\n/**\n * Iterates through the given object.\n *\n * @function eachObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys.\n * @returns {Object|Function} - Returns the calling object.\n *\n * @example\n * import { eachObject, assert } from './Acid.js';\n * assert(eachObject({a: 1, b: 2, c: 3}, (item) => {\n *   console.log(item);\n * }), {a: 1, b: 2, c: 3});\n */\nexport function eachObject(source, iteratee) {\n\tconst objectKeys = keys(source);\n\treturn eachArray(objectKeys, (key, index, original, propertyCount) => {\n\t\titeratee(source[key], key, source, propertyCount, original);\n\t});\n}\n\n","import { isArray } from '../type/isArray.js';\nimport { isPlainObject } from '../type/isPlainObject.js';\nimport { isFunction } from '../type/isFunction.js';\nimport { hasValue } from '../type/hasValue.js';\nfunction forEachWrap(object, callback) {\n\treturn object.forEach(callback);\n}\nexport function generateLoop(arrayLoop, objectLoop) {\n\treturn (source, iteratee, results) => {\n\t\tlet returned;\n\t\tif (!hasValue(source)) {\n\t\t\treturn;\n\t\t} else if (isArray(source)) {\n\t\t\treturned = arrayLoop;\n\t\t} else if (isPlainObject(source) || isFunction(source)) {\n\t\t\treturned = objectLoop;\n\t\t} else if (source.forEach) {\n\t\t\treturned = forEachWrap;\n\t\t} else {\n\t\t\treturned = objectLoop;\n\t\t}\n\t\treturn returned(source, iteratee, results);\n\t};\n}\n\n","import { eachArray } from '../array/each.js';\nimport { eachObject } from '../object/each.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the given object.\n *\n * @function each\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @returns {Array | object | Function} - The originally given object.\n *\n * @example\n * import { each, assert } from './Acid.js';\n * const list = {};\n * each({a: 1, b: 2, c: 3}, (item, key) => {\n *   list[key] = item;\n * });\n * assert(list, {a: 1, b: 2, c: 3});\n */\nexport const each = generateLoop(eachArray, eachObject);\n\n","import { isArray } from '../type/isArray.js';\nimport { hasValue } from '../type/hasValue.js';\n/**\n  * Ensures the object is an array. If not wraps in array.\n  *\n  * @function ensureArray\n  * @category array\n  * @type {Function}\n  * @param {*} object - Data to be checked.\n  * @returns {Array} - Returns an array.\n  *\n  * @example\n  * ensureArray('Hello');\n  * // => ['Hello']\n  *\n  * @example\n  * ensureArray({a:1, b:2})\n  * // => [{a:1, b:2}]\n*/\nexport const ensureArray = (object) => {\n\treturn (isArray(object) && object) || (hasValue(object) && [object]) || [];\n};\n\n","import { ensureArray } from './ensure.js';\n/**\n * Flattens an array to a single level.\n *\n * @function flattenDeep\n * @type {Function}\n * @category array\n * @param {Array} source - Array to flatten.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * import { flattenDeep, assert } from './Acid.js';\n * assert(flattenDeep([1, [2, [3, [4]], 5]]), [1, 2, 3, 4, 5]);\n */\nexport function flattenDeep(source) {\n\treturn source.flat(Infinity);\n}\n\n","/**\n * A function which acts like the \"new\" operator and can pass arguments. This is a safe version of the original which will error if given undefined\n * This is useful when working with classes and prefering to avoid the new operator and it's potential side effects.\n *\n * @function construct\n * @category class\n * @param {Function} target - The target function or class.\n * @param {Array} [argumentsList =[]] - An array-like object specifying the arguments with which target should be called. Default value is a new empty array.\n * @param {Array} newTarget - The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target.\n * @returns {*} - A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.\n *\n * @example\n * const newClass = construct(function (a) {return a;}, []);\n * // => 2\n */\nconst reflectConstruct = Reflect.construct;\nexport function construct(target, argumentsList = [], newTarget) {\n\tif (newTarget) {\n\t\treturn reflectConstruct(target, argumentsList, newTarget);\n\t}\n\treturn reflectConstruct(target, argumentsList);\n}\n","import { eachArray } from './each.js';\nimport { each } from '../utility/each.js';\nimport { flattenDeep } from './flattenDeep.js';\nimport { construct } from '../class/construct.js';\n/**\n * Checks for primitive differences between a source array and other arrays, then returns a new array containing those differences.\n *\n * @function difference\n * @category array\n * @type {Function}\n * @param {Array} source - Source array.\n * @param {...Array} compare - Array(s) source array is compared against.\n * @returns {Array} - An array which contains the differences between the source and compare array.\n *\n * @example\n * import { difference, assert } from './Acid.js';\n * assert(difference([1, 2, 3], [1, 2]));\n */\nexport function difference(...sources) {\n\tconst differencesMap = construct(Map);\n\tconst differences = [];\n\teachArray(sources, (currentArray, parentIndex) => {\n\t\teachArray(currentArray, (child, childIndex) => {\n\t\t\tlet childRoot = differencesMap.get(child);\n\t\t\tif (!childRoot) {\n\t\t\t\tchildRoot = {\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tparentIndex,\n\t\t\t\t\tchild\n\t\t\t\t};\n\t\t\t\tdifferencesMap.set(child, childRoot);\n\t\t\t} else if (childRoot.parentIndex === parentIndex) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tchildRoot.count++;\n\t\t\t}\n\t\t});\n\t});\n\teach(differencesMap, (item) => {\n\t\tif (item.count === 1 && item.parentIndex === 0) {\n\t\t\tdifferences.push(item.child);\n\t\t}\n\t});\n\treturn differences;\n}\n\n","/**\n * Removes all items from an array after a specified index.\n *\n * @function drop\n * @category array\n * @type {Function}\n * @param {Array} array - Source array.\n * @param {number} amount - Amount of items to drop from the array.\n * @param {number} [upTo = array.length] - Index to stop at.\n * @returns {Array} - An array with all values removed after a user defined index.\n *\n * @example\n * import { drop, assert } from './Acid.js';\n * assert(drop([1, 2, 3], 1), [2, 3]);\n */\nexport function drop(array, amount, upTo = array.length) {\n\treturn array.splice(amount, upTo);\n}\n\n","import { drop } from './drop.js';\n/**\n * Removes all items from an array before a specified index.\n *\n * @function dropRight\n * @type {Function}\n * @category array\n * @param {Array} array - Source array.\n * @param {number} amount - Amount of items to drop from the array.\n * @param {number} [upTo = array.length] - Index to stop at.\n * @returns {Array} - An array with all values removed before a user defined index.\n *\n * @example\n * import { dropRight, assert } from './Acid.js';\n * assert(dropRight([1, 2, 3], 1), [1, 2]);\n */\nexport const dropRight = (array, amount, upTo = array.length) => {\n\treturn drop(array, 0, upTo - amount);\n};\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the given array in reverse.\n *\n * @function eachRight\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { eachRight, assert } from './Acid.js';\n * const tempList = [];\n * await eachRight([1, 2, 3], (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [3, 2, 1]);\n */\nexport function eachRight(source, iteratee, thisBind) {\n\tconst arrayLength = source.length;\n\tfor (let index = arrayLength - 1;index >= 0;index--) {\n\t\titeratee(source[index], index, source, arrayLength, thisBind);\n\t}\n\treturn source;\n}\n\n","/**\n * Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.\n *\n * @function eachRightAsync\n * @category array\n * @type {Function}\n * @async\n * @param {Array} callingArray - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @returns {Object} - The originally given array.\n *\n * @example\n * import { eachRightAsync, assert } from './Acid.js';\n * const tempList = [];\n * await eachRightAsync([1, 2, 3], async (item) => {\n *   tempList.push(item);\n * });\n * assert(tempList, [3, 2, 1]);\n */\nexport async function eachRightAsync(callingArray, iteratee) {\n\tconst arrayLength = callingArray.length;\n\tfor (let index = arrayLength - 1; index >= 0; index--) {\n\t\tawait iteratee(callingArray[index], index, callingArray, arrayLength);\n\t}\n\treturn callingArray;\n}\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the given array while the iteratee returns true.\n *\n * @function everyArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - Returns true if all returns are true or false if one value returns false.\n *\n * @example\n * import { everyArray, assert } from './Acid.js';\n * assert(everyArray([true, true, false], (item) => {\n *   return item;\n * }), false);\n */\nexport function everyArray(source, iteratee, thisBind) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0;index < arrayLength;index++) {\n\t\tif (iteratee(source[index], index, source, arrayLength, thisBind) === false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { eachArray } from './each.js';\n/**\n * Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.\n *\n * @function filterArray\n * @category array\n * @type {Function}\n * @category array\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - An array with properties that passed the test.\n *\n * @example\n * import { filterArray, assert } from './Acid.js';\n * assert(filterArray([false, true, true], (item) => {\n *   return item;\n * }), [true, true]);\n */\nexport function filterArray(source, iteratee, results = [], thisBind) {\n\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\tif (iteratee(item, index, results, arrayOriginal, arrayLength, thisBind) === true) {\n\t\t\tresults.push(item);\n\t\t}\n\t});\n\treturn results;\n}\n\n","/**\n * Takes the first or multiple items from an array.\n *\n * @function first\n * @type {Function}\n * @category array\n * @param {Array} array - Array to extract from.\n * @param {number} upTo - Number which determines how many items after the first item are extracted from the array.\n * @returns {Array} - Returns an array.\n *\n * @example\n * import { first, assert } from './Acid.js';\n * assert(first([1, 2, 3]), 1);\n */\nexport function first(array, upTo) {\n\treturn (upTo) ? array.slice(0, upTo) : array[0];\n}\n\n","import { ensureArray } from '../array/ensure.js';\n/**\n * Flattens an array up to the provided level.\n *\n * @function flatten\n * @type {Function}\n * @category array\n * @param {Array} source - Array to flatten.\n * @param {number} [level = 1] - Number which determines how deep the array nest can be.\n * @returns {Array} - Returns an array.\n *\n * @example\n * import { flatten, assert } from './Acid.js';\n * assert(flatten([1, [2, [3, [4]], 5]]), [1, 2, [3, [4]], 5]);\n */\nexport function flatten(source, level = 1) {\n\tlet sourceArray = source;\n\tfor (let i = 0; i < level; i++) {\n\t\tsourceArray = sourceArray.reduce((previousValue, currentValue) => {\n\t\t\treturn previousValue.concat(ensureArray(currentValue));\n\t\t}, []);\n\t}\n\treturn sourceArray;\n}\n\n","/**\n * Takes all but the last item in the array.\n *\n * @function initial\n * @category array\n * @type {Function}\n * @param {Array} array - Array to have items extracted from.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * import { initial, assert } from './Acid.js';\n * assert(initial([1, 2, 3, 4, 5]), [1, 2, 3, 4]);\n */\nexport function initial(array) {\n\treturn array.slice(0, array.length - 1);\n}\n\n","import { compactMapArray } from './compactMap.js';\nimport { everyArray } from './every.js';\n// Add intersectionBy & intersectionWith\n/**\n * Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory))\n * of the array and the input array(s).\n *\n * @function intersection\n * @param {Array} array - Array to compare other arrays to.\n * @param {...Array} arrays - A variable number of arrays.\n * @category array\n * @returns {Array} - The new array of unique values shared by all of the arrays.\n *\n * @example\n * import { intersection, assert } from './Acid.js';\n * assert(intersection([1, 2, 3], [2, 3, 4]), [2, 3]);\n */\nexport function intersection(array, ...arrays) {\n\treturn compactMapArray(array, (item) => {\n\t\tconst shouldReturn = everyArray(arrays, (otherItem) => {\n\t\t\treturn otherItem.includes(item);\n\t\t});\n\t\tif (shouldReturn) {\n\t\t\treturn item;\n\t\t}\n\t});\n}\n\n","import { everyArray } from '../array/every.js';\nimport { keys } from '../object/keys.js';\n/**\n * Checks to see if an object has all of the given property names.\n *\n * @function hasKeys\n * @category object\n * @type {Function}\n * @param {Object} object - Object from which keys are extracted.\n * @param {Array} properties - Array of object keys.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Thor']);\n * // => true\n *\n * @example\n * hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Tom']);\n * // => false\n */\nexport function hasKeys(object, properties) {\n\tconst objectKeys = keys(object);\n\treturn everyArray(properties, (item) => {\n\t\treturn objectKeys.includes(item);\n\t});\n}\n/**\n * Checks to see if an object has any of the given property names.\n *\n * @function hasAnyKeys\n * @category object\n * @type {Function}\n * @param {Object} object - Object from which keys are extracted.\n * @param {Array} properties - Array of object keys.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy', 'Tom']);\n * // => true\n * @example\n * hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Other', 'Tom']);\n * // => false\n */\nexport function hasAnyKeys(object, properties) {\n\tconst objectKeys = keys(object);\n\treturn Boolean(properties.find((item) => {\n\t\treturn objectKeys.includes(item);\n\t}));\n}\n\n","import { hasKeys } from '../object/hasKeys.js';\nimport { everyArray } from '../array/every.js';\nimport { keys } from '../object/keys.js';\nimport { isArray } from '../type/isArray.js';\nimport { isPlainObject } from '../type/isPlainObject.js';\n/**\n * Performs a deep comparison between two objects.\n *\n * @function isEqual\n * @type {Function}\n * @category utility\n * @param {*} source - Source object.\n * @param {*} compareObject - Object to compare to source.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isEqual, assert } from './Acid.js';\n * assert(isEqual({a: [1,2,3]}, {a: [1,2,3]}), true);\n */\n// Add map & buffer Support\nexport const isEqual = (source, compareObject) => {\n\tif (source === compareObject) {\n\t\treturn true;\n\t} else if (source.toString() === compareObject.toString()) {\n\t\tif (isPlainObject(source)) {\n\t\t\tconst sourceProperties = keys(source);\n\t\t\tif (hasKeys(compareObject, sourceProperties)) {\n\t\t\t\treturn everyArray(sourceProperties, (key) => {\n\t\t\t\t\treturn isEqual(source[key], compareObject[key]);\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (isArray(source)) {\n\t\t\tif (source.length === compareObject.length) {\n\t\t\t\treturn everyArray(source, (item, index) => {\n\t\t\t\t\treturn isEqual(item, compareObject[index]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n","import { everyArray } from './every.js';\nimport { isEqual } from '../utility/isEqual.js';\n/**\n * Performs a shallow strict comparison between two objects.\n *\n * @function isMatchArray\n * @type {Function}\n * @category array\n * @param {Array} source - Source object.\n * @param {Array} compareArray - Object to compare to source.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * import { isMatchArray, assert } from './Acid.js';\n * assert(isMatchArray([1, 2, 3], [1, 2, 3]), true);\n */\nexport function isMatchArray(source, compareArray) {\n\tif (source.length === compareArray.length) {\n\t\treturn everyArray(source, (item, index) => {\n\t\t\treturn isEqual(compareArray[index], item);\n\t\t});\n\t}\n\treturn false;\n}\n\n","const mathNativeMax = Math.max;\n/**\n * Plucks the largest value from an array.\n *\n * @function largest\n * @type {Function}\n * @category array\n * @param {Array} array - Array from which largest number is taken.\n * @returns {number} - The largest number.\n *\n * @example\n * import { largest, assert } from './Acid.js';\n * assert(largest([1,2,3]), 3);\n */\nexport function largest(array) {\n\treturn mathNativeMax(...array);\n}\n\n","/**\n * Extracts item(s) from an array starting from the last item in the array.\n *\n * @function last\n * @type {Function}\n * @category array\n * @param {Array} array - Array to have items extracted from.\n * @param {number} [indexFrom = 0] - Value which determines how many items are extracted from the array.\n * @returns {Array} - Items from the array.\n *\n * @example\n * import { last, assert } from './Acid.js';\n * assert(last([1, 2, 3, 4, 5] , 2), [4, 5]);\n */\nexport function last(array, indexFrom) {\n\tconst arrayLength = array.length;\n\treturn (indexFrom) ? array.slice(arrayLength - indexFrom, arrayLength) : array[arrayLength - 1];\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { eachArray } from './each.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n *\n * @function mapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapArray, assert } from './Acid.js';\n * assert(mapArray([1, 2, 3], (item) => {\n *   return item * 2;\n * }), [2, 4, 6]);\n */\nexport function mapArray(source, iteratee, results = [], thisBind) {\n\teachArray(source, (item, index, arrayOriginal, arrayLength) => {\n\t\tresults[index] = iteratee(item, index, results, arrayOriginal, arrayLength, thisBind);\n\t});\n\treturn results;\n}\n","import { eachAsyncArray } from './eachAsync.js';\n/**\n * Asynchronously iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n *\n * @function mapAsyncArray\n * @category array\n * @type {Function}\n * @async\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapAsyncArray, assert } from './Acid.js';\n * assert(await mapAsyncArray([1, 2, 3], async (item) => {\n *   return item * 2;\n * }), [2, 4, 6]);\n */\nexport async function mapAsyncArray(source, iteratee) {\n\tconst results = [];\n\tawait eachAsyncArray(source, async (item, index, arrayLength) => {\n\t\tresults[index] = await iteratee(item, index, arrayLength);\n\t});\n\treturn results;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { eachArray } from './each.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.\n *\n * @function mapRightArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - An array of the same calling array's type.\n *\n * @example\n * import { mapRightArray, assert } from './Acid.js';\n * assert(mapRightArray([1, 2, 3], (item) => {\n *   return item * 2;\n * }), [6, 4, 2]);\n */\nexport function mapRightArray(source, iteratee, results = [], thisBind) {\n\tlet trueIndex = 0;\n\tconst arrayLength = source.length;\n\tfor (let index = arrayLength - 1;index >= 0;index--) {\n\t\tresults[trueIndex] = iteratee(source[index], index, source, arrayLength, thisBind);\n\t\ttrueIndex++;\n\t}\n\treturn results;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\nimport { eachArray } from './each.js';\n/**\n * Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.\n *\n * @function mapWhile\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - An array with properties that passed the test.\n *\n * @example\n * import { mapWhile, assert } from './Acid.js';\n * assert(mapWhile([1, 2, 0], (item) => {\n *   return Boolean(item);\n * }), [1, 2]);\n */\nexport function mapWhile(source, iteratee, results = [], thisBind) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0;index < arrayLength;index++) {\n\t\tconst item = source[index];\n\t\tconst returned = iteratee(item, index, results, source, arrayLength, thisBind);\n\t\tif (returned === false) {\n\t\t\tbreak;\n\t\t}\n\t\tresults[index] = item;\n\t}\n\treturn results;\n}\n\n","export const numericalCompare = (a, b) => {\n\treturn a - b;\n};\n/**\n * Sorts an array in place using a numerical comparison algorithm from lowest to highest.\n *\n * @function numSort\n * @category array\n * @type {Function}\n * @param {Array} numberList - Array of numbers.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * numSort([10, 0, 2, 1]);\n * // => [0, 1, 2, 10]\n */\nexport function numSort(numberList) {\n\treturn numberList.sort(numericalCompare);\n}\n\n","import { eachArray } from './each.js';\n/**\n * Takes all but the last item in the array.\n *\n * @function arrayToObject\n * @type {Function}\n * @category array\n * @param {Array} source - Array to have items extracted from.\n * @param {Array} properties - Array to have items extracted from.\n * @returns {Array} - Returns a completely flattened array.\n *\n * @example\n * arrayToObject([1, 2, 3], ['i', 'love', 'lucy']);\n * // => {i:1, love:2, lucy: 3}\n */\nexport function arrayToObject(source, properties) {\n\tconst sortedObject = {};\n\teachArray(source, (item, key) => {\n\t\tsortedObject[properties[key]] = item;\n\t});\n\treturn sortedObject;\n}\n\n","import { compactMapArray } from './compactMap.js';\n/**\n * Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.\n *\n * @function partition\n * @type {Function}\n * @category array\n * @param {Array} array - Takes an array to split.\n * @param {Function} funct - Function run on each item in array.\n * @returns {Array} - One array split into two arrays.\n *\n * @example\n * partition([\n *  {user: 'barney', age: 36, active: false},\n *  {user: 'fred', age: 40, active: true},\n *  {user: 'pebbles', age: 1,  active: false}\n * ], (item) => { return item.active; });\n * // => [\n * [{\"user\":\"fred\",\"age\":40,\"active\":true}],\n *   [{\"user\":\"barney\",\"age\":36,\"active\":false},\n *   {\"user\":\"pebbles\",\"age\":1,\"active\":false}]]\n */\nexport function partition(array, funct) {\n\tconst failed = [];\n\treturn [\n\t\tcompactMapArray(array, (item) => {\n\t\t\tif (funct(item)) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\tfailed.push(item);\n\t\t}),\n\t\tfailed\n\t];\n}\n\n","export const numericalCompareReverse = (a, b) => {\n\treturn b - a;\n};\n/**\n * Sorts an array in place using a reverse numerical comparison algorithm from highest to lowest.\n *\n * @function rNumSort\n * @category array\n * @param {Array} numberList - Array of numbers.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * rNumSort([10, 0, 2, 1]);\n * // => [10, 2, 1, 0]\n */\nexport function rNumSort(numberList) {\n\treturn numberList.sort(numericalCompareReverse);\n}\n\n","/**\n * Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.\n *\n * @function remove\n * @category array\n * @param {Array} array - Array to be mutated.\n * @param {string|Array} removeThese - Items to remove from the array.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * remove([1, 2, 3, 3, 4, 3, 5], 1);\n * // => [2, 3, 3, 4, 3, 5]\n * @example\n * remove([3, 3, 4, 5], 3, 4);\n * // => [5]\n */\nexport function remove(array, removeThese) {\n\tlet arrayLength = array.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst item = array[index];\n\t\tif (removeThese.includes(item)) {\n\t\t\tarray.splice(index, 1);\n\t\t\tindex--;\n\t\t\tarrayLength--;\n\t\t}\n\t}\n\treturn array;\n}\n/**\n * Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.\n *\n * @function removeBy\n * @category array\n * @param {Array} source - Array to be mutated.\n * @param {Function} iteratee - Function used to check object. Return true to remove the value.\n * @returns {Array} - The array this method was called on.\n *\n * @example\n * removeBy([1, 2, 3, 3, 4, 3, 5], (item) => { return Boolean(item % 2);});\n * // => [2, 4]\n */\nexport function removeBy(source, iteratee) {\n\tlet arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst item = source[index];\n\t\tif (iteratee(item, index)) {\n\t\t\tsource.splice(index, 1);\n\t\t\tindex--;\n\t\t\tarrayLength--;\n\t\t}\n\t}\n\treturn source;\n}\n\n","/**\n * Extracts all items in array except the first and last item.\n *\n * @function rest\n * @type {Function}\n * @category array\n * @param {Array} array - Array to be sliced.\n * @returns {Array} - Returns the aggregated array.\n *\n * @example\n * rest([1, 2, 3, 4, 5]);\n * // => [2, 3, 4, 5]\n */\nexport function rest(array) {\n\treturn array.slice(1, array.length);\n}\n\n","/**\n * Get the item at the supplied index starting at the end of the array.\n *\n * @function right\n * @type {Function}\n * @category array\n * @param {Array} source - Array to be sliced.\n * @param {number} amount - Amount from the right.\n * @returns {*} - Returns the object at the evaluated position.\n *\n * @example\n * right([1, 2, 3, 4, 5] , 1);\n * // => 4\n */\nexport function right(source, amount) {\n\treturn source[source.length - 1 - amount];\n}\n\n","const mathNative = Math;\nconst floorMethod = mathNative.floor;\nconst randomMethod = mathNative.random;\n/**\n  * Adds two numbers.\n  *\n  * @function add\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the sum of the arguments.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * add(1, 1);\n  * // => 2\n*/\nexport const add = (number, value) => {\n\treturn number + value;\n};\n/**\n  * Subtracts two numbers.\n  *\n  * @function minus\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the difference of the arguments.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * minus(1, 1);\n  * // => 0\n*/\nexport const minus = (number, value) => {\n\treturn number - value;\n};\n/**\n  * Divides two numbers.\n  *\n  * @function divide\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the quotient of the arguments.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * divide(10, 5);\n  * // => 2\n*/\nexport const divide = (number, value) => {\n\treturn number / value;\n};\n/**\n  * Multiplies two numbers.\n  *\n  * @function multiply\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the product of the arguments.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * multiply(10, 5);\n  * // => 50\n*/\nexport const multiply = (number, value) => {\n\treturn number * value;\n};\n/**\n  *  Extracts the remainder between two numbers.\n  *\n  * @function remainder\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @param {number} value - Second number.\n  * @returns {number} - Returns the remainder of the arguments.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * remainder(10, 6);\n  * // => 4\n*/\nexport const remainder = (number, value) => {\n\treturn number % value;\n};\n/**\n  *  Increments a number.\n  *\n  * @function increment\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @returns {number} - Returns an incremented version of the number.\n  *\n  * @example\n  * increment(10);\n  * // => 11\n*/\nexport const increment = (number) => {\n\treturn number + 1;\n};\n/**\n  *  Decrements a number.\n  *\n  * @function deduct\n  * @category number\n  * @type {Function}\n  * @param {number} number - First number.\n  * @returns {number} - Returns a decremented version of the number.\n  *\n  * @example\n  * deduct(10);\n  * // => 9\n*/\nexport const deduct = (number) => {\n\treturn number - 1;\n};\n/**\n  *  Produces a random number between min (included) and max (excluded).\n  *\n  * @function randomArbitrary\n  * @category number\n  * @type {Function}\n  * @param {number} max - Establishes highest possible value for the random number.\n  * @param {number} [min = 0] - Establishes lowest possible value for the random number.\n  * @returns {number} - Returns random integer between the max and min range.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * randomArbitrary(10);\n  * // => 9.1\n*/\nexport const randomArbitrary = (max, min = 0) => {\n\treturn randomMethod() * (max - min) + min;\n};\n// make random account for a single arg as well as if two arguments were passed with low to high\n/**\n  *  Produces a random integer between min (included) and max (excluded).\n  *\n  * @function randomInt\n  * @category number\n  * @type {Function}\n  * @param {number} max - Establishes highest possible value for the random number.\n  * @param {number} [min = 0] - Establishes lowest possible value for the random number.\n  * @returns {number} - Returns random integer between the max and min range.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * randomInt(10);\n  * // => 9\n*/\nexport const randomInt = (max, min = 0) => {\n\treturn floorMethod(randomMethod() * (max - min)) + min;\n};\n\n","import { randomInt } from '../number/math.js';\nimport { toArray } from '../internal/array.js';\n/**\n * Shuffle an array and return a new array.\n *\n * @function shuffle\n * @category array\n * @param {Array} target - Target Array to be shuffled.\n * @param {number} amount - The amount of times to shuffle the array.\n * @returns {Array} - An array with the shuffled results.\n *\n * @test\n * (async () => {\n *   const tempResult = shuffle([1, 2]);\n *   return assert(tempResult.includes(1) && tempResult.includes(2), true);\n * });\n *\n * @example\n * shuffle([1, 2, 3, 4]);\n * // => [3, 4, 2, 1]\n */\nexport function shuffle(target, amount = target.length) {\n\tif (target.length <= 1) {\n\t\treturn toArray(target);\n\t}\n\tconst shuffleArray = toArray(target);\n\tlet count = 0;\n\tlet index;\n\tlet value;\n\twhile (count < amount) {\n\t\tindex = randomInt(shuffleArray.length - 1, 0);\n\t\tvalue = shuffleArray[count];\n\t\tshuffleArray[count] = shuffleArray[index];\n\t\tshuffleArray[index] = value;\n\t\tcount++;\n\t}\n\treturn shuffleArray;\n}\n\n","import { randomInt } from '../number/math.js';\nimport { shuffle } from './shuffle.js';\n/**\n * Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.\n *\n * @function sample\n * @category array\n * @param {Array} source - The array to pull sample(s) from.\n * @param {number} amount - The amount of samples to take.\n * @returns {Array} - An array of randomly pulled samples.\n *\n * @test\n * (async () => {\n *   const tempResult = sample([1, 2] , 2);\n *   return assert(tempResult.includes(1) && tempResult.includes(2), true);\n * });\n *\n * @example\n * sample([1, 2, 3, 4] , 2);\n * // => [1, 3]\n */\nexport function sample(source, amount) {\n\tif (!source) {\n\t\treturn false;\n\t}\n\tconst arrayLength = source.length;\n\tif (arrayLength === amount || amount > arrayLength) {\n\t\treturn shuffle(source);\n\t}\n\tif (amount === 1) {\n\t\treturn [source[randomInt(arrayLength - 1, 0)]];\n\t}\n\tconst sampleArray = [];\n\tconst used = {};\n\tlet count = 0;\n\tlet index;\n\twhile (count < amount) {\n\t\tindex = randomInt(source.length - 1, 0);\n\t\tif (!used[index]) {\n\t\t\tsampleArray.push(source[index]);\n\t\t\tused[index] = true;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn sampleArray;\n}\n\n","const mathNativeMin = Math.min;\n/**\n * Plucks the smallest value from an array.\n *\n * @function smallest\n * @category array\n * @type {Function}\n * @param {Array} array - Array from which smallest number is taken.\n * @returns {number} - The smallest number.\n *\n * @example\n * smallest([1,2,3]);\n * // => 1\n */\nexport function smallest(array) {\n\treturn mathNativeMin(...array);\n}\n\n","import { everyArray } from './every.js';\n/**\n * Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.\n *\n * @function sortedIndex\n * @category array\n * @type {Function}\n * @param {Array} array - Array to be sorted.\n * @param {number} insertThis - Number to be inserted.\n * @returns {number} - The index at which to insert.\n *\n * @example\n * sortedIndex([30, 50], 40);\n * // => 1\n */\nexport function sortedIndex(array, insertThis) {\n\tlet min = 0;\n\teveryArray(array, (item, index) => {\n\t\tmin = index;\n\t\tif (insertThis > item) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t});\n\treturn min;\n}\n\n","/**\n * Reduces the values in an array into a single number.\n *\n * @function sum\n * @category array\n * @type {Function}\n * @param {Array} array - Array to be reduced.\n * @returns {number} - Returns a single value.\n *\n * @example\n * sum([1, 2, 3, 4]);\n * // => 10\n */\nexport function sum(array) {\n\treturn array.reduce((a, b) => {\n\t\treturn a + b;\n\t}, 0);\n}\n\n","/**\n * Returns a shallow copy of the array up to an amount.\n *\n * @function take\n * @category array\n * @type {Function}\n * @param {Array} source - The source array to take from.\n * @param {Array} [endIndex = 1] - Zero-based index before which to end extraction.\n * @returns {Array} - The aggregated array.\n *\n * @example\n * import { take, assert } from './Acid.js';\n * assert(take([1,2,3], 2), [1, 2]);\n */\nexport function take(source, endIndex = 1) {\n\treturn source.slice(0, endIndex);\n}\n\n","export function onlyUnique(value, index, array) {\n\treturn array.indexOf(value) === index;\n}\nexport function sortUnique(item, index, array) {\n\treturn item !== array[index - 1];\n}\n/**\n * Filters the array down to unique elements.\n *\n * @function unique\n * @category array\n * @type {Function}\n * @param {Array} source - The array to be filtered.\n * @param {Boolean} isSorted - Flag which means the array is already sorted.\n * @returns {Array} - The filtered array.\n *\n * @example\n * unique([1, 2, 2, 4]);\n * // => [1, 2, 4]\n */\nexport function unique(source, isSorted) {\n\tif (isSorted) {\n\t\treturn source.filter(sortUnique);\n\t}\n\treturn source.filter(onlyUnique);\n}\n\n","import { flattenDeep } from './flattenDeep.js';\nimport { unique } from './unique.js';\n/**\n * Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.\n *\n * @function union\n * @category array\n * @type {Function}\n * @param {...Array} arrays - The arrays to be evaluated.\n * @returns {Array} - The aggregated array.\n *\n * @example\n * union([1,2,4], [1,2,3]);\n * // => [1, 2, 4, 3]\n */\nexport function union(...arrays) {\n\treturn unique(flattenDeep(arrays));\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the calling object and creates a new object based on the calling object's type with the results,\n * (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n * Re-checks the length each loop.\n *\n * @function whileCompactMap\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileCompactMap, assert } from './Acid.js';\n * assert(whileCompactMap([1, 2, 3, false, undefined, null], (item) => {\n *   return item;\n * }), [1, 2, 3, false]);\n */\nexport function whileCompactMap(source, iteratee, results = [], thisBind) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\tconst result = results.push(iteratee(source[index], index, source, source.length, thisBind));\n\t\tindex++;\n\t\tif (hasValue(result)) {\n\t\t\tresults.push(result);\n\t\t}\n\t}\n\treturn source;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the given array but re-checks the length each loop. Usefull while mutating the same array being looped over.\n *\n * @function whileEachArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {*} thisBind -An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileEachArray, assert } from './Acid.js';\n * const list = [];\n * whileEachArray([1, 2, 3], (item, index) => {\n *   list[index] = item;\n * });\n * assert(list, [1, 2, 3]);\n */\nexport function whileEachArray(source, iteratee, thisBind) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\titeratee(source[index], index, source, source.length, thisBind);\n\t\tindex++;\n\t}\n\treturn source;\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.\n * Re-checks the length each loop.\n *\n * @function whileMapArray\n * @category array\n * @type {Function}\n * @param {Array} source - Array that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, index, calling array, and array length.\n * @param {Array} results - Array that will be used to assign results. Default value is a new empty array.\n * @param {*} thisBind - An object to be given each time to the iteratee.\n * @returns {Array} - The originally given array.\n *\n * @example\n * import { whileMapArray, assert } from './Acid.js';\n * assert(whileMapArray([1, 2, 3], (item, index, source) => {\n *   if (index === 0) {\n *     source.push(4);\n *   }\n *   return item;\n * }), [1, 2, 3, 4]);\n */\nexport function whileMapArray(source, iteratee, results = [], thisBind) {\n\tlet index = 0;\n\twhile (index < source.length) {\n\t\tresults.push(iteratee(source[index], index, source, source.length, thisBind));\n\t\tindex++;\n\t}\n\treturn source;\n}\n\n","/**\n * Returns a copy of the array with all instances of the values removed.\n *\n * @function without\n * @type {Function}\n * @category array\n * @param {Array} target - The target array to be filtered.\n * @param {Array} removeThese - Items to be removed.\n * @returns {Array} - The target array filtered.\n *\n * @example\n * without([1, 2, 2, 4], [4]);\n * // => [1, 2, 2]\n */\nexport function without(target, removeThese) {\n\treturn target.filter((item) => {\n\t\treturn !removeThese.includes(item);\n\t});\n}\n\n","import { eachArray } from './each.js';\nimport { each } from '../utility/each.js';\nimport { difference } from './difference.js';\nimport { construct } from '../class/construct.js';\n/**\n * Creates an array that is the symmetric difference of the provided arrays.\n *\n * @function xor\n * @category array\n * @type {Function}\n * @param {...Array} arrays - The array(s) to be filtered.\n * @returns {Array} - The filtered array.\n *\n * @example\n * xor([2, 1], [2, 3, 5], [6]);\n * // => [1, 3, 5, 6]\n */\nexport function xor(...sources) {\n\tconst xorMap = construct(Map);\n\tconst xored = [];\n\tconst sourcesLength = sources.length;\n\tif (sourcesLength === 2) {\n\t\treturn difference(sources[0], sources[1]);\n\t}\n\teachArray(sources, (currentArray, parentIndex) => {\n\t\teachArray(currentArray, (child, childIndex) => {\n\t\t\tlet childRoot = xorMap.get(child);\n\t\t\tif (!childRoot) {\n\t\t\t\tchildRoot = {\n\t\t\t\t\tcount: 1,\n\t\t\t\t\tparentIndex,\n\t\t\t\t\tchild\n\t\t\t\t};\n\t\t\t\txorMap.set(child, childRoot);\n\t\t\t} else if (childRoot.parentIndex === parentIndex) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tchildRoot.count++;\n\t\t\t}\n\t\t});\n\t});\n\teach(xorMap, (item) => {\n\t\tif (item.count === 1) {\n\t\t\txored.push(item.child);\n\t\t}\n\t});\n\treturn xored;\n}\n\n","/**\n * Merges together the values of each of the arrays with the values at the corresponding position.\n *\n * @function zip\n * @type {Function}\n * @category array\n * @param {Array} arrays - The arrays to process.\n * @returns {Array} - Returns the new array of regrouped elements.\n *\n * @example\n * zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n */\nexport function zip(...arrays) {\n\treturn arrays[0].map((item, index) => {\n\t\treturn arrays.map((array) => {\n\t\t\treturn array[index];\n\t\t});\n\t});\n}\n/**\n * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.\n *\n * @function unZip\n * @type {Function}\n * @category array\n * @param {Array} source - The array of grouped elements to process.\n * @returns {Array} - Returns the new array of regrouped elements.\n *\n * @example\n * unZip([['a', 1, true], ['b', 2, false]]);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nexport function unZip(source) {\n\treturn source[0].map((item, index) => {\n\t\treturn source.map((arraySet) => {\n\t\t\treturn arraySet[index];\n\t\t});\n\t});\n}\n\n","import { eachArray } from '../array/each.js';\n/**\n * Creates an object composed of keys generated from the results of running each element of collection through iteratee.\n *\n * @function countBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} iteratee - The iteratee to transform keys.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * countBy([{a:1}, {a:3}], (item) => { return 'a';});\n * // => {a: 2}\n */\nexport function countBy(collection, iteratee) {\n\tconst object = {};\n\tlet result;\n\teachArray(collection, (item) => {\n\t\tresult = iteratee(item);\n\t\tif (!object[result]) {\n\t\t\tobject[result] = 0;\n\t\t}\n\t\tobject[result]++;\n\t});\n\treturn object;\n}\n/**\n * Count the amount of times a key is present in a collection.\n *\n * @function countKey\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} propertyName - The name of the key.\n * @returns {number} - The count.\n *\n * @example\n * countKey([{a:1}, {a:3}], 'a');\n * // => 2\n */\nexport function countKey(collection, propertyName) {\n\tlet count = 0;\n\teachArray(collection, (item) => {\n\t\tif (item[propertyName]) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n}\n/**\n * Count the amount of times a key is not present in a collection.\n *\n * @function countWithoutKey\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {string} propertyName - The name of the key.\n * @returns {number} - The count.\n *\n * @example\n * countWithoutKey([{a:1}, {a:3}], 'b');\n * // => 2\n */\nexport function countWithoutKey(collection, propertyName) {\n\tlet count = 0;\n\teachArray(collection, (item) => {\n\t\tif (!item[propertyName]) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n}\n\n","function findIndexCache(element, index, array, indexMatch, propertyName) {\n\tif (element[propertyName] === indexMatch) {\n\t\treturn true;\n\t}\n}\n/**\n * Finds an object in a collection by the given id and property name.\n *\n * @function findItem\n * @type {Function}\n * @category collection\n * @param {Array} collection - Collection to be checked for an item.\n * @param {number|string} id - The value to look for.\n * @param {string} [propertyName = 'id'] - The name of the property to compare.\n * @returns {Object} - The found object.\n *\n * @example\n * findItem([{id: 1}, {id: 2}], 1);\n * // => {id: 1}\n */\nexport function findItem(collection, id, propertyName = 'id') {\n\tconst result = collection.find((element, index) => {\n\t\treturn findIndexCache(element, index, collection, id, propertyName);\n\t});\n\treturn (result === -1) ? false : result;\n}\n/**\n * Finds an object in a collection by the given id and property name and returns the array index of the object.\n *\n * @function findIndex\n * @type {Function}\n * @category collection\n * @param {Array} collection - Collection to be checked for an item.\n * @param {number|string} id - The value to look for.\n * @param {string} [propertyName = 'id'] - The name of the property to compare.\n * @returns {number} - The index of the object.\n *\n * @example\n * findIndex([{id: 1}, {id: 2}], 1);\n * // => 0\n */\nexport function findIndex(collection, id, propertyName = 'id') {\n\tconst result = collection.findIndex((element, index) => {\n\t\treturn findIndexCache(element, index, collection, id, propertyName);\n\t});\n\treturn (result === -1) ? false : result;\n}\n\n","import { eachArray } from '../array/each.js';\n/**\n * Creates an object composed of keys generated from the results of running each element of collection thru iteratee.\n * The order of grouped values is determined by the order they occur in collection.\n * The corresponding value of each key is an array of elements responsible for generating the key.\n *\n * @function groupBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {Function} iteratee - The iteratee to transform keys.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n */\nexport function groupBy(collection, iteratee) {\n\tconst sortedObject = {};\n\teachArray(collection, (item) => {\n\t\tconst results = iteratee(item);\n\t\tif (!sortedObject[results]) {\n\t\t\tsortedObject[results] = [];\n\t\t}\n\t\tsortedObject[results].push(item);\n\t});\n\treturn sortedObject;\n}\n\n","import { eachArray } from '../array/each.js';\n/**\n * Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know the keys are unique.\n *\n * @function indexBy\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array of objects.\n * @param {string} propertyName - The property name to index by.\n * @returns {Object} - Returns the composed aggregate object.\n *\n * @example\n * indexBy([{name: 'Lucy', id: 0}, {name: 'Erick', id: 1}], 'id');\n * // => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}\n */\nexport function indexBy(collection, propertyName = 'id') {\n\tconst sortedObject = {};\n\teachArray(collection, (item) => {\n\t\tsortedObject[item[propertyName]] = item;\n\t});\n\treturn sortedObject;\n}\n\n","import { mapArray } from '../array/map.js';\n/**\n * Invokes a function on the provided property name in each object in the collection.\n *\n * @function invoke\n * @category collection\n * @type {Function}\n * @param {Array} collection - Collection from which method will be taken.\n * @param {string} property - Value used to pluck method from object.\n * @param {*} value - Value to be passed to callable property.\n * @returns {Array} - Returns the results of the invoked method.\n *\n * @example\n * invoke([{lucy(item, index) { return [item, index];}}, {lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE');\n * // => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n */\nexport function invoke(collection, property, value) {\n\treturn mapArray(collection, (item, index) => {\n\t\treturn item[property](value, index);\n\t});\n}\n\n","import { mapAsyncArray } from '../array/mapAsync.js';\n/**\n * Asynchronously awaits & invokes a function on the provided property name in each object in the collection.\n *\n * @function invokeAsync\n * @category collection\n * @type {Function}\n * @async\n * @param {Array} collection - Collection from which method will be taken.\n * @param {string} property - Value used to pluck method from object.\n * @param {*} value - Value to be passed to callable property.\n * @returns {Array} - Returns the results of the invoked method.\n *\n * @test\n * (async () => {\n *   const result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE');\n *   return assert(result, [['EXAMPLE', 0], ['EXAMPLE', 1]]);\n * });\n *\n * @example\n * invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE');\n * // => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n */\nexport function invokeAsync(collection, property, value) {\n\treturn mapAsyncArray(collection, async (item, index) => {\n\t\treturn item[property](value, index);\n\t});\n}\n\n","import { mapArray } from '../array/map.js';\n/**\n * Returns an array of the plucked values from the collection.\n *\n * @function pluck\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array used to determine what value to be plucked.\n * @param {string} pluckThis - Property name.\n * @returns {Array} - An array of plucked values.\n *\n * @example\n * pluck([{lucy: 'Ants moving around on the walls.'}, {lucy: 'In the sky with diamonds.'}], 'lucy');\n * // => ['Ants moving around on the walls.', 'In the sky with diamonds.']\n */\nexport function pluck(collection, pluckThis) {\n\treturn mapArray(collection, (item) => {\n\t\tconst result = item[pluckThis];\n\t\treturn result;\n\t});\n}\n\n","import { mapArray } from '../array/map.js';\n/**\n * Returns an array of the plucked values from the object. Values are plucked in the order given by the array.\n *\n * @function pluckObject\n * @category object\n * @type {Function}\n * @param {Object} value - Array used to determine what values to be plucked.\n * @param {string|Array} pluckThese - Property name.\n * @returns {Array} - An array of plucked values.\n *\n * @example\n * pluckObject({a: 1, b:3}, ['a','b']);\n * // => [1, 3]\n */\nexport function pluckObject(value, pluckThese) {\n\treturn mapArray(pluckThese, (item) => {\n\t\treturn value[item];\n\t});\n}\n\n","import { mapArray } from '../array/map.js';\nimport { pluckObject } from '../object/pluckObject.js';\n/**\n * Returns an array of the arrays of plucked values from the collection.\n *\n * @function pluckValues\n * @category collection\n * @type {Function}\n * @param {Array} collection - Array used to determine what values to be plucked.\n * @param {Array} pluckThese - Property names.\n * @returns {Array} - An array of arrays of plucked values.\n *\n * @example\n * pluckValues([{a: 1, b:3}, {a: 1, b:3}], ['a','b']);\n * // => [[1, 3], [1, 3]]\n */\nexport function pluckValues(collection, pluckThese) {\n\treturn mapArray(collection, (item) => {\n\t\treturn pluckObject(item, pluckThese);\n\t});\n}\n\n","/**\n   * Perform alphabetical sort on a collection with the provided key name. Mutates the array.\n   *\n   * @function sortAlphabetical\n   * @category collection\n   * @type {Function}\n   * @param {Array} collection - Collection to be sorted.\n   * @param {string} propertyName - Name of property to compare.\n   * @returns {Array} - The sorted array.\n   *\n   * @example\n   * sortAlphabetical([{letter:'a'}, {letter:'f'}, {letter:'c'}], 'letter');\n   * // => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]\n */\nexport function sortAlphabetical(collection, propertyName) {\n\treturn collection.sort((current, next) => {\n\t\tconst currentKey = current[propertyName];\n\t\tconst nextKey = next[propertyName];\n\t\tif (currentKey < nextKey) {\n\t\t\treturn -1;\n\t\t} else if (currentKey > nextKey) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n\n","/**\n  * Sorts an array in place using a key from newest to oldest.\n  *\n  * @function sortNewest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} propertyName - The property name to sort by based on it's value.\n  * @param {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.\n  * @returns {Array} - The sorted array and or a clone of the array sorted.\n  *\n  * @example\n  * sortNewest([{id: 1}, {id: 0}], 'id');\n  * // => [{id: 1}, {id: 0}]\n*/\nexport function sortNewest(collection, propertyName, pureMode = true) {\n\tconst array = (pureMode) ? collection : [...collection];\n\treturn array.sort((previous, next) => {\n\t\tif (!next[propertyName]) {\n\t\t\treturn -1;\n\t\t} else if (!previous[propertyName]) {\n\t\t\treturn 1;\n\t\t} else if (previous[propertyName] < next[propertyName]) {\n\t\t\treturn 1;\n\t\t} else if (previous[propertyName] > next[propertyName]) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n/**\n  * Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.\n  *\n  * @function getNewest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} propertyName - The property name to sort by based on it's value.\n  * @returns {Object} - The newest object in the collection.\n  *\n  * @example\n  * getNewest([{id: 1}, {id: 0}], 'id');\n  * // => {id: 1}\n*/\nexport function getNewest(collection, propertyName) {\n\treturn sortNewest(collection, propertyName, false)[0];\n}\n\n","/**\n  * Sorts an array in place using a key from oldest to newest.\n  *\n  * @function sortOldest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @param {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.\n  * @returns {Array} - The sorted array and or a clone of the array sorted.\n  *\n  * @example\n  * sortOldest([{id: 1}, {id: 0}], 'id');\n  * // => [{id: 0}, {id: 1}]\n*/\nexport function sortOldest(collection, key = 'id', pureMode = true) {\n\tconst array = (pureMode) ? collection : [...collection];\n\treturn array.sort((previous, next) => {\n\t\tif (!next[key]) {\n\t\t\treturn 1;\n\t\t} else if (!previous[key]) {\n\t\t\treturn -1;\n\t\t} else if (previous[key] < next[key]) {\n\t\t\treturn -1;\n\t\t} else if (previous[key] > next[key]) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n/**\n  * Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.\n  *\n  * @function getOldest\n  * @category collection\n  * @type {Function}\n  * @param {Array} collection - Collection to be sorted.\n  * @param {string} key - The property name to sort by based on it's value.\n  * @returns {Object} - The newest object in the collection.\n  *\n  * @example\n  * getOldest([{id: 1}, {id: 0}], 'id');\n  * // => {id: 0}\n*/\nexport function getOldest(collection, key = 'id') {\n\treturn sortOldest(collection, key)[0];\n}\n\n","/**\n * Creates a function that executes callable, only after being called n times.\n *\n * @function after\n * @category function\n * @type {Function}\n * @param {number} amount - The number of calls until method is invoked.\n * @param {Function} callable - The function to be called.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @test\n * (async () => {\n *   const onlyAfter = after(2, (item) => { return item;});\n *   return await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2);\n * });\n *\n * @example\n * const onlyAfter = after(1, (item) => { return item;});\n * onlyAfter(1);\n * // => undefined\n * onlyAfter(2);\n * // => 2\n */\nexport function after(amount, callable) {\n\tlet point = amount;\n\tlet value;\n\tconst onlyAfter = (...args) => {\n\t\tif (point !== null) {\n\t\t\tpoint--;\n\t\t}\n\t\tif (point <= 0) {\n\t\t\tvalue = callable(...args);\n\t\t\tpoint = null;\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyAfter;\n}\n","/**\n * Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.\n *\n * @function ary\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to cap arguments for.\n * @param {number} amount - The arity cap.\n * @returns {Object} - Returns the new capped function.\n *\n * @example\n * ary((...args) => { return args;}, 2)(1, 2, 3);\n * // => [1, 2]\n */\nexport function ary(callable, amount) {\n\treturn (...args) => {\n\t\treturn callable(...args.splice(0, amount));\n\t};\n}\n\n","/**\n * Creates a function that executes callable, only before n times.\n *\n * @function before\n * @category function\n * @type {Function}\n * @param {number} amount - The number of calls before n.\n * @param {Function} callable - The function to be called.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @test\n * (async () => {\n *   const onlyBefore = before(3, (item) => { return item;});\n *   return await assert(onlyBefore(1), 1) && await assert(onlyBefore(2), 2) && await assert(onlyBefore(3), 2);\n * });\n *\n * @example\n * const onlyBefore = before(3, () => { return 1;});\n * onlyBefore(1);\n * // => 1\n * onlyBefore(2);\n * // => 2\n * onlyBefore(3);\n * // => 2\n */\nexport function before(amount, callable) {\n\tlet point = amount;\n\tlet value;\n\tconst onlyBefore = (...args) => {\n\t\tif (point !== null) {\n\t\t\tpoint--;\n\t\t}\n\t\tif (point >= 1) {\n\t\t\tvalue = callable(...args);\n\t\t} else {\n\t\t\tpoint = null;\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyBefore;\n}\n","import { eachObject } from './each.js';\n/**\n * Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.\n *\n * @function mapObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object of the same calling object's type.\n *\n * @example\n * mapObject({a: 1, b: 2, c: 3}, (item) => {\n *   return item * 2;\n * });\n * // => {a: 2, b: 4, c: 6}\n */\nexport function mapObject(source, iteratee, results = {}) {\n\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\tresults[key] = iteratee(item, key, results, original, propertyCount, objectKeys);\n\t});\n\treturn results;\n}\n","import { mapArray } from '../array/map.js';\nimport { mapObject } from '../object/map.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.\n *\n * @function map\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {object | Function} [results = {}] - Object that will be used to assign results.\n * @returns {Array | object | Function} - A new object of the same calling object's type.'.\n *\n * @example\n * import { map, assert } from './Acid.js';\n * assert(map({a: 1, b: 2, c: 3}, (item) => {\n *   return item * 2;\n * }), {a: 2, b: 4, c: 6});\n */\nexport const map = generateLoop(mapArray, mapObject);\n\n","import { isFunction } from '../type/isFunction.js';\nimport { map } from '../utility/map.js';\n/**\n * Loops through an object or an array and binds the given object to all functions encountered.\n *\n * @function bindAll\n * @category function\n * @type {Function}\n * @param {Object|Function|Array} collection - The functions to bind.\n * @param {*} bindThis - Object to be bound to functions.\n * @returns {Object|Function|Array} - Returns the method invoked or undefined.\n *\n * @example\n * bindAll([function () { return this;}], 'Lucy')[0]().toString();\n * // => 'Lucy'\n * @example\n * bindAll({a() { return this;}}, 'Lucy').a().toString();\n * // => 'Lucy'\n */\nexport function bindAll(collection, bindThis) {\n\treturn map(collection, (item) => {\n\t\treturn isFunction(item) ? item.bind(bindThis) : item;\n\t});\n}\n\n","const objectAssign = Object.assign;\n/**\n * Copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.\n *\n * @function assign\n * @category object\n * @param {Object} target - The target object.\n * @param {...Object} sources - The source object(s).\n * @returns {Object} - Returns the target object.\n *\n * @example\n * assign({b: 2}, {a: 1});\n * // => {b: 2, a: 1}\n*/\nexport function assign(target, ...sources) {\n\tif (target) {\n\t\treturn objectAssign(target, ...sources);\n\t}\n}\n","import { assign } from '../object/assign.js';\nimport { each } from '../utility/each.js';\nconst add = (link, methods) => {\n\teach(methods, (item, key) => {\n\t\tlink.methods[key] = (...args) => {\n\t\t\titem(link.value, ...args);\n\t\t\treturn link.methods;\n\t\t};\n\t});\n\treturn link;\n};\n/**\n * Creates a chainable set of functions.\n *\n * @function chain\n * @category function\n * @type {Function}\n * @param {Array|Object} methods - The object to take methods from.\n * @returns {*} - Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.\n *\n * @test\n * (async () => {\n *   const chained = chain({a(item) { return item;}});\n *   chained('Acid').a();\n *   return assert(chained.done(), 'Acid');\n * });\n *\n * @example\n * const chained = chain({a(item) { return item;}});\n * chained('Acid').a();\n * chained.done();\n * // => 'Acid'\n */\nexport function chain(methods) {\n\tconst link = (value) => {\n\t\tlink.value = value;\n\t\treturn link.methods;\n\t};\n\tassign(link, {\n\t\tadd(addToChain) {\n\t\t\treturn add(link, addToChain);\n\t\t},\n\t\tdone() {\n\t\t\tconst value = link.value;\n\t\t\tlink.value = null;\n\t\t\treturn value;\n\t\t},\n\t\tmethods: {},\n\t});\n\tlink.add(methods);\n\treturn link;\n}\n\n","import { clear } from '../array/clear.js';\n/**\n * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.\n *\n * @function curry\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to curry.\n * @param {number} arity - The arity of method.\n * @returns {*} - Returns the new curried function.\n *\n * @example\n * curry((a, b, c) => {\n *   return [a, b, c];\n * })(1)(2)(3);\n * // => [1, 2, 3]\n */\nexport function curry(callable, arity = callable.length) {\n\tconst curries = [];\n\tconst curried = (...curryArgs) => {\n\t\tcurries.push(...curryArgs);\n\t\tif (curries.length === arity) {\n\t\t\tconst result = callable(...curries);\n\t\t\tclear(curries);\n\t\t\treturn result;\n\t\t}\n\t\treturn curried;\n\t};\n\treturn curried;\n}\n/**\n * Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.\n *\n * @function curryRight\n * @type {Function}\n * @param {Function} callable - The function to curry.\n * @param {number} arity - The arity of method.\n * @returns {*} - Returns the new curried function.\n *\n * @example\n * curryRight((a, b, c) => {\n *   return [a, b, c];\n * })(1)(2)(3);\n * // => [3, 2, 1]\n */\nexport function curryRight(callable, arity = callable.length) {\n\tconst curries = [];\n\tconst curried = (...curryArgs) => {\n\t\tcurries.unshift(...curryArgs);\n\t\tif (curries.length === arity) {\n\t\t\tconst result = callable(...curries);\n\t\t\tclear(curries);\n\t\t\treturn result;\n\t\t}\n\t\treturn curried;\n\t};\n\treturn curried;\n}\n\n","/**\n * This method returns true.\n *\n * @function stubTrue\n * @category function\n * @type {Function}\n * @returns {boolean} - Returns true.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * stubTrue();\n * // => true\n */\nexport const truth = true;\nexport const stubTrue = () => {\n\treturn truth;\n};\n","/**\n * This method returns false.\n *\n * @function stubFalse\n * @category function\n * @type {Function}\n * @returns {boolean} - Returns false.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * stubFalse();\n * // => false\n */\nexport const falsy = false;\nexport const stubFalse = () => {\n\treturn falsy;\n};\n","/**\n * This method returns undefined.\n *\n * @function noop\n * @category function\n * @type {Function}\n * @returns {undefined} - Returns undefined.\n * @example\n * noop();\n * // => undefined\n */\nexport const noop = () => {\n\treturn;\n};\n\n","/**\n  * Iterates based on the amount given invoking the iteratee with the current index as an argument.\n  *\n  * @function times\n  * @category array\n  * @type {Function}\n  * @param {number} amount - The amount of times to loop invoking the iteratee.\n  * @param {Function} iteratee - Transformation function which is passed index and amount.\n  * @returns {undefined} - Nothing.\n  *\n  * @example\n  * import { times } from 'Acid';\n  * times(3, (item) => {\n  *   console.log(item);\n  * });\n  * // 0\n  * // 1\n  * // 2\n  * // => undefined\n*/\nexport function times(amount, iteratee) {\n\tfor (let index = 0; index < amount; index++) {\n\t\titeratee(index);\n\t}\n}\n/**\n  * Iterates based on the amount given and maps the results returned by the iteratee each time to an array.\n  *\n  * @function timesMap\n  * @category array\n  * @type {Function}\n  * @param {number} amount - The amount of times to loop invoking the iteratee.\n  * @param {Function} iteratee - Transformation function which is passed index and amount.\n  * @param {Array} [results = []] - Array that will have iteratee return pushed to.\n  * @returns {Array} - An array with iteratee's returned values.\n  *\n  * @example\n  * import { timesMap } from 'Acid';\n  * timesMap(3, (item) => {\n  *   return item;\n  * });\n  * // => [0, 1, 2]\n*/\nexport function timesMap(amount, iteratee, results = []) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tresults[index] = iteratee(amount);\n\t}\n\treturn results;\n}\n","import { construct } from '../class/construct.js';\nimport { truth } from './stubTrue.js';\nimport { falsy } from './stubFalse.js';\nimport { noop } from './noop.js';\nimport { times } from './times.js';\nexport class Timers {\n\tlist = construct(Map);\n\tconstruct() {\n\t}\n\t/**\n    * Remove a timer that was created using the timer function.\n    *\n    * @param {number} id - The id of the timer to remove.\n    * @returns {undefined} - Returns nothing.\n    *\n    * @example\n    * import { stubArray } from './Acid.js';\n    * timer(() => {}, 100);\n    * // => 0\n  */\n\tremove(id) {\n\t\tclearTimeout(id);\n\t\tthis.list.delete(id);\n\t}\n\thas(id) {\n\t\treturn this.list.has(id);\n\t}\n\tget(id) {\n\t\treturn this.list.get(id);\n\t}\n\t/**\n    * Create a timer and add it to the list of timers.\n    *\n    * @type {Function}\n    * @param {Function} callable - The function to be invoked.\n    * @param {number} time - The time in milliseconds.\n    * @returns {Object} - Returns setTimeoutId ID.\n    *\n    * @example\n    * import { stubArray } from './Acid.js';\n    * timers.set(() => {}, 100);\n    * // => 0\n  */\n\tset(callable, time) {\n\t\tconst currentThis = this;\n\t\tconst id = setTimeout(() => {\n\t\t\tcallable();\n\t\t\tcurrentThis.remove(id);\n\t\t}, time);\n\t\tthis.list.set(id, truth);\n\t\treturn id;\n\t}\n\t/**\n    * Clear all active timers.\n    *\n    * @returns {undefined} - Returns undefined.\n    *\n    * @example\n    * import { stubArray } from './Acid.js';\n    * timers.clear();\n    * // => undefined\n  */\n\tclear() {\n\t\tconst currentThis = this;\n\t\tcurrentThis.list.forEach((id) => {\n\t\t\tcurrentThis.remove(id);\n\t\t});\n\t}\n}\nexport const timers = construct(Timers);\n/**\n  * Timer wrapper.\n  *\n  * @function timer\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Object} - Returns setTimeoutId ID.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * timer(() => {}, 100);\n  * // => 0\n*/\nexport function timer(callable, time) {\n\treturn timers.set(callable, time);\n}\n/**\n  * Clear all active timers.\n  *\n  * @function clearTimers\n  * @category function\n  * @returns {undefined} - Returns undefined.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * clearTimers();\n  * // => undefined\n*/\nexport function clearTimers() {\n\tconst id = setTimeout(noop, 0);\n\ttimes(id, (index) => {\n\t\ttimers.remove(index);\n\t});\n}\n","import { truth } from '../utility/stubTrue.js';\nimport { falsy } from '../utility/stubFalse.js';\nimport { timer, timers } from '../utility/timer.js';\nimport { apply } from '../internal/apply.js';\n/**\n  * Creates a debounced function that delays invoking callable until after milliseconds have elapsed since the last time the debounced function was invoked. The debounce function has a clear method to cancel the timer.\n  *\n  * @function debounce\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Function} - The debounced function.\n  *\n  * @example\n  * const debounced = debounce(() => { console.log('debounced'); }, 0);\n  * debounced();\n  * // 'debounced'\n*/\nexport function debounce(callable, time) {\n\tfunction debounced(...args) {\n\t\tif (debounced.id !== falsy) {\n\t\t\ttimers.remove(debounced.id);\n\t\t}\n\t\tdebounced.id = timer(() => {\n\t\t\tdebounced.callable(...args);\n\t\t\tdebounced.id = falsy;\n\t\t}, time);\n\t}\n\tdebounced.id = falsy;\n\tdebounced.callable = callable.bind(debounced);\n\tdebounced.clear = () => {\n\t\tif (debounced.id !== falsy) {\n\t\t\ttimers.remove(debounced.id);\n\t\t\tdebounced.id = falsy;\n\t\t}\n\t};\n\treturn debounced;\n}\n","import { isFunction } from '../type/isFunction.js';\n/**\n * Checks if the given method is a function. If it is then it invokes it with the given arguments.\n *\n * @function ifInvoke\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked if possible.\n * @param {...Array} args - Arguments to pass to the method.\n * @returns {*} - Returns the method invoked or undefined.\n *\n * @example\n * import { ifInvoke, assert } from './Acid.js';\n * assert(ifInvoke((...args) => { return args;}, 1, 2), [1, 2]);\n */\nexport function ifInvoke(callable, ...args) {\n\tif (isFunction(callable)) {\n\t\treturn callable(...args);\n\t}\n}\n\n","/**\n * Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.\n *\n * @function inAsync\n * @type {Function}\n * @category Array\n * @async\n * @param {Array} source - Array of async functions that will be looped through.\n * Functions are given the supplied object, index, the calling array, and the array length.\n * @param {*} firstArgument - The first argument given to each function.\n * @returns {object} - The originally given array.\n *\n * @example\n * import { inAsync, assert } from './Acid.js';\n * const list = [];\n * await inAsync([async (firstArgument, item, index) => {\n *   list.push(index + firstArgument.a);\n * }, async (firstArgument, item, index) => {\n *   list.push(index);\n * }], {a:1});\n * assert(list, [1, 1]);\n */\nexport async function inAsync(source, firstArgument) {\n\tconst arrayLength = source.length;\n\tfor (let index = 0; index < arrayLength; index++) {\n\t\tconst item = source[index];\n\t\tawait item(firstArgument, index, source, arrayLength);\n\t}\n\treturn source;\n}\n\n","import { each } from '../utility/each.js';\n/**\n * Invoke an array of functions.\n *\n * @function inSync\n * @category function\n * @type {Function}\n * @param {Array|Object|Function} collection - The functions to be invoked.\n * @param {*} value - The object passed as an argument to each method.\n * @returns {undefined} - Returns undefined.\n *\n * @test\n * (() => {\n *   const tempList = [];\n *   inSync([() => {tempList.push(1);}, () => {tempList.push(2);}]);\n *   return assert(tempList, [1, 2]);\n * });\n *\n * @example\n * inSync([() => {console.log(1);}, () => {console.log(2);}]);\n * // 1\n * // 2\n * // => undefined\n */\nexport const inSync = (collection, value) => {\n\treturn each(collection, (item) => {\n\t\titem(value);\n\t});\n};\n\n","/**\n * Creates a function that negates the result of the predicate callable.\n *\n * @function negate\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @returns {*} - Returns the given methods result.\n *\n * @example\n * negate(() => { return false;})();\n * // => true\n */\nexport function negate(callable) {\n\treturn (...args) => {\n\t\treturn !callable(...args);\n\t};\n}\n\n","/**\n * Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.\n *\n * @function nthArg\n * @category function\n * @type {Function}\n * @param {number} [index = 0] - The index of the argument to return.\n * @returns {Function} - Returns the new pass-thru function.\n *\n * @example\n * nthArg(1)('a', 'b');\n * // => 'b'\n */\nexport function nthArg(index = 0) {\n\treturn (...args) => {\n\t\treturn args[index];\n\t};\n}\n\n","import { hasValue } from '../type/hasValue.js';\n/**\n  * Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.\n  *\n  * @function once\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be called.\n  * @returns {Function} - Returns the new pass-thru function.\n  *\n  * @test\n  * (async () => {\n  *   const onceOnly = once((item) => { return item;});\n  *   return await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5);\n  * });\n  *\n  * @example\n  * const onceOnly = once((item) => { return item;});\n  * onceOnly(5);\n  * onceOnly(3);\n  * // => 5\n*/\nexport const once = (callable) => {\n\tlet value;\n\tconst onlyOnce = (...args) => {\n\t\tif (!hasValue(value)) {\n\t\t\tvalue = callable(...args);\n\t\t}\n\t\treturn value;\n\t};\n\treturn onlyOnce;\n};\n","import { everyArray } from '../array/every.js';\nimport { keys } from '../object/keys.js';\n/**\n * Iterates through the given object while the iteratee returns true.\n *\n * @function everyObject\n * @category object\n * @type {Function}\n * @param {Object} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @returns {boolean} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * everyObject({a: true, b: true, c: true}, (item) => {\n *   return item;\n * });\n * // => true\n */\nexport function everyObject(source, iteratee) {\n\tconst objectKeys = keys(source);\n\treturn everyArray(objectKeys, (key, index, original, propertyCount) => {\n\t\treturn iteratee(source[key], key, source, propertyCount, original);\n\t});\n}\n","import { everyArray } from '../array/every.js';\nimport { everyObject } from '../object/every.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the given object while the iteratee returns true.\n *\n * @function every\n * @category utility\n * @type {Function}\n * @param {object | Array | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling array, and array length.\n * @returns {boolean} - Returns true if all values returned are true or false if one value returns false.\n *\n * @example\n * import { every, assert } from './Acid.js';\n * assert(every({a: false, b: true, c: true}, (item) => {\n *  return item;\n * }), false);\n */\nexport const every = generateLoop(everyArray, everyObject);\n","import { map } from '../utility/map.js';\nimport { every } from '../utility/every.js';\n/**\n * Creates a function that invokes iteratee with the arguments it receives and returns their results.\n *\n * @function over\n * @category function\n * @type {Function}\n * @param {(Array.<function>|Object.<function>)} iteratee - The list of functions to loop through.\n * @returns {Function} - Returns the new over wrapped function.\n *\n * @example\n * over([Math.max, Math.min])(1, 2, 3, 4);\n * // => [4, 1]\n */\nexport function over(iteratee) {\n\treturn (...args) => {\n\t\treturn map(iteratee, (item) => {\n\t\t\treturn item(...args);\n\t\t});\n\t};\n}\n","import { every } from '../utility/every.js';\n/**\n * Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.\n *\n * @function overEvery\n * @category function\n * @type {Function}\n * @param {(Array.<function>|Object.<function>)} iteratee - The list of functions to loop through.\n * @returns {Function} - Returns the new overEvery wrapped function.\n *\n * @example\n * import { overEvery, assert } from './Acid.js';\n * assert(overEvery([Boolean, isFinite])('1'), true);\n */\nexport function overEvery(predicates) {\n\treturn (...args) => {\n\t\treturn every(predicates, (item) => {\n\t\t\treturn item(...args);\n\t\t});\n\t};\n}\n\n","/**\n * Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.\n *\n * @function reArg\n * @category function\n * @type {Function}\n * @param {Function} callable - The function to be invoked.\n * @param {Array} indexes - The arranged argument indexes.\n * @returns {Function} - Returns the new function.\n *\n * @example\n * reArg((a, b, c) => {\n *   return [a, b, c];\n * }, [1,2,0])(1,2,3);\n * // => [2, 3, 1]\n */\nexport function reArg(callable, indexes) {\n\treturn (...args) => {\n\t\treturn callable(...indexes.map((item) => {\n\t\t\treturn args[item];\n\t\t}));\n\t};\n}\n\n","import { truth } from '../utility/stubTrue.js';\nimport { falsy } from '../utility/stubFalse.js';\nimport { timer, timers } from '../utility/timer.js';\n/**\n  * Creates a throttled function that only invokes callable at most once per every milliseconds. The throttle function has a clear method to cancel the timer.\n  *\n  * @function throttle\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Function} - The throttled function.\n  *\n  * @example\n  * const throttled = throttle(() => { console.log('throttle'); }, 0)();\n  * throttled();\n  * // 'throttle'\n*/\nexport function throttle(callable, time) {\n\tfunction throttled(...args) {\n\t\tif (throttled.id) {\n\t\t\tthrottled.shouldThrottle = truth;\n\t\t\treturn;\n\t\t}\n\t\tthrottled.callable(...args);\n\t\tthrottled.id = timer(() => {\n\t\t\tif (throttled.shouldThrottle) {\n\t\t\t\tthrottled.callable(...args);\n\t\t\t}\n\t\t\tthrottled.id = falsy;\n\t\t}, time);\n\t}\n\tthrottled.id = falsy;\n\tthrottled.callable = callable.bind(throttled);\n\tthrottled.clear = () => {\n\t\ttimers.remove(throttled.id);\n\t\tthrottled.id = falsy;\n\t};\n\treturn throttled;\n}\n\n","/**\n * Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.\n *\n * @function wrap\n * @category function\n * @type {Function}\n * @param {*} value - The value to wrap.\n * @param {Function} wrapper - The wrapper function.\n * @returns {Function} - The new function.\n *\n * @example\n * wrap('Lucy', (firstName, lastName) => {\n *  return `My name is ${firstName} ${lastName}.`;\n * })('Diamonds');\n * // => 'My name is Lucy Diamonds.'\n */\nexport function wrap(value, wrapper) {\n\treturn (...arg) => {\n\t\treturn wrapper(value, ...arg);\n\t};\n}\n\n","/**\n  * Strictly checks if a number equal to another number.\n  *\n  * @function isNumberEqual\n  * @category number\n  * @type {Function}\n  * @param {number} item - Number to be checked against num.\n  * @param {number} num - Number to be checked against item.\n  * @returns {boolean} - Returns true or false.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * isNumberEqual(0, 0);\n  * // => true\n  * isNumberEqual(0, 1);\n  * // => false\n*/\nexport const isNumberEqual = (item, num) => {\n\treturn item === num;\n};\n","/**\n  * Checks if a number is within a range.\n  *\n  * @function isNumberInRange\n  * @category number\n  * @type {Function}\n  * @param {number} num - Number to be checked.\n  * @param {number} start - Beginning of range.\n  * @param {number} end - End of range.\n  * @returns {boolean} - Returns true or false.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * isNumberInRange(1, 0, 2);\n  * // => true\n  * isNumberInRange(1, -1, 0);\n  * // => false\n*/\nexport const isNumberInRange = (num, start, end) => {\n\treturn num > start && num < end;\n};\n\n","/**\n  * Strictly checks if a number is zero.\n  *\n  * @function isZero\n  * @category number\n  * @type {Function}\n  * @param {number} item - Number to be checked.\n  * @returns {boolean} - Returns true or false.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * isZero(0);\n  * // => true\n  * isZero(1);\n  * // => false\n*/\nexport const isZero = (item) => {\n\treturn item === 0;\n};\n","import { eachObject } from '../object/each.js';\n/**\n * Extracts all keys from an object whose values are not falsey. The values false, null, 0, \"\", undefined, and NaN are falsey.\n *\n * @function compactKeys\n * @category object\n * @type {Function}\n * @param {Object} object - Object from which keys are extracted.\n * @returns {Array} - Returns an array of key values.\n *\n * @test\n * (async () => {\n *   const results = compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\n *   return assert(results.includes('Lucy') && results.includes('John'), true);\n * });\n *\n * @example\n * compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\n * // => ['Lucy', 'John']\n */\nexport function compactKeys(object) {\n\tconst compactedKeys = [];\n\teachObject(object, (item, key) => {\n\t\tif (item) {\n\t\t\tcompactedKeys.push(key);\n\t\t}\n\t});\n\treturn compactedKeys;\n}\n\n","import { eachObject } from './each.js';\nimport { hasValue } from '../type/hasValue.js';\nimport { returnValue } from '../utility/returnValue.js';\n/**\n * Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n *\n * @function compactMapObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with mapped properties that are not null or undefined.\n *\n * @example\n * compactMapObject({a: undefined, b: 2, c: 3}, (item) => {\n *   return item;\n * });\n * // => {b: 2, c: 3}\n */\nexport function compactMapObject(source, iteratee = returnValue, results = {}) {\n\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\tconst result = iteratee(item, key, results, original, propertyCount, objectKeys);\n\t\tif (hasValue(result)) {\n\t\t\tresults[key] = result;\n\t\t}\n\t});\n\treturn results;\n}\n","import { eachAsyncArray } from '../array/eachAsync.js';\nimport { keys } from '../object/keys.js';\n/**\n * Asynchronously iterates through the given object.\n *\n * @function eachObjectAsync\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys.\n * @returns {Object|Function} - Returns source.\n *\n * @test\n * (async () => {\n *   const tempList = {};\n *   await eachObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n *     tempList[key] = item;\n *   });\n *   return assert(tempList, {a: 1, b: 2, c: 3});\n * });\n *\n * @example\n * eachObjectAsync({a: 1, b: 2, c: 3}, (item) => {\n *   console.log(item);\n * });\n * // => {a: 1, b: 2, c: 3}\n */\nexport const eachObjectAsync = async (source, iteratee) => {\n\tconst objectKeys = keys(source);\n\tawait eachAsyncArray(objectKeys, (key, index, array, propertyCount) => {\n\t\treturn iteratee(source[key], key, source, propertyCount, objectKeys);\n\t});\n\treturn source;\n};\n\n","import { eachObject } from './each.js';\n/**\n * Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.\n *\n * @function filterObject\n * @category object\n * @type {Function}\n * @param {Object|Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n * @returns {Object|Function} - An object with properties that passed the test.\n *\n * @example\n * filterObject({a: false, b: true, c: true}, (item) => {\n *   return item;\n * });\n * // => {b: true, c: true}\n */\nexport function filterObject(source, iteratee, results = {}) {\n\teachObject(source, (item, key, original, propertyCount, objectKeys) => {\n\t\tif (iteratee(item, key, results, original, propertyCount, objectKeys) === true) {\n\t\t\tresults[key] = item;\n\t\t}\n\t});\n\treturn results;\n}\n","import { eachObject } from './each.js';\n/**\n * Creates an inverted version of a given object by switching it's keys and values.\n *\n * @function invert\n * @type {Function}\n * @category object\n * @param {Object} thisObject - Object to be inverted.\n * @param {Array} [invertedObject = {}] - Empty object to be populated with inverted values from thisObject.\n * @returns {Object} - Returns object with keys and values switched.\n *\n * @example\n * invert({a:1});\n * // => {1:'a'}\n */\nexport function invert(thisObject, invertedObject = {}) {\n\teachObject(thisObject, (item, key) => {\n\t\tinvertedObject[item] = key;\n\t});\n\treturn invertedObject;\n}\n\n","import { isMatchArray } from '../array/isMatch.js';\nimport { everyArray } from '../array/every.js';\nimport { keys } from '../object/keys.js';\n/**\n * Performs a shallow strict comparison between two objects.\n *\n * @function isMatchObject\n * @type {Function}\n * @category object\n * @param {Object} source - Source object.\n * @param {Object} compareObject - Object to compare to source.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isMatchObject({a: 1}, {a: 1});\n * // => true\n */\nexport const isMatchObject = (source, compareObject) => {\n\tconst sourceProperties = keys(source);\n\tif (isMatchArray(sourceProperties, keys(compareObject))) {\n\t\treturn everyArray(sourceProperties, (key) => {\n\t\t\treturn source[key] === compareObject[key];\n\t\t});\n\t}\n\treturn false;\n};\n\n","import { eachObjectAsync } from './eachAsync';\nimport { hasValue } from '../type/hasValue.js';\n/**\n  * Asynchronously iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.\n  *\n  * @function mapObjectAsync\n  * @category object\n  * @type {Function}\n  * @param {Object|Function} source - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Object|Function} - An object of the same calling object's type.\n  *\n  * @test\n  * (async () => {\n  *   const tempList = await mapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n  *     return item;\n  *   });\n  *   return assert(tempList, {a: 1, b: 2, c: 3});\n  * });\n  *\n  * @example\n  * mapObjectAsync({a: 1, b: 2, c: 3}, (item) => {\n  *   return item * 2;\n  * });\n  * // => {a: 2, b: 4, c: 6}\n*/\nexport const mapObjectAsync = async (source, iteratee, results = {}) => {\n\tawait eachObjectAsync(source, async (item, key, thisObject, propertyCount, objectKeys) => {\n\t\tresults[key] = await iteratee(item, key, results, thisObject, propertyCount, objectKeys);\n\t});\n\treturn results;\n};\n/**\n  * Asynchronously iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.\n  *\n  * @function compactMapObjectAsync\n  * @category object\n  * @type {Function}\n  * @param {Object|Function} source - Object that will be looped through.\n  * @param {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.\n  * @param {Object|Function} [results = {}] - Object that will be used to assign results.\n  * @returns {Object|Function} - An object with mapped properties that are not null or undefined.\n  *\n  * @test\n  * (async () => {\n  *   const tempList = await compactMapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n  *     return item;\n  *   });\n  *   return assert(tempList, {a: 1, b: 2, c: 3});\n  * });\n  *\n  * @example\n  * compactMapObjectAsync({a: undefined, b: 2, c: 3}, (item) => {\n  *   return item;\n  * });\n  * // => {b: 2, c: 3}\n*/\nexport const compactMapObjectAsync = async (source, iteratee, results = {}) => {\n\tawait eachObjectAsync(source, async (item, key, thisObject, propertyCount, objectKeys) => {\n\t\tconst result = await iteratee(item, key, results, propertyCount, objectKeys);\n\t\tif (hasValue(result)) {\n\t\t\tresults[key] = result;\n\t\t}\n\t});\n\treturn results;\n};\n\n","import { filterObject } from './filterObject.js';\n/**\n * Returns a clone of the given object without the given properties.\n *\n * @function omit\n * @category object\n * @type {Function}\n * @param {Object} originalObject - Object from which keys are extracted.\n * @param {Array} array - Array of object keys.\n * @returns {Object} - A new object with the removed.\n *\n * @example\n * omit({a:1, b:2}, ['a']);\n * // => {b:2}\n */\nexport function omit(originalObject, array) {\n\treturn filterObject(originalObject, (item, key) => {\n\t\treturn !array.includes(key);\n\t});\n}\n\n","import { eachArray } from '../array/each.js';\n/**\n  * Returns a clone of the source object with the plucked properties.\n  *\n  * @function pick\n  * @type {Function}\n  * @category object\n  * @param {Object} source - Object to be cloned.\n  * @param {Array} array - Array used to determine what values to be plucked.\n  * @param {Object} [newObject = {}] - Object to be populated with plucked values.\n  * @returns {Object} - A new object with plucked properties.\n  *\n  * @example\n  * pick({a:1, b:2, c:3}, ['a','b']);\n  * // => {a:1, b:2}\n*/\nexport const pick = (source, array, newObject = {}) => {\n\teachArray(array, (item) => {\n\t\tnewObject[item] = source[item];\n\t});\n\treturn newObject;\n};\n\n","import { eachArray } from '../array/each.js';\nimport { eachObject } from './each.js';\n/**\n * Creates an object from two arrays, one of property identifiers and one of corresponding values.\n *\n * @function zipObject\n * @type {Function}\n * @category object\n * @param {Array} properties - The property identifiers.\n * @param {Array} values - The property values.\n * @returns {Object} - Returns the new object.\n *\n * @example\n * zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nexport const zipObject = (properties, values) => {\n\tconst zipedObject = {};\n\teachArray(properties, (item, key) => {\n\t\tzipedObject[item] = values[key];\n\t});\n\treturn zipedObject;\n};\n/**\n * Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.\n *\n * @function unZipObject\n * @type {Function}\n * @category object\n * @param {Object} object - The object to process.\n * @returns {Array} - Returns two arrays one of keys and the other of values inside a single array.\n *\n * @example\n * unZipObject({ 'a': 1, 'b': 2 });\n * // => [['a', 'b'], [1, 2]]\n */\nexport const unZipObject = (object) => {\n\tconst unZippedKeys = [];\n\tconst values = [];\n\teachObject(object, (item, key) => {\n\t\tunZippedKeys.push(key);\n\t\tvalues.push(item);\n\t});\n\treturn [unZippedKeys, values];\n};\n\n","const normalizeCase = /[-_]/g;\nconst spaceFirstLetter = / (.)/g;\n/**\n * Converts a string and converts it entirely into uppercase.\n *\n * @function upperCase\n * @category string\n * @type {Function}\n * @param {string} string - String to be converted into upper case.\n * @returns {string} - Converted string in upper case.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperCase('upper case');\n * // => 'UPPER CASE'\n */\nexport function upperCase(string) {\n\treturn string.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toUpperCase();\n}\n/**\n * Converts a string into Camel case format.\n *\n * @function camelCase\n * @category string\n * @type {Function}\n * @param {string} string - String to be converted into Camel case.\n * @returns {string} - Converted string in Camel case.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * camelCase('camel case');\n * // => 'camelCase'\n */\nexport function camelCase(string) {\n\treturn string.toLowerCase()\n\t\t.replace(spaceFirstLetter, (match) => {\n\t\t\treturn match.toUpperCase().replace(/ /g, '');\n\t\t});\n}\n/**\n * Converts a string into Kebab case format.\n *\n * @function kebabCase\n * @category string\n * @type {Function}\n * @param {string} string - String to be converted into Kebab case.\n * @returns {string} - Converted string in Kebab case.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * kebabCase('kebab case');\n * // => 'kebab-case'\n */\nexport function kebabCase(string) {\n\treturn string.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toLowerCase()\n\t\t.replace(spaceFirstLetter, '-$1');\n}\n/**\n * Converts a string into snake case format.\n *\n * @function snakeCase\n * @category string\n * @type {Function}\n * @param {string} string - String to be converted into snake case.\n * @returns {string} - Converted string in Snake case.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * snakeCase('snake case');\n * // => 'snake_case'\n */\nexport function snakeCase(string) {\n\treturn string.replace(normalizeCase, ' ')\n\t\t.trim()\n\t\t.toLowerCase()\n\t\t.replace(spaceFirstLetter, '_$1');\n}\n\n","/**\n * Inserts text into a string at a given position.\n *\n * @function insertInRange\n * @category string\n * @type {Function}\n * @param {string} string - String to insert the text into.\n * @param {number} index - Point of insertion.\n * @param {string} text - The string to be inserted.\n * @returns {string} - The string with the text inserted at the given point.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * insertInRange('A from Lucy.', 1, ' tab');\n * // => 'A tab from Lucy.'\n */\nexport function insertInRange(string, index, text) {\n\treturn string.slice(0, index) + text + string.slice(index, string.length);\n}\n/**\n * Plucks a letter using the index starting from the right.\n *\n * @function rightString\n * @category string\n * @type {Function}\n * @param {string} string - String to extract the letter from.\n * @param {number} [index=1] - The starting position.\n * @returns {string} - A letter at the given index.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * rightString('rightString');\n * // => 'g'\n * rightString('rightString', 2);\n * // => 'n'\n */\nexport function rightString(string, index = 1) {\n\treturn string[string.length - index];\n}\n/**\n * Splits up a string into chunks.\n *\n * @function chunkString\n * @category string\n * @type {Function}\n * @param {string} string - String to chunked.\n * @param {number} [size] - The max string length per chunk.\n * @returns {Array} - An array with strings that are <= size parameter.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * chunkString('chunk', 2);\n * // => ['ch', 'un', 'k']\n */\nexport function chunkString(string, size) {\n\treturn string.match(new RegExp(`(.|[\\r\\n]){1,${size}}`, 'g'));\n}\n/**\n * Truncates everything before the index starting from the right.\n *\n * @function initialString\n * @category string\n * @type {Function}\n * @param {string} string - String to extract the initial letters from.\n * @param {number} [index=1] - Starting point from the right.\n * @returns {string} - A string with the characters before the index starting from the right.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * initialString('initialString');\n * // => 'initialStrin'\n * initialString('initialString', 2);\n * // => 'initialStri'\n */\nexport function initialString(string, index = 1) {\n\treturn string.slice(0, index * -1);\n}\n/**\n * Truncates everything after a index.\n *\n * @function restString\n * @category string\n * @type {Function}\n * @param {string} string - String to extract the rest of the letters from.\n * @param {number} [index=1] - Starting point.\n * @returns {string} - A string without the characters up-to to the index.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * restString('restString');\n * // => 'estString'\n * restString('restString', 2);\n * // => 'stString'\n */\nexport function restString(string, index = 1) {\n\treturn string.substr(index);\n}\n\n","/**\n * Replaces all occurrences of strings in an array with a value.\n *\n * @function replaceList\n * @category string\n * @type {Function}\n * @param {string} string - String to be replaced.\n * @param {Array} words - Strings to replace.\n * @param {string} value - The match replacement.\n * @returns {string} - The string with the replacement.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * replaceList('Her name was user.', ['user'], 'Lucy');\n * // => 'Her name was Lucy.'\n */\nexport function replaceList(string, words, value) {\n\treturn string.replace(new RegExp(`\\\\b${words.join('|')}\\\\b`, 'gi'), value);\n}\n\n","const rawURLDecodeRegex = /%(?![\\da-f]{2})/gi;\nconst andRegex = /&/g;\nconst lessThanRegex = /</g;\nconst moreThanRegex = />/g;\nconst doubleQuoteRegex = /\"/g;\n/**\n * Raw URL decoder.\n *\n * @function rawURLDecode\n * @category string\n * @type {Function}\n * @param {string} string - String to be replaced.\n * @returns {string} - Converted string into the decoded URI Component .\n *\n * @example\n * import { stubArray } from './Acid.js';\n * rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.');\n * // => 'Lucy saw diamonds in the sky.'\n */\nexport function rawURLDecode(string) {\n\treturn decodeURIComponent(string.replace(rawURLDecodeRegex, () => {\n\t\treturn '%25';\n\t}));\n}\n/**\n * Replaced sensitive characters with their matching html entity.\n *\n * @function htmlEntities\n * @category string\n * @type {Function}\n * @param {string} string - String to be replaced.\n * @returns {string} - Replaced string.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`);\n * // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n */\nexport function htmlEntities(string) {\n\treturn string.replace(andRegex, '&amp;')\n\t\t.replace(lessThanRegex, '&lt;')\n\t\t.replace(moreThanRegex, '&gt;')\n\t\t.replace(doubleQuoteRegex, '&quot;');\n}\n/**\n * Executes rawURLDecode followd by htmlEntities methods on a string.\n *\n * @function sanitize\n * @category string\n * @type {Function}\n * @param {string} string - String to be replaced.\n * @returns {string} - Replaced string.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);\n * // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n */\nexport function sanitize(string) {\n\treturn htmlEntities(rawURLDecode(string));\n}\n\n","const tokenizeRegEx = /\\S+/g;\nconst wordsRegEx = /\\w+/g;\n/**\n * Break string by non-white space characters matches.\n *\n * @function tokenize\n * @type {Function}\n * @category string\n * @param {string} string - String to be broken up.\n * @returns {Array} - Array of words without white space characters.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * tokenize('I am Lucy!');\n * // => [\"I\", \"am\", \"Lucy!\"]\n */\nexport function tokenize(string) {\n\treturn string.match(tokenizeRegEx) || [];\n}\n/**\n * Break string into word matches.\n *\n * @function words\n * @type {Function}\n * @param {string} string - String to be broken up.\n * @returns {Array} - Array of words with word characters only.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * words('I am Lucy!');\n * // => [\"I\", \"am\", \"Lucy\"]\n */\nexport function words(string) {\n\treturn string.match(wordsRegEx) || [];\n}\n\n","const truncateDown = (string, maxLength, stringLength) => {\n\tconst breakAll = string.split('');\n\tconst breakAllLength = breakAll.length;\n\tlet item;\n\tlet index = stringLength - maxLength;\n\tfor (; index < breakAllLength && index >= 0; index--) {\n\t\titem = breakAll[index];\n\t\tif (item === ' ') {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn string.slice(0, index).trim();\n};\nconst truncateUp = (string, maxLength, stringLength) => {\n\tconst breakAll = string.split('');\n\tconst breakAllLength = breakAll.length;\n\tlet item;\n\tlet index = maxLength;\n\tfor (; index < breakAllLength && index > 0; index++) {\n\t\titem = breakAll[index];\n\t\tif (item === ' ') {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn string.substr(index, stringLength).trim();\n};\n/**\n * Truncates the string, accounting for word placement and character count.\n *\n * @function truncate\n * @type {Function}\n * @category string\n * @param {string} string - String to be truncated.\n * @param {number} maxLength - The desired max length of the string.\n * @returns {string} - The mutated string.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * truncate('Where is Lucy?', 2);\n * // => 'Where is'\n */\nexport function truncate(string, maxLength) {\n\tconst stringLength = string.length;\n\treturn (stringLength > maxLength) ? truncateDown(string, maxLength, stringLength) : string;\n}\n/**\n * Truncates the string, accounting for word placement and character count from the right.\n *\n * @function truncateRight\n * @type {Function}\n * @category string\n * @param {string} string - String to be truncated.\n * @param {number} maxLength - The desired max length of the string.\n * @returns {string} - The mutated string.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * truncateRight('Where is Lucy?', 6);\n * // => 'Lucy?'\n */\nexport function truncateRight(string, maxLength) {\n\tconst stringLength = string.length;\n\treturn (stringLength > maxLength) ? truncateUp(string, maxLength, stringLength) : string;\n}\n\n","import { restString } from './range.js';\nconst spaceFirstLetter = / (.)/g;\n/**\n * Returns the first letter capitalized.\n *\n * @function upperFirstLetter\n * @type {Function}\n * @category string\n * @param {string} string - String to extract first letter from.\n * @returns {string} - An upper case letter.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperFirstLetter('upper');\n * // => \"U\"\n */\nexport function upperFirstLetter(string) {\n\treturn string[0].toUpperCase();\n}\n/**\n * Capitalizes the first letter.\n *\n * @function upperFirst\n * @type {Function}\n * @category string\n * @param {string} string - String to be mutated.\n * @returns {string} - String with first letter capitalized.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperFirst('upper');\n * // => 'Upper'\n */\nexport function upperFirst(string) {\n\treturn upperFirstLetter(string) + restString(string);\n}\n/**\n * Capitalize all first letters.\n *\n * @function upperFirstAll\n * @type {Function}\n * @category string\n * @param {string} string - String to be mutated.\n * @returns {string} - String with all first letters capitalized.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperFirstAll('Lucy is next up.');\n * // => 'Lucy Is Next Up.'\n */\nexport function upperFirstAll(string) {\n\treturn string.replace(spaceFirstLetter, (match) => {\n\t\treturn match.toUpperCase();\n\t});\n}\n/**\n * Capitalize first letter and lower case the rest.\n *\n * @function upperFirstOnly\n * @type {Function}\n * @category string\n * @param {string} string - String to be mutated.\n * @returns {string} - String with first letter capitalized.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperFirstOnly('LYSERGIC ACID DIETHYLAMIDE');\n * // => 'Lysergic namespace diethylamide'\n */\nexport function upperFirstOnly(string) {\n\treturn upperFirstLetter(string) + restString(string).toLowerCase();\n}\n/**\n * Capitalize all first letters and lower case the rest.\n *\n * @function upperFirstOnlyAll\n * @type {Function}\n * @category string\n * @param {string} string - String to be mutated.\n * @returns {string} - String with all first letters capitalized.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * upperFirstOnlyAll('LYSERGIC ACID DIETHYLAMIDE');\n * // => 'Lysergic Acid Diethylamide'\n */\nexport function upperFirstOnlyAll(string) {\n\treturn upperFirstOnly(string.toLowerCase()).replace(spaceFirstLetter, (match) => {\n\t\treturn match.toUpperCase();\n\t});\n}\n\n","const jsonNative = JSON;\n/**\n * Parses JSON string with safety check for undefined.\n *\n * @function jsonParse\n * @category utility\n * @type {Function}\n * @param {string} source - String to be parsed.\n * @param {function} reviver - A function that prescribes how each value originally produced by parsing is transformed before being returned.\n * @returns {Object} - Returns the parsed object.\n *\n * @example\n * import { jsonParse, assert } from './Acid.js';\n * assert(jsonParse('{a:1}'), {a:1});\n */\nexport function jsonParse(source, reviver) {\n\tif (source) {\n\t\treturn jsonNative.parse(source, reviver);\n\t}\n}\n/**\n * Stringify an object into a JSON string.\n *\n * @function stringify\n * @category utility\n * @type {Function}\n * @param {Object} object - Object to Stringify.\n * @returns {string} - Returns the object as a valid JSON string.\n *\n * @example\n * import { stringify, assert } from './Acid.js';\n * assert(stringify({a:1}), '{a:1}');\n */\nexport const stringify = jsonNative.stringify;\n\n","import { isFunction } from '../type/isFunction.js';\nimport { isEqual } from '../utility/isEqual.js';\nimport { isKindAsync } from '../type/isAsync.js';\nimport { stringify } from './json.js';\nfunction createAssertError(source, expected, localOptions) {\n\tconst options = globalThis.options || localOptions;\n\tlet errorTitle;\n\tif (isFunction(options)) {\n\t\terrorTitle = `${options.name} : ${options.constructor.name}`;\n\t} else if (options) {\n\t\terrorTitle = `${options.title || options.method.name} -> ${options.file}`;\n\t}\n\treturn new Error(`Test Failed: ${errorTitle}\n\t\tResult: ${stringify(source)}\n\t\tExpected: ${stringify(expected)}`, options);\n}\n/**\n * Check if source value matches the expected value.\n *\n * @function assert\n * @category utility\n * @type {Function}\n * @param {*} source - The source object to compare to.\n * @param {*} expected - The expected result that's compared to the source.\n * @param {*} options - Additional options for the Error instance & unit test information.\n * @returns {Object} - Returns a deep clone of an object.\n *\n * @example\n * import { assert } from './Acid.js';\n * if (assert(1,1) !==  true) {\n * \tnew Error('Assert Test Failed');\n * }\n */\nexport function assert(source, expected, options) {\n\tif (!isEqual(source, expected)) {\n\t\treturn createAssertError(source, expected, options);\n\t}\n\treturn true;\n}\n","const functionPrototype = Function.prototype;\n/**\n  * Caches a prototype method.\n  *\n  * @function cacheNativeMethod\n  * @category utility\n  * @type {Function}\n  * @param {Function} method - Prototype method.\n  * @returns {Function} - Cached method.\n  *\n  * @example\n  * import { cacheNativeMethod, assert } from './Acid.js';\n  * assert(cacheNativeMethod(Array.prototype.push)([], 1), 1);\n*/\nexport function cacheNativeMethod(method) {\n\treturn functionPrototype.call.bind(method);\n}\n\n","import { isArray } from '../type/isArray.js';\nimport { isPlainObject } from '../type/isPlainObject.js';\n/**\n * Creates a structured clone of an object.\n *\n * @function clone\n * @category utility\n * @type {Function}\n * @param {Object} source - Source object to clone.\n * @returns {Object} - Returns a deep clone of an object.\n *\n * @example\n * import { clone, assert } from './Acid.js';\n * assert(clone({a:{b:[2]}}), {a:{b:[2]}});\n */\nconst structuredCloneSafe = globalThis.structuredClone;\nexport function clone(item) {\n\treturn structuredCloneSafe(item);\n}\n\n","/**\n * Check if a value is truey which is anything but false, null, 0, \"\", undefined, and NaN.\n *\n * @function truey\n * @category Utility\n * @type {Function}\n * @param {*} source - Item to be truey checked.\n * @param {*} [returnIfTrue = true] - Item to be returned if item is truey.\n * @returns {boolean|*} - Returns true if the item is truey or returnIfTrue if provided otherwise returns false.\n *\n * @example\n * import { truey, assert } from './Acid.js';\n * assert(truey(1), true);\n * assert(truey(0), false);\n */\nexport function truey(source, returnIfTrue = true) {\n\treturn Boolean(source) && returnIfTrue;\n}\n","import { isPlainObject } from '../type/isPlainObject.js';\nimport { keys } from '../object/keys.js';\nimport { truey } from './truey.js';\n/**\n  * Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.\n  *\n  * @function compact\n  * @category Utility\n  * @type {Function}\n  * @param {Array|Object} source - Array or Object to be compacted.\n  * @returns {Array|Object} - A new object or array containing the filtered values.\n  *\n  * @example\n  * import { compact, assert } from './Acid.js';\n  * assert(compact([1,'B', 'Cat', false, null, 0 , '', undefined, NaN]), [1, 'B', 'Cat']);\n*/\nexport function compact(source) {\n\tif (isPlainObject(source)) {\n\t\tconst sourceKeys = keys(source);\n\t\tconst sourceKeysLength = sourceKeys.length;\n\t\tconst targetObject = {};\n\t\tfor (let i = 0; i < sourceKeysLength; i++) {\n\t\t\tconst keyName = sourceKeys[i];\n\t\t\tconst item = source[keyName];\n\t\t\tconst isTruey = truey(item);\n\t\t\tif (isTruey) {\n\t\t\t\ttargetObject[keyName] = item;\n\t\t\t}\n\t\t}\n\t\treturn targetObject;\n\t}\n\treturn source.filter((item) => {\n\t\treturn truey(item);\n\t});\n}\n\n","/**\n  * Check if a value is falsey which are false, null, 0, \"\", undefined, and NaN.\n  *\n  * @function falsey\n  * @category Utility\n  * @type {Function}\n  * @param {*} source - Item to be falsey checked.\n  * @param {*} [returnIfTrue = true] - Item to be returned if item is falsey.\n  * @returns {boolean|*} - Returns true if the item is falsey or returnIfTrue if provided otherwise returns false.\n  *\n  * @example\n  * import { falsey, assert } from './Acid.js';\n  * assert(falsey(0), true);\n  * assert(falsey(1), false);\n*/\nexport function falsey(source, returnIfTrue = true) {\n\treturn Boolean(source) === false && returnIfTrue;\n}\n","import { filterArray } from '../array/filterArray.js';\nimport { filterObject } from '../object/filterObject.js';\nimport { generateLoop } from './generateLoop.js';\n/**\n * Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.\n *\n * @function filter\n * @category utility\n * @type {Function}\n * @param {Array | object | Function} source - Object that will be looped through.\n * @param {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.\n * @param {object | Function} [results = {}] - Object that will be used to assign results.\n * @returns {Array | object | Function} - A new object of the same calling object's type.\n *\n * @example\n * import { filter, assert } from './Acid.js';\n * assert(filter({a: false, b: true, c: true}, (item) => {\n *   return item;\n * }), {b: true, c: true});\n */\nexport const filter = generateLoop(filterArray, filterObject);\n\n","import { eachArray } from '../array/each.js';\nimport { eachRight } from '../array/eachRight.js';\nfunction returnFlow(callable) {\n\treturn (...methods) => {\n\t\treturn (arg) => {\n\t\t\tlet value = arg;\n\t\t\tcallable(methods, (item) => {\n\t\t\t\tvalue = item(value);\n\t\t\t});\n\t\t\treturn value;\n\t\t};\n\t};\n}\n/**\n * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n *\n * @function flow\n * @category utility\n * @type {Function}\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flow(increment, increment, deduct)(0);\n * // => 1\n */\nexport const flow = returnFlow(eachArray);\n/**\n * This method is like flow except that it creates a function that invokes the given functions from right to left.\n *\n * @function flowRight\n * @category utility\n * @type {Function}\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowRight(increment, increment, deduct)(0);\n * // => 1\n */\nexport const flowRight = returnFlow(eachRight);\n\n","import { eachAsyncArray } from '../array/eachAsync.js';\nimport { eachRightAsync } from '../array/eachRightAsync.js';\nfunction returnFlow(callable) {\n\treturn (...methods) => {\n\t\treturn async (arg) => {\n\t\t\tlet value = arg;\n\t\t\tawait callable(methods, async (item) => {\n\t\t\t\tvalue = await item(value);\n\t\t\t});\n\t\t\treturn value;\n\t\t};\n\t};\n}\n/**\n * Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.\n *\n * @function flowAsync\n * @category utility\n * @type {Function}\n * @async\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowAsync(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n * // => 2\n */\nexport const flowAsync = returnFlow(eachAsyncArray);\n/**\n * This method is like flow except that it creates a function that invokes the given functions from right to left.\n *\n * @function flowAsyncRight\n * @category utility\n * @type {Function}\n * @async\n * @param {Array} collection - Methods to invoke.\n * @returns {Function} - Returns the new composite function.\n *\n * @example\n * flowAsyncRight(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n * // => 2\n */\nexport const flowAsyncRight = returnFlow(eachRightAsync);\n\n","const regexToPath = /\\.|\\[/;\nconst regexCloseBracket = /]/g;\nconst emptyString = '';\n/**\n  * Breaks up string into object chain list.\n  *\n  * @function toPath\n  * @type {Function}\n  * @category utility\n  * @param {string} string - String to be broken up.\n  * @returns {Array} - Array used to go through object chain.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * toPath('post.like[2]');\n  * // => ['post', 'like', '2']\n*/\nexport function toPath(string) {\n\treturn string.replace(regexCloseBracket, emptyString).split(regexToPath);\n}\n\n","import { hasValue } from '../type/hasValue.js';\nimport { toPath } from '../utility/toPath.js';\nimport { everyArray } from '../array/every.js';\n/**\n * Returns property on an object.\n *\n * @function get\n * @category utility\n * @type {Function}\n * @param {string} propertyString - String used to retrieve properties.\n * @param {Object} objectChain - Object which has a property retrieved from it.\n * @returns {Object} - Returns property from the given object.\n *\n * @example\n * get('post.like[2]', {\n *   post: {\n *     like: ['a','b','c']\n *   }\n * });\n * // => 'c'\n */\nexport const get = (propertyString, objectChain) => {\n\tlet link = objectChain;\n\teveryArray(toPath(propertyString), (item) => {\n\t\tlink = link[item];\n\t\treturn hasValue(link);\n\t});\n\treturn link;\n};\n\n","/**\n * Checks if the value includes something.\n *\n * @function has\n * @category utility\n * @param {Array|String} value - Object to be checked.\n * @param {*} search - Object that is being searched for.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * has('My name is Acidjs', 'Acidjs');\n * // => true\n*/\nexport function has(value, ...search) {\n\treturn value && value.includes && value.includes(...search);\n}\n","import { regexTestFactory } from '../internal/regexTestFactory.js';\n/**\n * Checks if the string has a '.'.\n *\n * @function hasDot\n * @category utility\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * hasDot('test.js');\n * // => true\n*/\nexport const hasDot = regexTestFactory(/\\./);\n","import { hasValue } from '../type/hasValue.js';\n/**\n   * Checks if a property on an object has a value. If not, it will assign a value.\n   *\n   * @function ifNotEqual\n   * @category utility\n   * @type {Function}\n   * @param {Object} rootObject - The object to check.\n   * @param {string} property - The property name which is to be checked.\n   * @param {*} equalThis - The reassignment value for the property being checked.\n   * @returns {Object} - Returns the provided rootObject.\n   *\n   * @example\n   * ifNotEqual({}, 'a', 1);\n   * // => {a:1}\n */\nexport const ifNotEqual = (rootObject, property, equalThis) => {\n\tif (property && !hasValue(rootObject[property])) {\n\t\trootObject[property] = equalThis;\n\t}\n\treturn rootObject;\n};\n\n","import { hasValue } from '../type/hasValue.js';\n/**\n * @function ifValue\n * @category function\n * @param {*} source - The source object to be hasValue checked.\n * @returns {source} The source object if it passes the hasValue check.\n */\nexport function ifValue(source) {\n\tif (hasValue(source)) {\n\t\treturn source;\n\t}\n}\n","import { construct } from '../class/construct.js';\nimport { truth } from './stubTrue.js';\nimport { falsy } from './stubFalse.js';\nimport { noop } from './noop.js';\nimport { times } from './times.js';\nexport class Intervals {\n\tlist = construct(Map);\n\tconstruct() {\n\t}\n\t/**\n    * Remove a setInterval that was created using the intervals function.\n    *\n    * @param {number} id - The id of the setInterval to remove.\n    * @returns {undefined} - Returns nothing.\n    *\n    * @example\n    * timer(() => {}, 100);\n    * // => 0\n  */\n\tremove(id) {\n\t\tclearInterval(id);\n\t\tthis.list.delete(id);\n\t}\n\thas(id) {\n\t\treturn this.list.has(id);\n\t}\n\tget(id) {\n\t\treturn this.list.get(id);\n\t}\n\t/**\n    * Create a setInterval & add it to the list of interval timers.\n    *\n    * @type {Function}\n    * @param {Function} callable - The function to be invoked.\n    * @param {number} time - The time in milliseconds.\n    * @returns {Object} - Returns setTimeoutId ID.\n    *\n    * @example\n    * timers.set(() => {}, 100);\n    * // => 0\n  */\n\tset(callable, time) {\n\t\tconst currentThis = this;\n\t\tconst id = setInterval(() => {\n\t\t\tcallable();\n\t\t}, time);\n\t\tthis.list.set(id, truth);\n\t\treturn id;\n\t}\n\t/**\n    * Clear all active setIntervals.\n    *\n    * @returns {undefined} - Returns undefined.\n    *\n    * @example\n    * intervals.clear();\n    * // => undefined\n  */\n\tclear() {\n\t\tconst currentThis = this;\n\t\tcurrentThis.list.forEach((id) => {\n\t\t\tcurrentThis.remove(id);\n\t\t});\n\t}\n}\nexport const intervals = construct(Intervals);\n/**\n  * Create an interval timer.\n  *\n  * @function interval\n  * @category function\n  * @type {Function}\n  * @param {Function} callable - The function to be invoked.\n  * @param {number} time - The time in milliseconds.\n  * @returns {Object} - Returns setInterval ID.\n  *\n  * @example\n  * interval(() => {}, 100);\n  * // => 0\n*/\nexport function interval(callable, time) {\n\treturn intervals.set(callable, time);\n}\n/**\n  * Clear all active interval timers.\n  *\n  * @function clearIntervals\n  * @category function\n  * @returns {undefined} - Returns undefined.\n  *\n  * @example\n  * clearIntervals();\n  * // => undefined\n*/\nexport function clearIntervals() {\n\tconst id = setTimeout(noop, 0);\n\ttimes(id, (index) => {\n\t\tintervals.remove(index);\n\t});\n}\n","import { isArray } from '../type/isArray.js';\nimport { isPlainObject } from '../type/isPlainObject.js';\nimport { each } from './each.js';\n/**\n * Recursively deep assign a target object with a source object. The source objects values are assigned onto the target object's matching properties.\n *\n * @function merge\n * @category utility\n * @type {Function}\n * @param {Object} target - The object which will be modified.\n * @param {Object} source - Source object to merge into the target object.\n * @returns {Object} - Returns target.\n *\n * @example\n * import { merge, assert } from './Acid.js';\n * assert(merge([1,2,4],[3]), [3, 2, 4]);\n */\nconst structuredCloneSafe = globalThis.structuredClone;\nexport function merge(target, ...sources) {\n\teach(sources, (currentSource) => {\n\t\teach(currentSource, (sourceItem, sourceKey) => {\n\t\t\tif (target[sourceKey]) {\n\t\t\t\tif (isPlainObject(sourceItem) || isArray(sourceItem) || sourceItem.forEach) {\n\t\t\t\t\treturn merge(target[sourceKey], sourceItem);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[sourceKey] = sourceItem;\n\t\t});\n\t});\n\treturn target;\n}\n\n","import { get } from './get.js';\nimport { hasValue } from '../type/hasValue.js';\nimport { assign } from '../object/assign.js';\nimport { construct } from '../class/construct.js';\n/**\n * Set & Get a model.\n *\n * @function model\n * @type {Function}\n * @category utility\n * @param {string} modelName - Name of the model.\n * @param {object} modelValue - The model object.\n * @returns {*} - Returns the associated model.\n * @example\n * model('test', {a: 1}) && model('test');\n * // => {a: 1}\n */\nexport class Model {\n\tstatic models = {};\n\tconstructor(modelName, modelValue) {\n\t\tif (hasValue(modelValue)) {\n\t\t\tassign(this, modelValue);\n\t\t\tthis.modelName = modelName;\n\t\t\tModel.models.set(modelName, modelValue);\n\t\t} else {\n\t\t\tassign(this, modelName);\n\t\t}\n\t}\n}\n/**\n * Returns the model with the given name.\n *\n * @param {string} modelName - The name of the model to return.\n * @param {any} [modelValue] - The value of the model to return.\n * @returns {Model} - The model with the given name.\n */\nexport function model(modelName, modelValue) {\n\tif (hasValue(modelValue)) {\n\t\treturn construct(Model, [modelName, modelValue]);\n\t}\n\treturn get(modelName, Model.models);\n}\n\n","/**\n * A wrapper around the promise constructor.\n *\n * @function promise\n * @type {Function}\n * @category utility\n * @param {Function} callback - Function to be called back.\n * @returns {Promise} - A constructor with a callback function.\n * @test\n * (async () => {\n *   const result = await promise((accept) => {\n *     accept(true);\n *   });\n *   return assert(result, true);\n * });\n * @example\n * promise((a) => {});\n * // => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}\n */\nexport function promise(callback) {\n\treturn new Promise(callback);\n}\n\n","import { isEqual } from './isEqual.js';\nimport { everyArray } from '../array/every.js';\nimport { keys } from '../object/keys.js';\n/**\n * Using a deep comparison it checks if properties of two objects using an array are equal.\n *\n * @function propertyMatch\n * @type {Function}\n * @category utility\n * @param {Object} source - The source object to compare.\n * @param {Object} compared - Object to be compared to source.\n * @param {Array} properties - List of properties to compare defaults to keys(source).\n * @returns {Array} - Returns an array of properties.\n *\n * @example\n * import { propertyMatch } from './Acid.js';\n * propertyMatch({\n *   a: 1,\n *   b: 2\n * }, {\n *   a: 1,\n *   b: 2\n * }, ['a', 'b']);\n * // => true\n */\nexport const propertyMatch = (source, compared, properties = keys(source)) => {\n\treturn everyArray(properties, (property) => {\n\t\treturn isEqual(source[property], compared[property]);\n\t});\n};\n\n","import { eachObject } from '../object/each.js';\nexport class Store {\n\ttarget;\n\tconstructor(source = {}) {\n\t\tconst target = this.target = source;\n\t\tif (target === null || typeof target !== 'object') {\n\t\t\treturn target;\n\t\t}\n\t\teachObject(target, (property) => {\n\t\t\ttarget[property] = new Store(target[property]);\n\t\t});\n\t\tthis.data = new Proxy(target, {\n\t\t\tget(proxyTarget, property) {\n\t\t\t\tconsole.log(proxyTarget, property, proxyTarget[property]);\n\t\t\t\treturn proxyTarget[property];\n\t\t\t},\n\t\t\tset(proxyTarget, property, value) {\n\t\t\t\tconsole.log(proxyTarget, property, proxyTarget[property]);\n\t\t\t\tproxyTarget[property] = new Store(value);\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n}\n","/**\n * This method returns a new empty array.\n *\n * @function stubArray\n * @category function\n * @type {Function}\n * @returns {Array} - Returns the new empty array.\n * @example\n * import { stubArray } from './Acid.js';\n * stubArray();\n * // => []\n */\nexport const stubArray = () => {\n\treturn [];\n};\n\n","/**\n * This method returns a new empty object.\n *\n * @function stubObject\n * @category function\n * @type {Function}\n * @returns {Object} - Returns the new empty object.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * stubObject();\n * // => {}\n */\nexport const stubObject = () => {\n\treturn {};\n};\n\n","/**\n * This method returns a new empty string.\n *\n * @function stubString\n * @category function\n * @type {Function}\n * @returns {string} - Returns the new empty string.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * stubString();\n * // => ''\n */\nexport const stubString = () => {\n\treturn '';\n};\n","/**\n  * Asynchronously iterates based on the amount given awaiting on the iteratee with the current index as an argument.\n  *\n  * @async\n  * @function timesAsync\n  * @category utility\n  * @type {Function}\n  * @param {number} amount - The amount of times to loop invoking the iteratee.\n  * @param {Function} iteratee - Transformation function which is passed index and amount.\n  * @returns {undefined} - Nothing.\n  *\n  * @example\n  * import { timesAsync } from 'Acid';\n  * await timesAsync(3, async (item) => {\n  *   console.log(item);\n  * });\n  * // 0\n  * // 1\n  * // 2\n  * // => undefined\n*/\nexport async function timesAsync(amount, iteratee) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tawait iteratee(amount);\n\t}\n}\n/**\n  * Asynchronously iterates based on the amount given and maps the results awaited on by the iteratee each time to an array.\n  *\n  * @async\n  * @function timesMapAsync\n  * @category array\n  * @type {Function}\n  * @param {number} amount - The amount of times to loop invoking the iteratee.\n  * @param {Function} iteratee - Transformation function which is passed index and amount.\n  * @param {Array} [results = []] - Array that will have iteratee return pushed to.\n  * @returns {Array} - An array with iteratee's returned values.\n  *\n  * @example\n  * import { timesMapAsync } from 'Acid';\n  * await timesMapAsync(3, (item) => {\n  *   return item;\n  * });\n  * // => [0, 1, 2]\n*/\nexport async function timesMapAsync(amount, iteratee, results = []) {\n\tfor (let index = 0; index < amount; index++) {\n\t\tresults[index] = await iteratee(amount);\n\t}\n\treturn results;\n}\n","import { isEqual } from './isEqual.js';\n/**\n  * Performs a toggle between 2 values using a deep or strict comparison.\n  *\n  * @function toggle\n  * @type {Function}\n  * @category utility\n  * @param  {(string|number|Object|Array)} value - Strictly compared against on & off arguments.\n  * @param {(string|number|Object|Array)} on -  The first object to be compared to.\n  * @param {(string|number|Object|Array)} off - The second object to be compared to.\n  * @returns {(string|number|Object|Array)} - The opposing value to the current.\n  *\n  * @example\n  * import { stubArray } from './Acid.js';\n  * let toggleMe = true;\n  * toggleMe = toggle(toggleMe, true, false);\n  * // => false\n*/\nexport function toggle(value, on = true, off = false) {\n\treturn (isEqual(on, value)) ? off : on;\n}\n\n","/**\n * Unique ID Generator Module.\n *\n * @module utility/uid\n */\nimport { hasValue } from '../type/hasValue.js';\nimport { construct } from '../class/construct.js';\n/**\n * Creates a unique numerical recyclable ID generator. The IDs are numerically ascending however freed ids are recycled when available.\n *\n * @class UniqID\n * @type {class}\n * @category utility\n * @returns {UniqID} - Returns a new instance of UniqID.\n *\n * @example\n * import { UniqID, construct, assert } from './Acid.js';\n * const gen = construct(UniqID);\n * assert(gen.get(), 0);\n * assert(gen.get(), 1);\n * gen.free(0);\n * assert(gen.get(), 0);\n */\nexport class UniqID {\n\ttotalActive = 0;\n\tfreed = [];\n\ttotalFree = 0;\n\t/**\n\t * Generates a new ID or recycle one that is no longer used.\n\t *\n\t * @function get\n\t * @class UniqID\n\t * @category utility\n\t * @type {Function}\n\t * @returns {number} - Returns a unique id.\n\t *\n\t * @example\n\t * import { UniqID, construct, assert } from './Acid.js';\n\t * const gen = construct(UniqID);\n\t * assert(gen.get(), 0);\n\t */\n\tget() {\n\t\tlet result = this.freed.shift();\n\t\tif (hasValue(result)) {\n\t\t\tthis.totalFree--;\n\t\t} else {\n\t\t\tresult = this.totalActive;\n\t\t\tthis.totalActive++;\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * Frees an UID so that it may be recycled for later use.\n\t *\n\t * @function free\n\t * @class UniqID\n\t * @category utility\n\t * @type {Function}\n\t * @param {number} id - Number to be freed.\n\t * @returns {undefined} - Nothing is returned.\n\t *\n\t * @example\n\t * import { UniqID, construct, assert } from './Acid.js';\n\t * const gen = construct(UniqID);\n\t * assert(gen.get(), 0);\n\t * gen.free(0);\n\t * assert(gen.get(), 0);\n\t */\n\tfree(id) {\n\t\tthis.freed.push(id);\n\t\tthis.totalFree++;\n\t\tconst isActive = this.totalActive > 0;\n\t\tconst shouldReset = this.totalActive === this.totalFree;\n\t\tif (isActive && shouldReset) {\n\t\t\tthis.reset();\n\t\t}\n\t}\n\treset() {\n\t\tthis.totalActive = 0;\n\t\tthis.freed.length = 0;\n\t\tthis.totalFree = 0;\n\t}\n}\n/**\n * A built in constructed instance of UniqID. Creates a unique numerical recyclable ID. The IDs are numerically ascending however freed ids are recycled when available.\n *\n * @function uniqID\n * @category utility\n *\n * @example\n * import { uniqID, assert } from './Acid.js';\n * assert(uniqID.get(), 0);\n * assert(uniqID.get(), 1);\n * uniqID.free(0);\n * assert(uniqID.get(), 0);\n */\nexport const uniqID = construct(UniqID);\n","/**\n * Class representing a virtual storage. A drop in replacement for localStorage.\n * The virtualStorage function is a factory which wraps the VirtualStorage constructor & returns it.\n * Direct class/constructor access is named VirtualStorage.\n *\n * @category utility\n * @returns {*} - Returns a new VirtualStorage Object.\n *\n * @example\n * import { stubArray } from './Acid.js';\n * const myVirtualStorage = virtualStorage();\n * // => New Crate Object\n */\nexport class VirtualStorage {\n\tconstructor(initialObject = {}) {\n\t\tthis.items = initialObject;\n\t}\n\t/**\n\t * Get an item from a virtual storage object.\n\t *\n\t * @param {string} key - The key used to store the data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { VirtualStorage } from './Acid.js';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.getItem('key');\n\t * // => 'value'\n\t */\n\tgetItem(key) {\n\t\treturn this.items[key];\n\t}\n\t/**\n\t * Save an item to a virtual storage object.\n\t *\n\t * @param {string} key - The key used to store the data.\n\t * @param {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { VirtualStorage, assert } from './Acid.js';\n\t * const vStorage = new VirtualStorage();\n\t * vStorage.setItem('title', 'value');\n\t * assert(vStorage.getItem('title'), 'value');\n\t */\n\tsetItem(key, value) {\n\t\tthis.items[key] = value;\n\t}\n\t/**\n\t * Clears all data from the virtual storage object by replacing with a new object.\n\t *\n\t * @param {string} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { stubArray } from './Acid.js';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.clear();\n\t * myVirtualStorage.getItem('key');\n\t * // => undefined\n\t */\n\tclear() {\n\t\tthis.items = {};\n\t}\n\t/**\n\t * Remove an item from a virtual storage object.\n\t *\n\t * @param {string} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { stubArray } from './Acid.js';\n\t * const myVirtualStorage = virtualStorage();\n\t * myVirtualStorage.setItem('key', 'value');\n\t * myVirtualStorage.removeItem('key');\n\t * myVirtualStorage.getItem('key');\n\t * // => undefined\n\t */\n\tremoveItem(key) {\n\t\tthis.items[key] = null;\n\t}\n}\n/**\n *  The virtualStorage function is a factory which wraps the VirtualStorage class constructor.\n *\n * @function virtualStorage\n * @category browser\n * @type {Function}\n * @returns {*} - Returns a new VirtualStorage Object.\n *\n * @example\n * import { virtualStorage, assert } from './Acid.js';\n * const vStorage = virtualStorage();\n * vStorage.setItem('title', 'value');\n * assert(vStorage.getItem('title'), 'value');\n */\nexport function virtualStorage(initialObject) {\n\treturn new VirtualStorage(initialObject);\n}\n\n","import { eachArray } from '../array/each.js';\nimport { eachObject } from '../object/each.js';\nimport { isBoolean } from '../type/isBoolean.js';\nimport { keys } from '../object/keys.js';\n/**\n * Checks to see of the browser agent has a string.\n *\n * @function isAgent\n * @category browser\n * @type {Function}\n * @param {string} value - The string to search for.\n * @returns {boolean} - Returns true or false.\n * @example\n * isAgent('mobile');\n * // => false\n */\nexport function isAgent(value) {\n\treturn (value) ? isAgent[value] : keys(isAgent);\n}\nconst userAgent = globalThis.navigator?.userAgentData;\nif (userAgent) {\n\teachObject(userAgent, (value, key) => {\n\t\tif (isBoolean(value) && value) {\n\t\t\tisAgent[key] = value;\n\t\t}\n\t});\n\teachArray(userAgent.brands, (value) => {\n\t\tisAgent[value.brand] = value.version;\n\t});\n} else if (navigator.userAgent) {\n\tlet userAgentNormalized = navigator.userAgent.toLowerCase();\n\tuserAgentNormalized = userAgentNormalized.replace(/_/g, '.');\n\tuserAgentNormalized = userAgentNormalized.replace(/[#_,;()]/g, '');\n\tconst userAgentSplit = userAgentNormalized.split(/ |\\//);\n\teachArray(userAgentSplit, (item) => {\n\t\tisAgent[item] = true;\n\t});\n}\n\n","/**\n * Attaches an event listener to a node.\n *\n * @function eventAdd\n * @category browser\n * @type {Function}\n * @param {Node} node - Given node.\n * @param {string} eventName - A string representing the event type.\n * @param {Object|Function} callback - The object which receives a notification when an event of the specified type occurs.\n * @param {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n * @returns {Node} - Returns given node.\n *\n * @example\n * eventAdd(document.body, 'click', () => {console.log('CLICKED');});\n * // = > document.body\n */\nexport function eventAdd(node, eventName, callback, useCapture) {\n\tnode.addEventListener(eventName, callback, useCapture);\n\treturn node;\n}\n/**\n * Attaches an event listener to a node.\n *\n * @function eventRemove\n * @category browser\n * @type {Function}\n * @param {Node} node - Given node.\n * @param {string} eventName - A string representing the event type.\n * @param {Object|Function} callback - The object which receives a notification when an event of the specified type occurs.\n * @param {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n * @returns {Node} - Returns given node.\n *\n * @example\n * eventRemove(document.body, () => {console.log('CLICKED');});\n * // = > Undefined\n */\nexport function eventRemove(node, eventName, callback, useCapture) {\n\tnode.removeEventListener(eventName, callback, useCapture);\n\treturn node;\n}\n\n","/**\n * Checks if the keycode of the event is strictly equal to 13.\n *\n * @function isEnter\n * @category browser\n * @type {Function}\n * @param {Object} eventObject - Object to be checked.\n * @returns {boolean} - Returns true if the keycode property of the object equals 13.\n *\n * @example\n * isEnter('click');\n * // => false\n */\nexport function isEnter(eventObject) {\n\treturn eventObject.keyCode === 13;\n}\n\n","/**\n  * Create a document fragment.\n  *\n  * @function createFragment\n  * @category browser\n  * @type {Function}\n  * @ignore\n  * @returns {Fragment} - Returns a new document fragment.\n*/\nexport const createFragment = document.createDocumentFragment.bind(document);\n","/**\n * Append a DOM node.\n *\n * @function append\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @ignore\n * @param {Node} parentNode - The parent node.\n * @param {Node} child - The node to be appended.\n * @returns {undefined} - Returns the child.\n */\nexport function append(parentNode, child) {\n\tparentNode.appendChild(child);\n\treturn child;\n}\n","import { eachObject } from '../object/each.js';\nimport { isArray } from '../type/isArray.js';\nimport { mapArray } from '../array/map.js';\nimport { zipObject } from '../object/zip.js';\n/**\n * Assign attributes to a DOM node.\n *\n * @function nodeAttribute\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @async\n * @param {Node} node - The DOM node.\n * @param {Object|Array} object - Object with key being the attribute name and the value being the attribute value. If an array is given it will get the values corresponding to the array items.\n * @returns {Object|Node} - If using an array this returns an object of attribute names as keys and their values as the property value. If using an object this will return the provided node.\n *\n * @example\n * nodeAttribute(document.body, { 'data-example': 'test'});\n */\nexport function nodeAttribute(node, object) {\n\tif (isArray(object)) {\n\t\treturn zipObject(object, mapArray(object, (item) => {\n\t\t\treturn node.getAttribute(item);\n\t\t}));\n\t}\n\teachObject(object, (item, key) => {\n\t\tnode.setAttribute(key, item);\n\t});\n\treturn node;\n}\n\n","import { restString } from '../string/range.js';\nconst dotString = '.';\nconst poundString = '#';\nconst classTest = /^.[\\w_-]+$/;\nconst tagTest = /^[A-Za-z]+$/;\nconst regexSpace = /\\s/;\n/**\n * Wrapper around getElementsByClassName.\n *\n * @function getByClass\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getByClass = document.getElementsByClassName.bind(document);\n/**\n * Wrapper around getElementsByTagName.\n *\n * @function getByTag\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getByTag = document.getElementsByTagName.bind(document);\n/**\n * Wrapper around getElementsByIdName.\n *\n * @function getById\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const getById = document.getElementById.bind(document);\n/**\n * Wrapper around querySelector.\n *\n * @function querySelector\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const querySelector = document.querySelector.bind(document);\n/**\n * Wrapper around querySelectorAll.\n *\n * @function querySelectorAll\n * @category browser\n * @ignoreTest\n * @type {Function}\n */\nexport const querySelectorAll = document.querySelectorAll.bind(document);\n/**\n * Returns relevant DOM node.\n *\n * @function selector\n * @category browser\n * @ignoreTest\n * @param {string} select - String to be evaluated.\n * @type {Function}\n * @returns {Node} - Returns a DOM node.\n *\n * @example\n * selector('#node');\n * // => <div id=\"node\"></div>\n */\nexport function selector(select) {\n\tconst firstLetter = select[0];\n\tswitch (firstLetter) {\n\tcase poundString:\n\t\tif (!regexSpace.test(select)) {\n\t\t\treturn getById(restString(select));\n\t\t}\n\t\tbreak;\n\tcase dotString:\n\t\tif (classTest.test(select)) {\n\t\t\treturn getByClass(restString(select));\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tif (tagTest.test(select)) {\n\t\t\treturn getByTag(select);\n\t\t}\n\t}\n\treturn querySelectorAll(select);\n}\n\n","import { append } from './append.js';\nimport { hasDot } from '../utility/hasDot.js';\nimport { eventAdd } from './event.js';\nimport { nodeAttribute } from './attribute.js';\nimport { promise } from '../utility/promise.js';\nimport { querySelector } from './selector.js';\nconst createElementCache = document.createElement.bind(document);\nconst nodeAttachLoadingEvents = (node) => {\n\treturn promise((accept) => {\n\t\teventAdd(node, 'load', accept, true);\n\t\teventAdd(node, 'error', accept, true);\n\t\tappend(querySelector('head'), node);\n\t});\n};\n/**\n * Asynchronously import a js file and append it to the head node.\n * If a script fails to load importjs won't reject the promise rather it'll return the error event to limit further complications & reduce code complexity.\n *\n * @function importjs\n * @category browser\n * @type {Function}\n * @async\n * @param {*} url - URL of the script to import. If not \".\" is found in the file name \".js\" will be appended.\n * @returns {Promise} - Returns a promise which returns a \"load\" or \"error\" event associated with the script.\n *\n * @example\n * importjs('core.js');\n * importjs('core');\n */\nexport function importjs(url) {\n\tconst src = hasDot(url) && url || `${url}.js`;\n\tconst node = nodeAttribute(createElementCache('script'), {\n\t\tasync: '',\n\t\tsrc\n\t});\n\treturn nodeAttachLoadingEvents(node);\n}\n\n","import { eventAdd } from './event.js';\nimport { importjs } from './importScript.js';\nimport { getById } from './selector.js';\n/**\n * Runs a function if the document has finished loading. If not, add an eventlistener.\n *\n * @function isDocumentReady\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @param {Function} callable - Function to be run.\n * @returns {Boolean|Function} - If the document is ready, returns a function. If not, return false.\n *\n * @example\n * isDocumentReady(() => {return 1});\n * // => 1\n */\nexport function isDocumentReady(callable) {\n\tconst state = document.readyState;\n\tconst checkStatus = state === 'interactive' || state === 'completed' || state === 'complete';\n\tif (checkStatus) {\n\t\treturn (callable) ? callable() : true;\n\t}\n\tif (callable) {\n\t\teventAdd(document, 'DOMContentLoaded', callable);\n\t}\n\treturn false;\n}\nisDocumentReady(() => {\n\tconst scriptTag = getById('AcidLib');\n\tconst scriptName = (scriptTag && scriptTag.getAttribute('data-index')) || '/index';\n\timportjs(scriptName);\n});\n","const protocol = location.protocol;\nconst protocolSocket = (protocol === 'http:') ? 'ws' : 'wss';\nconst hostname = location.hostname;\n/**\n * Holds client hardware, browser, and host info.\n *\n * @memberof $\n * @category browser\n * @ignoreTest\n * @property {object} info - Client hardware & host info.\n * @type {object}\n */\nexport const info = {\n\thardware: {\n\t\tcores: navigator.hardwareConcurrency\n\t},\n\thost: {\n\t\tname: hostname,\n\t\tprotocol,\n\t\tprotocolSocket,\n\t}\n};\n\n","import { assign } from '../object/assign.js';\nimport { eventAdd } from './event.js';\nimport { info } from './info.js';\nimport { isDocumentReady } from './ready.js';\nexport function saveDimensions() {\n\tassign(info, {\n\t\tbodyHeight: document.body.offsetHeight,\n\t\tbodyWidth: document.body.offsetWidth,\n\t\twindowHeight: window.innerHeight,\n\t\twindowWidth: window.innerWidth,\n\t});\n}\n/**\n * Save current document & window dimensions to the info property.\n *\n * @function updateDimensions\n * @category browser\n * @ignoreTest\n * @type {Function}\n * @returns {undefined} - Returns undefined.\n *\n * @example\n * updateDimensions();\n */\nexport function updateDimensions() {\n\tsaveDimensions();\n}\nisDocumentReady(updateDimensions);\neventAdd(window, 'load', updateDimensions, true);\neventAdd(window, 'resize', updateDimensions, true);\n\n","/**\n * LocalStorage Module..\n *\n * @module browser/storage\n */\nimport { hasValue } from '../type/hasValue.js';\nimport { isString } from '../type/isString.js';\nimport { stringify } from '../utility/json.js';\nimport { virtualStorage } from '../utility/virtualStorage.js';\nexport let hasLocal;\nfunction hasStorage(storeCheck) {\n\ttry {\n\t\tstoreCheck().removeItem('TESTING');\n\t\thasLocal = true;\n\t} catch (e) {\n\t\thasLocal = false;\n\t}\n}\nhasStorage(() => {\n\treturn localStorage;\n});\n/**\n * Constructs a virtual storage container with localStorage support.\n * Crate will fallback to strictly virtual storage if localStorage isn't supported.\n * If localStorage is supported virtual storage will be used first & only fallback to localStorage when needed.\n * Crate is ideal as a seemless drop in replacement for localStorage when not supported or allowed.\n *\n * @class Crate\n * @category browser\n * @returns {Crate} - Returns a new instance of Crate.\n *\n * @example\n * import { Crate, construct, assert } from './Acid.js';\n * const storageCrate = construct(Crate);\n * storageCrate.setItem('key', 'value');\n * assert(storageCrate.getItem('key'), 'value');\n */\nexport class Crate {\n\tconstructor(initialObject) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local = localStorage;\n\t\t}\n\t\tthis.storage = virtualStorage(initialObject);\n\t}\n\thasLocal = hasLocal;\n\t/**\n\t * Save an item to a crate.\n\t *\n\t * @function setItem\n\t * @class Crate\n\t * @category browser\n\t * @param {string} key - The key used to store the data.\n\t * @param {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { Crate, construct, assert } from './Acid.js';\n\t * const storageCrate = construct(Crate);\n\t * storageCrate.setItem('key', 'value');\n\t * assert(storageCrate.getItem('key'), 'value');\n\t */\n\tsetItem(key, value) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.setItem(key, (isString(value)) ? value : stringify(value));\n\t\t}\n\t\treturn this.storage.setItem(key, value);\n\t}\n\t/**\n\t * Get an item from a crate.\n\t *\n\t * @function getItem\n\t * @class Crate\n\t * @category browser\n\t * @param {string} key - The key used to store the data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { Crate, construct, assert } from './Acid.js';\n\t * const storageCrate = construct(Crate);\n\t * storageCrate.setItem('key', 'value');\n\t * assert(storageCrate.getItem('key'), 'value');\n\t */\n\tgetItem(key) {\n\t\tconst item = this.storage.getItem(key);\n\t\tif (hasValue(item)) {\n\t\t\treturn item;\n\t\t}\n\t\tif (!hasValue(item) && this.hasLocal) {\n\t\t\treturn this.local.getItem(key);\n\t\t}\n\t}\n\t/**\n\t * Clears all data for the crate including all of localStorage if supported.\n\t *\n\t * @function clear\n\t * @class Crate\n\t * @category browser\n\t * @param {string} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { Crate, construct, assert } from './Acid.js';\n\t * const storageCrate = construct(Crate);\n\t * storageCrate.setItem('key', 'value');\n\t * assert(storageCrate.getItem('key'), 'value');\n\t * storageCrate.clear();\n\t * assert(storageCrate.getItem('key'), undefined);\n\t */\n\tclear() {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.clear();\n\t\t}\n\t\tthis.storage.clear();\n\t}\n\t/**\n\t * Remove an item from a crate.\n\t *\n\t * @class Crate\n\t * @category browser\n\t * @function removeItem\n\t * @param {string} key - The key used to remove data.\n\t * @returns {undefined} - Returns undefined.\n\t *\n\t * @example\n\t * import { Crate, construct, assert } from './Acid.js';\n\t * const storageCrate = construct(Crate);\n\t * storageCrate.setItem('key', 'value');\n\t * assert(storageCrate.getItem('key'), 'value');\n\t * storageCrate.removeItem('key');\n\t * assert(storageCrate.getItem('key'), undefined);\n\t */\n\tremoveItem(key) {\n\t\tif (this.hasLocal) {\n\t\t\tthis.local.removeItem(key);\n\t\t}\n\t\tthis.storage.removeItem(key);\n\t}\n}\n/**\n *  The crate function is a factory which wraps the Crate class constructor.\n *\n * @function crate\n * @category browser\n * @type {Function}\n * @returns {*} - Returns a new Crate Object.\n *\n * @example\n * const storageCrate = crate();\n * // => New Crate Object\n */\nexport function crate(virtualFlag) {\n\treturn new Crate(virtualFlag);\n}\n\n","import { isString } from '../type/isString.js';\nimport { stringify } from '../utility/json.js';\nconst generateTheme = (color, bg) => {\n\treturn `color:${color};background:${bg};`;\n};\nexport const themes = {\n\talert: generateTheme('#fff', '#f44336'),\n\timportant: generateTheme('#fff', '#E91E63'),\n\tnotify: generateTheme('#fff', '#651FFF'),\n\twarning: generateTheme('#000', '#FFEA00'),\n};\n/**\n  * Console.trace wrapper with theme support.\n  *\n  * @function cnsl\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {Object} value - The value to be logged.\n  * @param {string} themeName - The name of the theme to be used.\n  * @returns {undefined} - Returns undefined.\n  *\n  * @example\n  * cnsl('Lucy', 'notify');\n  * // 'Lucy'\n*/\nexport const cnsl = (value, themeName) => {\n\tconst data = isString(value) ? value : stringify(value);\n\tif (themeName === 'alert' || themeName === 'warning') {\n\t\treturn console.trace(`%c${data}`, `${themes[themeName]}font-size:13px;padding:2px 5px;border-radius:2px;`);\n\t}\n\tconsole.log(`%c${data}`, `${themes[themeName]}font-size:13px;padding:2px 5px;border-radius:2px;`);\n};\n/**\n  * Create color themes for cnsl method.\n  *\n  * @function cnslTheme\n  * @category browser\n  * @ignoreTest\n  * @type {Function}\n  * @param {string} themeName - The name of the theme.\n  * @param {string} color - The text color.\n  * @param {string} background - The background color of the block.\n  * @returns {undefined} - Returns undefined.\n  *\n  * @example\n  * cnslTheme('BlackNWhite', '#fff', '#000');\n*/\nexport const cnslTheme = (themeName, color, background) => {\n\tthemes[themeName] = generateTheme(color, background);\n};\n\n","import { hasValue } from '../type/hasValue.js';\n/**\n * Checks if value is a plain DOM Node.\n *\n * @function isDom\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isDom(document.querySelectorAll('.test'));\n * // => true\n */\nexport function isDom(value) {\n\treturn value && value.nodeType !== 9;\n}\n/**\n * Checks if the value is a HTMLCollection.\n *\n * @function isHTMLCollection\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isHTMLCollection(document.getElementsByClassName('test'));\n * // => true\n */\nconst objectHTMLCollection = '[object HTMLCollection]';\nexport function isHTMLCollection(source) {\n\treturn (hasValue(source)) ? source.toString() === objectHTMLCollection : false;\n}\n/**\n * Checks if the value is a NodeList.\n *\n * @function isNodeList\n * @category browser\n * @ignoreTest\n * @param {*} value - Object to be checked.\n * @returns {boolean} - Returns true or false.\n *\n * @example\n * isNodeList(document.querySelectorAll('.test'));\n * // => true\n */\nconst objectNodeList = '[object NodeList]';\nexport function isNodeList(source) {\n\treturn (hasValue(source)) ? source.toString() === objectNodeList : false;\n}\n"],"names":["apply","Reflect","toArray","Array","from","isSame","Object","is","getOwnPropertyDescriptor","defineProperty","getOwnPropertyNames","isUndefined","value","undefined","isNull","hasValue","regexTestFactory","regexType","item","test","isBoolean","constructor","name","isConstructor","obj","nativeObject","isConstructorFactory","source","target","constructorName","isString","String","isArray","isPlainObject","toString","trim","slice","hasLength","Boolean","length","objectKeys","keys","objectSize","isEmpty","isI32","isBuffer","isF32","isI8","isPrimitive","type","isU16","objectWeakMap","isWeakMap","objectArguments","isArguments","isF64","objectMap","isMap","isPromise","Promise","isU32","isDate","Date","isFunction","Function","isRegExp","RegExp","isU8","isAsync","isKindAsync","decimalCheck","isDecimal","isI16","isNumber","Number","objectSet","isSet","isU8C","getExtensionRegex","getFileExtension","match","isFileCSS","isFileHTML","isFileJS","isFileJSON","chunk","array","size","chunked","index","forEach","key","push","clear","cloneArray","returnValue","eachArray","iteratee","thisBind","arrayLength","compactMapArray","results","arrayOriginal","returned","async","eachAsyncArray","compactMapAsync","result","rangeUp","start","end","incrementArg","rangeArray","position","rangeDown","increment","range","step","eachObject","original","propertyCount","forEachWrap","object","callback","generateLoop","arrayLoop","objectLoop","each","ensureArray","flattenDeep","flat","Infinity","reflectConstruct","construct","argumentsList","newTarget","difference","sources","differencesMap","Map","differences","currentArray","parentIndex","child","childIndex","childRoot","get","count","set","drop","amount","upTo","splice","dropRight","eachRight","eachRightAsync","callingArray","everyArray","filterArray","first","flatten","level","sourceArray","i","reduce","previousValue","currentValue","concat","initial","intersection","arrays","otherItem","includes","hasKeys","properties","hasAnyKeys","find","isEqual","compareObject","sourceProperties","isMatchArray","compareArray","mathNativeMax","Math","max","largest","last","indexFrom","mapArray","mapAsyncArray","mapRightArray","trueIndex","mapWhile","numericalCompare","a","b","numSort","numberList","sort","arrayToObject","sortedObject","partition","funct","failed","numericalCompareReverse","rNumSort","remove","removeThese","removeBy","rest","right","mathNative","floorMethod","floor","randomMethod","random","add","number","minus","divide","multiply","remainder","deduct","randomArbitrary","min","randomInt","shuffle","shuffleArray","sample","sampleArray","used","mathNativeMin","smallest","sortedIndex","insertThis","sum","take","endIndex","onlyUnique","indexOf","sortUnique","unique","isSorted","filter","union","whileCompactMap","whileEachArray","whileMapArray","without","xor","xorMap","xored","zip","map","unZip","arraySet","countBy","collection","countKey","propertyName","countWithoutKey","findIndexCache","element","indexMatch","findItem","id","findIndex","groupBy","indexBy","invoke","property","invokeAsync","pluck","pluckThis","pluckObject","pluckThese","pluckValues","sortAlphabetical","current","next","currentKey","nextKey","sortNewest","pureMode","previous","getNewest","sortOldest","getOldest","after","callable","point","args","ary","before","mapObject","bindAll","bindThis","bind","objectAssign","assign","link","methods","chain","addToChain","done","curry","arity","curries","curried","curryArgs","curryRight","unshift","truth","stubTrue","falsy","stubFalse","noop","times","timesMap","Timers","list","clearTimeout","this","delete","has","time","currentThis","setTimeout","timers","timer","clearTimers","debounce","debounced","ifInvoke","inAsync","firstArgument","inSync","negate","nthArg","once","everyObject","every","over","overEvery","predicates","reArg","indexes","throttle","throttled","shouldThrottle","wrap","wrapper","arg","isNumberEqual","num","isNumberInRange","isZero","compactKeys","compactedKeys","compactMapObject","eachObjectAsync","filterObject","invert","thisObject","invertedObject","isMatchObject","mapObjectAsync","compactMapObjectAsync","omit","originalObject","pick","newObject","zipObject","values","zipedObject","unZipObject","unZippedKeys","normalizeCase","spaceFirstLetter","upperCase","string","replace","toUpperCase","camelCase","toLowerCase","kebabCase","snakeCase","insertInRange","text","rightString","chunkString","initialString","restString","substr","replaceList","words","join","rawURLDecodeRegex","andRegex","lessThanRegex","moreThanRegex","doubleQuoteRegex","rawURLDecode","decodeURIComponent","htmlEntities","sanitize","tokenizeRegEx","wordsRegEx","tokenize","truncateDown","maxLength","stringLength","breakAll","split","breakAllLength","truncateUp","truncate","truncateRight","upperFirstLetter","upperFirst","upperFirstAll","upperFirstOnly","upperFirstOnlyAll","jsonNative","JSON","jsonParse","reviver","parse","stringify","assert","expected","options","localOptions","globalThis","errorTitle","title","method","file","Error","createAssertError","functionPrototype","prototype","cacheNativeMethod","call","structuredCloneSafe","structuredClone","clone","truey","returnIfTrue","compact","sourceKeys","sourceKeysLength","targetObject","keyName","falsey","returnFlow","flow","flowRight","flowAsync","flowAsyncRight","regexToPath","regexCloseBracket","emptyString","toPath","propertyString","objectChain","search","hasDot","ifNotEqual","rootObject","equalThis","ifValue","Intervals","clearInterval","setInterval","intervals","interval","clearIntervals","merge","currentSource","sourceItem","sourceKey","Model","static","modelName","modelValue","models","model","promise","propertyMatch","compared","Store","data","Proxy","proxyTarget","console","log","stubArray","stubObject","stubString","timesAsync","timesMapAsync","toggle","on","off","UniqID","totalActive","freed","totalFree","shift","free","isActive","shouldReset","reset","uniqID","VirtualStorage","initialObject","items","getItem","setItem","removeItem","virtualStorage","isAgent","userAgent","navigator","userAgentData","brands","brand","version","userAgentNormalized","eventAdd","node","eventName","useCapture","addEventListener","eventRemove","removeEventListener","isEnter","eventObject","keyCode","createFragment","document","createDocumentFragment","append","parentNode","appendChild","nodeAttribute","getAttribute","setAttribute","dotString","poundString","classTest","tagTest","regexSpace","getByClass","getElementsByClassName","getByTag","getElementsByTagName","getById","getElementById","querySelector","querySelectorAll","selector","select","createElementCache","createElement","nodeAttachLoadingEvents","accept","importjs","url","src","isDocumentReady","state","readyState","scriptTag","protocol","location","protocolSocket","hostname","info","hardware","cores","hardwareConcurrency","host","saveDimensions","bodyHeight","body","offsetHeight","bodyWidth","offsetWidth","windowHeight","window","innerHeight","windowWidth","innerWidth","updateDimensions","hasLocal","storeCheck","e","hasStorage","localStorage","Crate","local","storage","crate","virtualFlag","generateTheme","color","bg","themes","alert","important","notify","warning","cnsl","themeName","trace","cnslTheme","background","isDom","nodeType","objectHTMLCollection","isHTMLCollection","objectNodeList","isNodeList"],"mappings":"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"}