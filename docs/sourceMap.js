window.docMap = {"categories":[{"categoryName":"main","items":["$","superMethod"]},{"categoryName":"array","items":["arrayToObject","asyncEach","chunk","clear","cloneArray","compact","compactMapArray","compactMapAsync","difference","drop","dropRight","eachArray","eachArrayRight","eachAsync","eachAsyncRight","ensureArray","filterArray","first","flatten","flattenDeep","initial","intersect","isMatchArray","largest","last","mapArray","mapArrayRight","mapAsync","mapWhile","numSort","partition","rNumSort","remove","removeBy","rest","right","sample","shuffle","smallest","sortedIndex","sum","take","takeRight","times","timesMap","toArray","unZip","union","unique","whileArray","without","xor","zip"]},{"categoryName":"collection","items":["countBy","countKey","countWithoutKey","findIndex","findItem","getNewest","getOldest","groupBy","indexBy","invoke","invokeAsync","pluck","pluckValues","sortAlphabetical","sortNewest","sortOldest"]},{"categoryName":"function","items":["after","apply","ary","before","bindAll","chain","curry","every","ifInvoke","inAsync","inSync","negate","noop","nthArg","once","over","overEvery","reArg","stubArray","stubFalse","stubObject","stubString","stubTrue","wrap"]},{"categoryName":"number","items":["add","deduct","divide","increment","isNumberEqual","isNumberInRange","isZero","minus","multiply","randomArbitrary","randomInt","remainder"]},{"categoryName":"object","items":["assign","compactKeys","compactMapObject","compactMapObjectAsync","defineProperty","eachObject","eachObjectAsync","filterObject","getOwnPropertyDescriptor","getOwnPropertyNames","hasAnyKeys","hasKeys","invert","is","isMatchObject","keys","mapObject","mapObjectAsync","objectSize","omit","pick","pluckObject","whileObject","zipObject"]},{"categoryName":"string","items":["camelCase","chunkString","htmlEntities","initialString","insertInRange","kebabCase","rawURLDecode","replaceList","restString","rightString","sanitize","snakeCase","tokenize","truncate","truncateRight","upperCase","upperFirst","upperFirstAll","upperFirstLetter","upperFirstOnly","upperFirstOnlyAll"]},{"categoryName":"utility","items":["assignDeep","cacheNativeMethod","compactMap","each","eachWhile","filter","flow","flowAsync","flowAsyncRight","flowRight","get","getFileExtension","has","hasDot","hasLength","hasValue","ifNotEqual","isArguments","isArray","isArrayBuffer","isBoolean","isDate","isDecimal","isEmpty","isEqual","isFileCSS","isFileHTML","isFileJS","isFileJSON","isFloat32Array","isFloat64Array","isFunction","isInt16Array","isInt32Array","isInt8Array","isMap","isNull","isNumber","isPlainObject","isRegExp","isSet","isString","isUint16Array","isUint32Array","isUint8Array","isUint8ClampedArray","isUndefined","isWeakMap","jsonParse","map","model","promise","propertyMatch","stringify","toPath","toggle","uid"]}],"items":{"$":{"categoryName":"main","description":"Acid Object accessible through $ default method is model.","examples":[{"tag":"example","name":"$('modelName',","optional":false,"description":"{example: 1});\n// => {example: 1}","source":"$('modelName', { example: 1 });\n// => {example: 1}"}],"name":"$","category":{"tag":"category","name":"main","optional":false,"source":"main"},"returns":{"tag":"returns","type":"*","name":"The","optional":false,"description":"return value of the superMethod. The default superMethod is model.","source":"{*} The return value of the superMethod. The default superMethod is model."}},"superMethod":{"categoryName":"main","description":"Re-assigns the main method for $.","examples":[{"tag":"example","name":"superMethod($.get);","optional":false,"description":"$('flow', $);\n// => $.flow","source":"superMethod($.get);\n$('flow', $);\n// => $.flow"}],"name":"superMethod","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function that will become the main object's subroutine.","source":"{Function} callable - The function that will become the main object's subroutine."}],"category":{"tag":"category","name":"main","optional":false,"source":"main"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nsuperMethod($.get);\nreturn assert($('flow', $), $.flow);\n});","source":"(async () => {\nsuperMethod($.get);\nreturn assert($('flow', $), $.flow);\n});"},"memberof":{"tag":"memberof","name":"$","optional":false,"source":"$"},"returns":{"tag":"returns","type":"undefined","name":"-","optional":false,"description":"Returns nothing.","source":"{undefined} - Returns nothing."}},"keys":{"categoryName":"object","description":"Get object's keys.","examples":[{"tag":"example","name":"keys({a:","optional":false,"description":"1, b: 2});\n// => ['a', 'b']","source":"keys({ a: 1, b: 2 });\n// => ['a', 'b']"}],"name":"keys","params":[{"tag":"param","type":"*","name":"object","optional":false,"description":"- Object to pull keys from.","source":"{*} object - Object to pull keys from."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Array","name":"Array","optional":false,"description":"of keys.","source":"{Array} Array of keys."}},"is":{"categoryName":"object","description":"Determines whether two values are the same value.","examples":[{"tag":"example","name":"is('foo',","optional":false,"description":"'foo');\n// => true","source":"is('foo', 'foo');\n// => true"}],"name":"is","params":[{"tag":"param","type":"*","name":"object","optional":false,"description":"- Value to compare to.","source":"{*} object - Value to compare to."},{"tag":"param","type":"*","name":"object","optional":false,"description":"- A value to compare.","source":"{*} object - A value to compare."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Boolean","name":"A","optional":false,"description":"Boolean indicating whether or not the two arguments are the same value.","source":"{Boolean} A Boolean indicating whether or not the two arguments are the same value."}},"assign":{"categoryName":"object","description":"Copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.","examples":[{"tag":"example","name":"assign({b:","optional":false,"description":"2}, {a: 1});\n// => {b: 2, a: 1}","source":"assign({ b: 2 }, { a: 1 });\n// => {b: 2, a: 1}"}],"name":"assign","params":[{"tag":"param","type":"Object","name":"target","optional":false,"description":"- The target object.","source":"{Object} target - The target object."},{"tag":"param","type":"Object","name":"sources","optional":false,"description":"- The source object(s).","source":"{Object} sources - The source object(s)."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the target object.","source":"{Object} Returns the target object."}},"getOwnPropertyDescriptor":{"categoryName":"object","description":"Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.","examples":[{"tag":"example","name":"getOwnPropertyDescriptor({","optional":false,"description":"bar: 42 }, 'bar');\n// => { configurable: true, enumerable: true, value: 42, writable: true }","source":"getOwnPropertyDescriptor({ bar: 42 }, 'bar');\n// => { configurable: true, enumerable: true, value: 42, writable: true }"}],"name":"getOwnPropertyDescriptor","params":[{"tag":"param","type":"Object","name":"obj","optional":false,"description":"- The target object.","source":"{Object} obj - The target object."},{"tag":"param","type":"String","name":"property","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"{String} property - The name of the property whose description is to be retrieved."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"A","optional":false,"description":"property descriptor of the given property if it exists on the object, undefined otherwise.","source":"{Object} A property descriptor of the given property if it exists on the object, undefined otherwise."}},"defineProperty":{"categoryName":"object","description":"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.","examples":[{"tag":"example","name":"defineProperty({},","optional":false,"description":"'key', {\nenumerable: false,\nconfigurable: false,\nwritable: false,\nvalue: 'static'\n}).key;\n// => 'static'","source":"defineProperty({}, 'key', {\n\tenumerable: false,\n\tconfigurable: false,\n\twritable: false,\n\tvalue: 'static'\n}).key;\n// => 'static'"}],"name":"defineProperty","params":[{"tag":"param","type":"Object","name":"obj","optional":false,"description":"- The object on which to define the property.","source":"{Object} obj - The object on which to define the property."},{"tag":"param","type":"String","name":"property","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"{String} property - The name of the property whose description is to be retrieved."},{"tag":"param","type":"Object","name":"descriptor","optional":false,"description":"- The descriptor for the property being defined or modified.","source":"{Object} descriptor - The descriptor for the property being defined or modified."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"object that was passed to the function.","source":"{Object} The object that was passed to the function."}},"getOwnPropertyNames":{"categoryName":"object","description":"Returns an array of all properties (enumerable or not) found directly upon a given object.","examples":[{"tag":"example","name":"getOwnPropertyNames({","optional":false,"description":"0: 'a', 1: 'b', 2: 'c' });\n// => ['0', '1', '2']","source":"getOwnPropertyNames({ 0: 'a', 1: 'b', 2: 'c' });\n// => ['0', '1', '2']"}],"name":"getOwnPropertyNames","params":[{"tag":"param","type":"Object","name":"obj","optional":false,"description":"- The object whose enumerable and non-enumerable own properties are to be returned.","source":"{Object} obj - The object whose enumerable and non-enumerable own properties are to be returned."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array of strings that correspond to the properties found directly upon the given object.","source":"{Object} An array of strings that correspond to the properties found directly upon the given object."}},"objectSize":{"categoryName":"object","description":"Returns the amount of keys on the object.","examples":[{"tag":"example","name":"objectSize({","optional":false,"description":"0: 'a', 1: 'b', 2: 'c' });\n// => 3","source":"objectSize({ 0: 'a', 1: 'b', 2: 'c' });\n// => 3"}],"name":"objectSize","params":[{"tag":"param","type":"Object","name":"obj","optional":false,"description":"- The target object.","source":"{Object} obj - The target object."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"amount of keys.","source":"{number} The amount of keys."}},"toArray":{"categoryName":"array","description":"Takes an array like object and creates a new Array from it.","examples":[{"tag":"example","name":"toArray([1, 2, 3]);","optional":false,"description":"// => [1, 2, 3]","source":"toArray([1, 2, 3]);\n// => [1, 2, 3]"}],"name":"toArray","params":[{"tag":"param","type":"*","name":"arrayLike","optional":false,"description":"- Array like object.","source":"{*} arrayLike - Array like object."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"*","name":"new","optional":false,"description":"array.","source":"{*} new array."}},"apply":{"categoryName":"function","description":"Calls a target function with arguments as specified.","examples":[{"tag":"example","name":"apply(function","optional":false,"description":"(a) {return a;}, undefined, [2]);\n// => 2","source":"apply(\n\tfunction(a) {\n\t\treturn a;\n\t},\n\tundefined,\n\t[2]\n);\n// => 2"}],"name":"apply","params":[{"tag":"param","type":"Function","name":"target","optional":false,"description":"- The target function to call.","source":"{Function} target - The target function to call."},{"tag":"param","type":"*","name":"thisArgument","optional":false,"description":"- Array like object.","source":"{*} thisArgument - Array like object."},{"tag":"param","type":"Array","name":"argumentsList","optional":false,"description":"- An array-like object specifying the arguments with which target should be called.","source":"{Array} argumentsList - An array-like object specifying the arguments with which target should be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"*","name":"The","optional":false,"description":"result of calling the given target function with the specified this value and arguments.","source":"{*} The result of calling the given target function with the specified this value and arguments."}},"isUndefined":{"categoryName":"utility","description":"Checks if the value is undefined.","examples":[{"tag":"example","name":"isUndefined(undefined);","optional":false,"description":"// => true","source":"isUndefined(undefined);\n// => true"}],"name":"isUndefined","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isNull":{"categoryName":"utility","description":"Checks if the value is null.","examples":[{"tag":"example","name":"isNull(null);","optional":false,"description":"// => true","source":"isNull(null);\n// => true"}],"name":"isNull","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"hasValue":{"categoryName":"utility","description":"Checks if the value is not null or undefined.","examples":[{"tag":"example","name":"hasValue(1);","optional":false,"description":"// => true","source":"hasValue(1);\n// => true"}],"name":"hasValue","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isDecimal":{"categoryName":"utility","description":"Checks if the value is a decimal.","examples":[{"tag":"example","name":"isDecimal(1.01);","optional":false,"description":"// => true","source":"isDecimal(1.01);\n// => true"}],"name":"isDecimal","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isArray":{"categoryName":"utility","description":"Checks if the value is an array.","examples":[{"tag":"example","name":"isArray([]);","optional":false,"description":"// => true","source":"isArray([]);\n// => true"}],"name":"isArray","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isString":{"categoryName":"utility","description":"Checks if the value is a string.","examples":[{"tag":"example","name":"isString('Lucy');","optional":false,"description":"// => true","source":"isString('Lucy');\n// => true"}],"name":"isString","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isNumber":{"categoryName":"utility","description":"Checks if the value is a number.","examples":[{"tag":"example","name":"isNumber(1);","optional":false,"description":"// => true","source":"isNumber(1);\n// => true"}],"name":"isNumber","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isPlainObject":{"categoryName":"utility","description":"Checks if the value is a plain object.","examples":[{"tag":"example","name":"isPlainObject({});","optional":false,"description":"// => true","source":"isPlainObject({});\n// => true"}],"name":"isPlainObject","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFunction":{"categoryName":"utility","description":"Checks if the value is a plain object.","examples":[{"tag":"example","name":"isFunction(()","optional":false,"description":"=> {});\n// => true","source":"isFunction(() => {});\n// => true"}],"name":"isFunction","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"has":{"categoryName":"utility","description":"Checks if the value includes something.","examples":[{"tag":"example","name":"has('My","optional":false,"description":"name is Acidjs', 'Acidjs');\n// => true","source":"has('My name is Acidjs', 'Acidjs');\n// => true"}],"name":"has","params":[{"tag":"param","type":"Array|String","name":"value","optional":false,"description":"- Object to be checked.","source":"{Array|String} value - Object to be checked."},{"tag":"param","type":"*","name":"search","optional":false,"description":"- Object that is being searched for.","source":"{*} search - Object that is being searched for."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"hasLength":{"categoryName":"utility","description":"Checks if the value has length greater than 0.","examples":[{"tag":"example","name":"hasLength([1]);","optional":false,"description":"// => true","source":"hasLength([1]);\n// => true"}],"name":"hasLength","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isEmpty":{"categoryName":"utility","description":"Checks if the value is empty.","examples":[{"tag":"example","name":"isEmpty([]);","optional":false,"description":"// => true","source":"isEmpty([]);\n// => true"}],"name":"isEmpty","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFileCSS":{"categoryName":"utility","description":"Checks if the string has a .css extension.","examples":[{"tag":"example","name":"isFileCSS('test.css');","optional":false,"description":"// => true","source":"isFileCSS('test.css');\n// => true"}],"name":"isFileCSS","params":[{"tag":"param","type":"string","name":"value","optional":false,"description":"- Object to be checked.","source":"{string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFileJSON":{"categoryName":"utility","description":"Checks if the string has a .json extension.","examples":[{"tag":"example","name":"isFileJSON('test.json');","optional":false,"description":"// => true","source":"isFileJSON('test.json');\n// => true"}],"name":"isFileJSON","params":[{"tag":"param","type":"string","name":"value","optional":false,"description":"- Object to be checked.","source":"{string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFileJS":{"categoryName":"utility","description":"Checks if the string has a .js extension.","examples":[{"tag":"example","name":"isFileJS('test.js');","optional":false,"description":"// => true","source":"isFileJS('test.js');\n// => true"}],"name":"isFileJS","params":[{"tag":"param","type":"string","name":"value","optional":false,"description":"- Object to be checked.","source":"{string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFileHTML":{"categoryName":"utility","description":"Checks if the string has a .html extension.","examples":[{"tag":"example","name":"isFileHTML('test.html');","optional":false,"description":"// => true","source":"isFileHTML('test.html');\n// => true"}],"name":"isFileHTML","params":[{"tag":"param","type":"string","name":"value","optional":false,"description":"- Object to be checked.","source":"{string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"hasDot":{"categoryName":"utility","description":"Checks if the string has a '.'.","examples":[{"tag":"example","name":"hasDot('test.js');","optional":false,"description":"// => true","source":"hasDot('test.js');\n// => true"}],"name":"hasDot","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"getFileExtension":{"categoryName":"utility","description":"Return the file extension.","examples":[{"tag":"example","name":"getFileExtension('test.js');","optional":false,"description":"// => 'js'","source":"getFileExtension('test.js');\n// => 'js'"}],"name":"getFileExtension","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"string","name":"Returns","optional":false,"description":"the extension.","source":"{string} Returns the extension."}},"isRegExp":{"categoryName":"utility","description":"Checks if the value is a RegExp.","examples":[{"tag":"example","name":"isRegExp(/test/);","optional":false,"description":"// => true","source":"isRegExp(/test/);\n// => true"}],"name":"isRegExp","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isArguments":{"categoryName":"utility","description":"Checks if the value is an Arguments object.","examples":[{"tag":"example","name":"isArguments([]);","optional":false,"description":"// => false","source":"isArguments([]);\n// => false"}],"name":"isArguments","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isBoolean":{"categoryName":"utility","description":"Checks if the value is a Boolean.","examples":[{"tag":"example","name":"isBoolean(true);","optional":false,"description":"// => true","source":"isBoolean(true);\n// => true"}],"name":"isBoolean","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isDate":{"categoryName":"utility","description":"Checks if the value is a Date.","examples":[{"tag":"example","name":"isDate(new","optional":false,"description":"Date());\n// => true","source":"isDate(new Date());\n// => true"}],"name":"isDate","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"eachArray":{"categoryName":"array","description":"Iterates through the given array.","examples":[{"tag":"example","name":"eachArray([1, 2, 3],","optional":false,"description":"(item) => {\nconsole.log(item);\n});\n// => [1, 2, 3]","source":"eachArray([1, 2, 3], (item) => {\n\tconsole.log(item);\n});\n// => [1, 2, 3]"}],"name":"eachArray","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\neachArray([1, 2, 3], (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});","source":"(async () => {\nconst tempList = [];\neachArray([1, 2, 3], (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"originally given array.","source":"{Object} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachArrayRight":{"categoryName":"array","description":"Iterates through the given array in reverse.","examples":[{"tag":"example","name":"eachArrayRight([1, 2, 3],","optional":false,"description":"(item) => {\nconsole.log(item);\n});\n// => [1, 2, 3]","source":"eachArrayRight([1, 2, 3], (item) => {\n\tconsole.log(item);\n});\n// => [1, 2, 3]"}],"name":"eachArrayRight","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\neachArrayRight([1, 2, 3], (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [3, 2, 1]);\n});","source":"(async () => {\nconst tempList = [];\neachArrayRight([1, 2, 3], (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [3, 2, 1]);\n});"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"originally given array.","source":"{Object} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"whileArray":{"categoryName":"array","description":"Iterates through the given array while the iteratee returns true.","examples":[{"tag":"example","name":"whileArray([true, true, false],","optional":false,"description":"(item) => {\nreturn item;\n});\n// => false","source":"whileArray([true, true, false], (item) => {\n\treturn item;\n});\n// => false"}],"name":"whileArray","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true if all values returned are true or false if one value returns false.","source":"{boolean} Returns the true if all values returned are true or false if one value returns false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"filterArray":{"categoryName":"array","description":"Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","name":"filterArray([false, true, true],","optional":false,"description":"(item) => {\nreturn item;\n});\n// => [true, true]","source":"filterArray([false, true, true], (item) => {\n\treturn item;\n});\n// => [true, true]"}],"name":"filterArray","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created object, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array with properties that passed the test.","source":"{Object} An array with properties that passed the test."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapArray":{"categoryName":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","name":"mapArray([1, 2, 3],","optional":false,"description":"(item) => {\nreturn item * 2;\n});\n// => [2, 4, 6]","source":"mapArray([1, 2, 3], (item) => {\n\treturn item * 2;\n});\n// => [2, 4, 6]"}],"name":"mapArray","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array of the same calling array's type.","source":"{Object} An array of the same calling array's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapArrayRight":{"categoryName":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.","examples":[{"tag":"example","name":"mapArrayRight([1, 2, 3],","optional":false,"description":"(item) => {\nreturn item * 2;\n});\n// => [6, 4, 2]","source":"mapArrayRight([1, 2, 3], (item) => {\n\treturn item * 2;\n});\n// => [6, 4, 2]"}],"name":"mapArrayRight","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array of the same calling array's type.","source":"{Object} An array of the same calling array's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactMapArray":{"categoryName":"array","description":"Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","name":"compactMapArray([null, 2, 3],","optional":false,"description":"(item) => {\nreturn item;\n});\n// => [2, 3]","source":"compactMapArray([null, 2, 3], (item) => {\n\treturn item;\n});\n// => [2, 3]"}],"name":"compactMapArray","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array with mapped properties that are not null or undefined.","source":"{Object} An array with mapped properties that are not null or undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapWhile":{"categoryName":"array","description":"Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","name":"mapWhile([true, true, false],","optional":false,"description":"(item) => {\nreturn item;\n});\n// => [true, true]","source":"mapWhile([true, true, false], (item) => {\n\treturn item;\n});\n// => [true, true]"}],"name":"mapWhile","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array with properties that passed the test.","source":"{Array} An array with properties that passed the test."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isMap":{"categoryName":"utility","description":"Checks if the value is a Map.","examples":[{"tag":"example","name":"isMap(new","optional":false,"description":"Map());\n// => true","source":"isMap(new Map());\n// => true"}],"name":"isMap","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isSet":{"categoryName":"utility","description":"Checks if the value is a Set.","examples":[{"tag":"example","name":"isSet(new","optional":false,"description":"Set());\n// => true","source":"isSet(new Set());\n// => true"}],"name":"isSet","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isWeakMap":{"categoryName":"utility","description":"Checks if the value is a WeakMap.","examples":[{"tag":"example","name":"isWeakMap(new","optional":false,"description":"WeakMap());\n// => true","source":"isWeakMap(new WeakMap());\n// => true"}],"name":"isWeakMap","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isArrayBuffer":{"categoryName":"utility","description":"Checks if the value is a ArrayBuffer.","examples":[{"tag":"example","name":"isArrayBuffer(new","optional":false,"description":"ArrayBuffer());\n// => true","source":"isArrayBuffer(new ArrayBuffer());\n// => true"}],"name":"isArrayBuffer","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFloat32Array":{"categoryName":"utility","description":"Checks if the value is a Float32Array.","examples":[{"tag":"example","name":"isFloat32Array(new","optional":false,"description":"Float32Array());\n// => true","source":"isFloat32Array(new Float32Array());\n// => true"}],"name":"isFloat32Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isFloat64Array":{"categoryName":"utility","description":"Checks if the value is a Float64Array.","examples":[{"tag":"example","name":"isFloat64Array(new","optional":false,"description":"Float64Array());\n// => true","source":"isFloat64Array(new Float64Array());\n// => true"}],"name":"isFloat64Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isInt8Array":{"categoryName":"utility","description":"Checks if the value is a Int8Array.","examples":[{"tag":"example","name":"isInt8Array(new","optional":false,"description":"Int8Array());\n// => true","source":"isInt8Array(new Int8Array());\n// => true"}],"name":"isInt8Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isInt16Array":{"categoryName":"utility","description":"Checks if the value is a Int16Array.","examples":[{"tag":"example","name":"isInt16Array(new","optional":false,"description":"Int16Array());\n// => true","source":"isInt16Array(new Int16Array());\n// => true"}],"name":"isInt16Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isInt32Array":{"categoryName":"utility","description":"Checks if the value is a Int32Array.","examples":[{"tag":"example","name":"isInt32Array(new","optional":false,"description":"Int32Array());\n// => true","source":"isInt32Array(new Int32Array());\n// => true"}],"name":"isInt32Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isUint8Array":{"categoryName":"utility","description":"Checks if the value is a Uint8Array.","examples":[{"tag":"example","name":"isUint8Array(new","optional":false,"description":"Uint8Array());\n// => true","source":"isUint8Array(new Uint8Array());\n// => true"}],"name":"isUint8Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isUint8ClampedArray":{"categoryName":"utility","description":"Checks if the value is a Uint8ClampedArray.","examples":[{"tag":"example","name":"isUint8ClampedArray(new","optional":false,"description":"Uint8ClampedArray());\n// => true","source":"isUint8ClampedArray(new Uint8ClampedArray());\n// => true"}],"name":"isUint8ClampedArray","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isUint16Array":{"categoryName":"utility","description":"Checks if the value is a Uint16Array.","examples":[{"tag":"example","name":"isUint16Array(new","optional":false,"description":"Uint16Array());\n// => true","source":"isUint16Array(new Uint16Array());\n// => true"}],"name":"isUint16Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"isUint32Array":{"categoryName":"utility","description":"Checks if the value is a Uint32Array.","examples":[{"tag":"example","name":"isUint32Array(new","optional":false,"description":"Uint32Array());\n// => true","source":"isUint32Array(new Uint32Array());\n// => true"}],"name":"isUint32Array","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- Object to be checked.","source":"{*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or false.","source":"{boolean} True or false."}},"asyncEach":{"categoryName":"array","description":"Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.","examples":[{"tag":"example","name":"asyncEach([async (item, index) =>{\nconsole.log(item, index);\n}, async (item) =>{\nconsole.log(item, index);\n}],","optional":false,"description":"{a:1});\n// {a:1} 0\n// {a:1} 1","source":"asyncEach(\n\t[\n\t\tasync (item, index) => {\n\t\t\tconsole.log(item, index);\n\t\t},\n\t\tasync (item) => {\n\t\t\tconsole.log(item, index);\n\t\t}\n\t],\n\t{ a: 1 }\n);\n// {a:1} 0\n// {a:1} 1\n"}],"name":"asyncEach","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array of async functions that will be looped through.\nFunctions are given the supplied object, index, the calling array, and the array length.","source":"{Array} callingArray - Array of async functions that will be looped through.\nFunctions are given the supplied object, index, the calling array, and the array length."},{"tag":"param","type":"*","name":"object","optional":false,"description":"- The first argument given to each function.","source":"{*} object - The first argument given to each function."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"Array","optional":false,"source":"Array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\nawait asyncEach([async (item, index) => {\ntempList.push(index);\n}, async (item, index) => {\ntempList.push(index);\n}], {a:1});\nreturn assert(tempList, [0, 1]);\n});","source":"(async () => {\nconst tempList = [];\nawait asyncEach([async (item, index) => {\ntempList.push(index);\n}, async (item, index) => {\ntempList.push(index);\n}], {a:1});\nreturn assert(tempList, [0, 1]);\n});"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"originally given array.","source":"{Object} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"ensureArray":{"categoryName":"array","description":"Ensures the object is an array. If not wraps in array.","examples":[{"tag":"example","name":"ensureArray('Hello');","optional":false,"description":"// => ['Hello']","source":"ensureArray('Hello');\n// => ['Hello']"},{"tag":"example","name":"ensureArray({a:1,","optional":false,"description":"b:2})\n// => [{a:1, b:2}]","source":"ensureArray({ a: 1, b: 2 });\n// => [{a:1, b:2}]"}],"name":"ensureArray","params":[{"tag":"param","type":"*","name":"object","optional":false,"description":"- Data to be checked.","source":"{*} object - Data to be checked."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns an array.","source":"{Array} - Returns an array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flatten":{"categoryName":"array","description":"Flattens an array up to the provided level.","examples":[{"tag":"example","name":"flatten([1, [2, [3, [4]], 5]]);","optional":false,"description":"// => [1, 2, [3, [4]], 5]","source":"flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]"}],"name":"flatten","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to flatten.","source":"{Array} array - Array to flatten."},{"tag":"param","type":"number","name":"level","optional":true,"default":"1","description":"- Number which determines how deep the array nest can be.","source":"{number} [level = 1] - Number which determines how deep the array nest can be."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns an array.","source":"{Array} - Returns an array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flattenDeep":{"categoryName":"array","description":"Flattens an array to a single level.","examples":[{"tag":"example","name":"flattenDeep([1, [2, [3, [4]], 5]]);","optional":false,"description":"// => [1, 2, 3, 4, 5]","source":"flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]"}],"name":"flattenDeep","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to flatten.","source":"{Array} array - Array to flatten."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns a completely flattened array.","source":"{Array} - Returns a completely flattened array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"remove":{"categoryName":"array","description":"Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","name":"remove([1, 2, 3, 3, 4, 3, 5],","optional":false,"description":"1);\n// => [2, 3, 3, 4, 3, 5]","source":"remove([1, 2, 3, 3, 4, 3, 5], 1);\n// => [2, 3, 3, 4, 3, 5]"},{"tag":"example","name":"remove([3, 3, 4, 5],","optional":false,"description":"3, 4);\n// => [5]","source":"remove([3, 3, 4, 5], 3, 4);\n// => [5]"}],"name":"remove","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be mutated.","source":"{Array} array - Array to be mutated."},{"tag":"param","type":"string|Array","name":"removeThese","optional":false,"description":"- Items to remove from the array.","source":"{string|Array} removeThese - Items to remove from the array."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"array this method was called on.","source":"{Array} The array this method was called on."}},"removeBy":{"categoryName":"array","description":"Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","name":"removeBy([1, 2, 3, 3, 4, 3, 5],","optional":false,"description":"(item) => { return Boolean(item % 2);});\n// => [2, 4]","source":"removeBy([1, 2, 3, 3, 4, 3, 5], (item) => {\n\treturn Boolean(item % 2);\n});\n// => [2, 4]"}],"name":"removeBy","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be mutated.","source":"{Array} array - Array to be mutated."},{"tag":"param","type":"Function","name":"method","optional":false,"description":"- Function used to check object. Return true to remove the value.","source":"{Function} method - Function used to check object. Return true to remove the value."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"array this method was called on.","source":"{Array} The array this method was called on."}},"chunk":{"categoryName":"array","description":"Chunks an array according to a user defined number.","examples":[{"tag":"example","name":"chunk([1,2,3],","optional":false,"description":"1);\n// => [[1],[2],[3]]","source":"chunk([1, 2, 3], 1);\n// => [[1],[2],[3]]"}],"name":"chunk","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be chunked.","source":"{Array} array - Array to be chunked."},{"tag":"param","type":"number","name":"size","optional":false,"description":"- Number which determines the size of each chunk.","source":"{number} size - Number which determines the size of each chunk."}],"category":{"tag":"category","name":"Array","optional":false,"source":"Array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"A chunked version of the source array.","source":"{Array} - A chunked version of the source array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"rest":{"categoryName":"array","description":"Extracts all items in array except the first and last item.","examples":[{"tag":"example","name":"rest([1, 2, 3, 4, 5]);","optional":false,"description":"// => [2, 3, 4, 5]","source":"rest([1, 2, 3, 4, 5]);\n// => [2, 3, 4, 5]"}],"name":"rest","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be sliced.","source":"{Array} array - Array to be sliced."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns the aggregated array.","source":"{Array} - Returns the aggregated array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"clear":{"categoryName":"array","description":"Clears the values out of an array.","examples":[{"tag":"example","name":"clear([1,'B', 'Cat']);","optional":false,"description":"// => []","source":"clear([1, 'B', 'Cat']);\n// => []"}],"name":"clear","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Takes an array to be emptied.","source":"{Array} array - Takes an array to be emptied."}],"category":{"tag":"category","name":"Array","optional":false,"source":"Array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"originally given array.","source":"{Array} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"right":{"categoryName":"array","description":"Get the item at the supplied index starting at the end of the array.","examples":[{"tag":"example","name":"right([1, 2, 3, 4, 5]","optional":false,"description":", 1);\n// => 4","source":"right([1, 2, 3, 4, 5], 1);\n// => 4"}],"name":"right","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be sliced.","source":"{Array} array - Array to be sliced."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"*","name":"-","optional":false,"description":"Returns the object at the evaluated position.","source":"{*} - Returns the object at the evaluated position."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"cloneArray":{"categoryName":"array","description":"Clears the values out of an array.","examples":[{"tag":"example","name":"cloneArray([1,'B', 'Cat']);","optional":false,"description":"// => [1, 'B', 'Cat']","source":"cloneArray([1, 'B', 'Cat']);\n// => [1, 'B', 'Cat']"}],"name":"cloneArray","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Takes an array to be cloned.","source":"{Array} array - Takes an array to be cloned."}],"category":{"tag":"category","name":"Array","optional":false,"source":"Array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"originally given array.","source":"{Array} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"add":{"categoryName":"number","description":"Adds two numbers.","examples":[{"tag":"example","name":"add(1,","optional":false,"description":"1);\n// => 2","source":"add(1, 1);\n// => 2"}],"name":"add","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."},{"tag":"param","type":"number","name":"value","optional":false,"description":"- Second number.","source":"{number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns the sum of the arguments.","source":"{number} - Returns the sum of the arguments."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"minus":{"categoryName":"number","description":"Subtracts two numbers.","examples":[{"tag":"example","name":"minus(1,","optional":false,"description":"1);\n// => 0","source":"minus(1, 1);\n// => 0"}],"name":"minus","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."},{"tag":"param","type":"number","name":"value","optional":false,"description":"- Second number.","source":"{number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns the difference of the arguments.","source":"{number} - Returns the difference of the arguments."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"divide":{"categoryName":"number","description":"Divides two numbers.","examples":[{"tag":"example","name":"divide(10,","optional":false,"description":"5);\n// => 2","source":"divide(10, 5);\n// => 2"}],"name":"divide","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."},{"tag":"param","type":"number","name":"value","optional":false,"description":"- Second number.","source":"{number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns the quotient of the arguments.","source":"{number} - Returns the quotient of the arguments."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"multiply":{"categoryName":"number","description":"Multiplies two numbers.","examples":[{"tag":"example","name":"multiply(10,","optional":false,"description":"5);\n// => 50","source":"multiply(10, 5);\n// => 50"}],"name":"multiply","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."},{"tag":"param","type":"number","name":"value","optional":false,"description":"- Second number.","source":"{number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns the product of the arguments.","source":"{number} - Returns the product of the arguments."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"remainder":{"categoryName":"number","description":"Extracts the remainder between two numbers.","examples":[{"tag":"example","name":"remainder(10,","optional":false,"description":"6);\n// => 4","source":"remainder(10, 6);\n// => 4"}],"name":"remainder","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."},{"tag":"param","type":"number","name":"value","optional":false,"description":"- Second number.","source":"{number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns the remainder of the arguments.","source":"{number} - Returns the remainder of the arguments."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"increment":{"categoryName":"number","description":"Increments a number.","examples":[{"tag":"example","name":"increment(10);","optional":false,"description":"// => 11","source":"increment(10);\n// => 11"}],"name":"increment","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns an incremented version of the number.","source":"{number} - Returns an incremented version of the number."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"deduct":{"categoryName":"number","description":"Decrements a number.","examples":[{"tag":"example","name":"deduct(10);","optional":false,"description":"// => 9","source":"deduct(10);\n// => 9"}],"name":"deduct","params":[{"tag":"param","type":"number","name":"number","optional":false,"description":"- First number.","source":"{number} number - First number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns a decremented version of the number.","source":"{number} - Returns a decremented version of the number."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"randomArbitrary":{"categoryName":"number","description":"Produces a random number between min (included) and max (excluded).","examples":[{"tag":"example","name":"randomArbitrary(10);","optional":false,"description":"// => 9.1","source":"randomArbitrary(10);\n// => 9.1"}],"name":"randomArbitrary","params":[{"tag":"param","type":"number","name":"max","optional":false,"description":"- Establishes highest possible value for the random number.","source":"{number} max - Establishes highest possible value for the random number."},{"tag":"param","type":"number","name":"min","optional":true,"default":"0","description":"- Establishes lowest possible value for the random number.","source":"{number} [min = 0] - Establishes lowest possible value for the random number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nreturn assert(isNumber(randomArbitrary(10)), true);\n});","source":"(async () => {\nreturn assert(isNumber(randomArbitrary(10)), true);\n});"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns random integer between the max and min range.","source":"{number} - Returns random integer between the max and min range."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"randomInt":{"categoryName":"number","description":"Produces a random integer between min (included) and max (excluded).","examples":[{"tag":"example","name":"randomInt(10);","optional":false,"description":"// => 9","source":"randomInt(10);\n// => 9"}],"name":"randomInt","params":[{"tag":"param","type":"number","name":"max","optional":false,"description":"- Establishes highest possible value for the random number.","source":"{number} max - Establishes highest possible value for the random number."},{"tag":"param","type":"number","name":"min","optional":true,"default":"0","description":"- Establishes lowest possible value for the random number.","source":"{number} [min = 0] - Establishes lowest possible value for the random number."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nreturn assert(isNumber(randomInt(10)), true);\n});","source":"(async () => {\nreturn assert(isNumber(randomInt(10)), true);\n});"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns random integer between the max and min range.","source":"{number} - Returns random integer between the max and min range."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"shuffle":{"categoryName":"array","description":"Shuffle an array and return a new array.","examples":[{"tag":"example","name":"shuffle([1, 2, 3, 4]);","optional":false,"description":"// => [3, 4, 2, 1]","source":"shuffle([1, 2, 3, 4]);\n// => [3, 4, 2, 1]"}],"name":"shuffle","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be shuffled.","source":"{Array} array - Array to be shuffled."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempResult = shuffle([1, 2]);\nreturn assert(tempResult.includes(1) && tempResult.includes(2), true);\n});","source":"(async () => {\nconst tempResult = shuffle([1, 2]);\nreturn assert(tempResult.includes(1) && tempResult.includes(2), true);\n});"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array with the shuffled results.","source":"{Array} An array with the shuffled results."}},"sample":{"categoryName":"array","description":"Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.","examples":[{"tag":"example","name":"sample([1, 2, 3, 4]","optional":false,"description":", 2);\n// => [1, 3]","source":"sample([1, 2, 3, 4], 2);\n// => [1, 3]"}],"name":"sample","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to pull sample(s).","source":"{Array} array - Array to pull sample(s)."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempResult = sample([1, 2] , 2);\nreturn assert(tempResult.includes(1) && tempResult.includes(2), true);\n});","source":"(async () => {\nconst tempResult = sample([1, 2] , 2);\nreturn assert(tempResult.includes(1) && tempResult.includes(2), true);\n});"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array of randomly pulled samples.","source":"{Array} An array of randomly pulled samples."}},"compact":{"categoryName":"array","description":"Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.","examples":[{"tag":"example","name":"compact([1,'B', 'Cat', false, null, 0 , '', undefined, NaN]);","optional":false,"description":"// => [1, 'B', 'Cat']","source":"compact([1, 'B', 'Cat', false, null, 0, '', undefined, NaN]);\n// => [1, 'B', 'Cat']"}],"name":"compact","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be compacted.","source":"{Array} array - Array to be compacted."}],"category":{"tag":"category","name":"Array","optional":false,"source":"Array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"new array of filtered values.","source":"{Array} The new array of filtered values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"initial":{"categoryName":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","name":"initial([1, 2, 3, 4, 5]);","optional":false,"description":"// => [1, 2, 3, 4]","source":"initial([1, 2, 3, 4, 5]);\n// => [1, 2, 3, 4]"}],"name":"initial","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to have items extracted from.","source":"{Array} array - Array to have items extracted from."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns a completely flattened array.","source":"{Array} - Returns a completely flattened array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"smallest":{"categoryName":"array","description":"Plucks the smallest value from an array.","examples":[{"tag":"example","name":"smallest([1,2,3]);","optional":false,"description":"// => 1","source":"smallest([1, 2, 3]);\n// => 1"}],"name":"smallest","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array from which smallest number is taken.","source":"{Array} array - Array from which smallest number is taken."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"smallest number.","source":"{number} The smallest number."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"intersect":{"categoryName":"array","description":"Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory))\nof the array and the input array(s).","examples":[{"tag":"example","name":"intersect([1, 2, 3],","optional":false,"description":"[2, 3, 4]);\n// => [2, 3]","source":"intersect([1, 2, 3], [2, 3, 4]);\n// => [2, 3]"},{"tag":"example","name":"intersect([1, 2, 3],","optional":false,"description":"[101, 2, 50, 1], [2, 1]);\n// => [1, 2]","source":"intersect([1, 2, 3], [101, 2, 50, 1], [2, 1]);\n// => [1, 2]"}],"name":"intersect","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to compare other arrays to.","source":"{Array} array - Array to compare other arrays to."},{"tag":"param","type":"...Array","name":"arrays","optional":false,"description":"- A variable number of arrays.","source":"{...Array} arrays - A variable number of arrays."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"new array of unique values shared by all of the arrays.","source":"{Array} The new array of unique values shared by all of the arrays."}},"difference":{"categoryName":"array","description":"Checks for differences between arrays, then creates an array based on those differences.","examples":[{"tag":"example","name":"difference([1, 2, 3],","optional":false,"description":"[1, 2]);\n// => [3]","source":"difference([1, 2, 3], [1, 2]);\n// => [3]"}],"name":"difference","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Source array.","source":"{Array} array - Source array."},{"tag":"param","type":"Array","name":"compare","optional":false,"description":"- Array source array is compared against.","source":"{Array} compare - Array source array is compared against."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array which contains the differences between the source and compare array.","source":"{Array} An array which contains the differences between the source and compare array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"drop":{"categoryName":"array","description":"Removes all items from an array after a specified index.","examples":[{"tag":"example","name":"drop([1, 2, 3],","optional":false,"description":"1);\n// => [2, 3]","source":"drop([1, 2, 3], 1);\n// => [2, 3]"}],"name":"drop","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Source array.","source":"{Array} array - Source array."},{"tag":"param","type":"number","name":"amount","optional":false,"description":"- Amount of items to drop from the array.","source":"{number} amount - Amount of items to drop from the array."},{"tag":"param","type":"number","name":"upTo","optional":true,"default":"array.length","description":"- Index to stop at.","source":"{number} [upTo = array.length] - Index to stop at."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array with all values removed after a user defined index.","source":"{Array} An array with all values removed after a user defined index."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"dropRight":{"categoryName":"array","description":"Removes all items from an array before a specified index.","examples":[{"tag":"example","name":"dropRight([1, 2, 3],","optional":false,"description":"1);\n// => [1, 2]","source":"dropRight([1, 2, 3], 1);\n// => [1, 2]"}],"name":"dropRight","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Source array.","source":"{Array} array - Source array."},{"tag":"param","type":"number","name":"amount","optional":false,"description":"- Amount of items to drop from the array.","source":"{number} amount - Amount of items to drop from the array."},{"tag":"param","type":"number","name":"upTo","optional":true,"default":"array.length","description":"- Index to stop at.","source":"{number} [upTo = array.length] - Index to stop at."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array with all values removed before a user defined index.","source":"{Array} An array with all values removed before a user defined index."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isMatchArray":{"categoryName":"array","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","name":"isMatchArray([1, 2, 3],","optional":false,"description":"[1, 2, 3]);\n// => true","source":"isMatchArray([1, 2, 3], [1, 2, 3]);\n// => true"}],"name":"isMatchArray","params":[{"tag":"param","type":"Array","name":"source","optional":false,"description":"- Source object.","source":"{Array} source - Source object."},{"tag":"param","type":"Array","name":"compareArray","optional":false,"description":"- Object to compare to source.","source":"{Array} compareArray - Object to compare to source."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true or false.","source":"{boolean} Returns the true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sortedIndex":{"categoryName":"array","description":"Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.","examples":[{"tag":"example","name":"sortedIndex([30, 50],","optional":false,"description":"40);\n// => 1","source":"sortedIndex([30, 50], 40);\n// => 1"}],"name":"sortedIndex","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be sorted.","source":"{Array} array - Array to be sorted."},{"tag":"param","type":"number","name":"insertThis","optional":false,"description":"- Number to be inserted.","source":"{number} insertThis - Number to be inserted."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"index at which to insert.","source":"{number} The index at which to insert."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"largest":{"categoryName":"array","description":"Plucks the largest value from an array.","examples":[{"tag":"example","name":"largest([1,2,3]);","optional":false,"description":"// => 3","source":"largest([1, 2, 3]);\n// => 3"}],"name":"largest","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array from which largest number is taken.","source":"{Array} array - Array from which largest number is taken."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"largest number.","source":"{number} The largest number."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sum":{"categoryName":"array","description":"Reduces the values in an array into a single number.","examples":[{"tag":"example","name":"sum([1, 2, 3, 4]);","optional":false,"description":"// => 10","source":"sum([1, 2, 3, 4]);\n// => 10"}],"name":"sum","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be reduced.","source":"{Array} array - Array to be reduced."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns a single value.","source":"{number} - Returns a single value."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachAsync":{"categoryName":"array","description":"Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","name":"eachAsync([3,4],","optional":false,"description":"async (item, index) =>{\nconsole.log(item, index);\n});\n// 3 0\n// 4 1","source":"eachAsync([3, 4], async (item, index) => {\n\tconsole.log(item, index);\n});\n// 3 0\n// 4 1\n"}],"name":"eachAsync","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\nawait eachAsync([1, 2, 3], async (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});","source":"(async () => {\nconst tempList = [];\nawait eachAsync([1, 2, 3], async (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"originally given array.","source":"{Object} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachAsyncRight":{"categoryName":"array","description":"Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","name":"eachAsyncRight([3,4],","optional":false,"description":"async (item, index) =>{\nconsole.log(item, index);\n});\n// 4 0\n// 3 1","source":"eachAsyncRight([3, 4], async (item, index) => {\n\tconsole.log(item, index);\n});\n// 4 0\n// 3 1\n"}],"name":"eachAsyncRight","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\nawait eachAsyncRight([1, 2, 3], async (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [3, 2, 1]);\n});","source":"(async () => {\nconst tempList = [];\nawait eachAsyncRight([1, 2, 3], async (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [3, 2, 1]);\n});"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"originally given array.","source":"{Object} The originally given array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"last":{"categoryName":"array","description":"Extracts item(s) from an array starting from the last item in the array.","examples":[{"tag":"example","name":"last([1, 2, 3, 4, 5]","optional":false,"description":", 2);\n// => [4, 5]","source":"last([1, 2, 3, 4, 5], 2);\n// => [4, 5]"},{"tag":"example","name":"last([1, 2, 3, 4, 5]);","optional":false,"description":"// => 5","source":"last([1, 2, 3, 4, 5]);\n// => 5"}],"name":"last","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to have items extracted from.","source":"{Array} array - Array to have items extracted from."},{"tag":"param","type":"number","name":"indexFrom","optional":true,"default":"0","description":"- Value which determines how many items are extracted from the array.","source":"{number} [indexFrom = 0] - Value which determines how many items are extracted from the array."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"Items","optional":false,"description":"from the array.","source":"{Array} Items from the array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"take":{"categoryName":"array","description":"Returns a shallow copy of the array up to an amount.","examples":[{"tag":"example","name":"take([1,2,3],","optional":false,"description":"2);\n// => [1, 2]","source":"take([1, 2, 3], 2);\n// => [1, 2]"}],"name":"take","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- The array to be evaluated.","source":"{Array} array - The array to be evaluated."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"aggregated array.","source":"{Array} The aggregated array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"takeRight":{"categoryName":"array","description":"Returns a shallow copy of the array up to an amount starting from the right.","examples":[{"tag":"example","name":"takeRight([1,2,3],","optional":false,"description":"2);\n// => [2, 3]","source":"takeRight([1, 2, 3], 2);\n// => [2, 3]"}],"name":"takeRight","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- The array to be evaluated.","source":"{Array} array - The array to be evaluated."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"aggregated array.","source":"{Array} The aggregated array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapAsync":{"categoryName":"array","description":"Asynchronously iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","name":"mapAsync([1, 2, 3],","optional":false,"description":"(item) => {\nreturn item * 2;\n});\n// => [2, 4, 6]","source":"mapAsync([1, 2, 3], (item) => {\n\treturn item * 2;\n});\n// => [2, 4, 6]"}],"name":"mapAsync","params":[{"tag":"param","type":"Array","name":"callingArray","optional":false,"description":"- Array that will be looped through.","source":"{Array} callingArray - Array that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"An","optional":false,"description":"array of the same calling array's type.","source":"{Array} An array of the same calling array's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"unique":{"categoryName":"array","description":"Filters the array down to unique elements.","examples":[{"tag":"example","name":"unique([1, 2, 2, 4]);","optional":false,"description":"// => [1, 2, 4]","source":"unique([1, 2, 2, 4]);\n// => [1, 2, 4]"}],"name":"unique","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- The array to be filtered.","source":"{Array} array - The array to be filtered."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"filtered array.","source":"{Array} The filtered array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"union":{"categoryName":"array","description":"Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.","examples":[{"tag":"example","name":"union([1,2,4],","optional":false,"description":"[1,2,3]);\n// => [1, 2, 4, 3]","source":"union([1, 2, 4], [1, 2, 3]);\n// => [1, 2, 4, 3]"}],"name":"union","params":[{"tag":"param","type":"...Array","name":"arrays","optional":false,"description":"- The arrays to be evaluated.","source":"{...Array} arrays - The arrays to be evaluated."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"aggregated array.","source":"{Array} The aggregated array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactMapAsync":{"categoryName":"array","description":"Asynchronously iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","name":"compactMapAsync([1, 2, 3, null],","optional":false,"description":"async (item) => {return item;});\n// => [1, 2, 3]","source":"compactMapAsync([1, 2, 3, null], async (item) => {\n\treturn item;\n});\n// => [1, 2, 3]"}],"name":"compactMapAsync","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be compacted.","source":"{Array} array - Array to be compacted."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Iteratee to be performed on array.","source":"{Function} iteratee - Iteratee to be performed on array."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"Array","optional":false,"description":"values after being put through an iterator.","source":"{Array} Array values after being put through an iterator."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"numSort":{"categoryName":"array","description":"Sorts an array in place using a numerical comparison algorithm from lowest to highest.","examples":[{"tag":"example","name":"numSort([10, 0, 2, 1]);","optional":false,"description":"// => [0, 1, 2, 10]","source":"numSort([10, 0, 2, 1]);\n// => [0, 1, 2, 10]"}],"name":"numSort","params":[{"tag":"param","type":"Array","name":"numberList","optional":false,"description":"- Array of numbers.","source":"{Array} numberList - Array of numbers."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"array this method was called on.","source":"{Array} The array this method was called on."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"arrayToObject":{"categoryName":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","name":"arrayToObject([1, 2, 3],","optional":false,"description":"['i', 'love', 'lucy']);\n// => {i:1, love:2, lucy: 3}","source":"arrayToObject([1, 2, 3], ['i', 'love', 'lucy']);\n// => {i:1, love:2, lucy: 3}"}],"name":"arrayToObject","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to have items extracted from.","source":"{Array} array - Array to have items extracted from."},{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- Array to have items extracted from.","source":"{Array} properties - Array to have items extracted from."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns a completely flattened array.","source":"{Array} - Returns a completely flattened array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"without":{"categoryName":"array","description":"Returns a copy of the array with all instances of the values removed.","examples":[{"tag":"example","name":"without([1, 2, 2, 4],","optional":false,"description":"[4]);\n// => [1, 2, 2]","source":"without([1, 2, 2, 4], [4]);\n// => [1, 2, 2]"}],"name":"without","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- The array to be filtered.","source":"{Array} array - The array to be filtered."},{"tag":"param","type":"Array","name":"removeThese","optional":false,"description":"- Items to be removed.","source":"{Array} removeThese - Items to be removed."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"filtered array.","source":"{Array} The filtered array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"partition":{"categoryName":"array","description":"Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.","examples":[{"tag":"example","name":"partition([\n{user: 'barney', age: 36, active: false},\n{user: 'fred', age: 40, active: true},\n{user: 'pebbles', age: 1,  active: false}\n],","optional":false,"description":"(item) => { return item.active; });\n// => [\n[{\"user\":\"fred\",\"age\":40,\"active\":true}],\n[{\"user\":\"barney\",\"age\":36,\"active\":false},\n{\"user\":\"pebbles\",\"age\":1,\"active\":false}]]","source":"partition(\n\t[\n\t\t{ user: 'barney', age: 36, active: false },\n\t\t{ user: 'fred', age: 40, active: true },\n\t\t{ user: 'pebbles', age: 1, active: false }\n\t],\n\t(item) => {\n\t\treturn item.active;\n\t}\n);\n// => [[{\"user\":\"fred\",\"age\":40,\"active\":true}],[{\"user\":\"barney\",\"age\":36,\"active\":false},{\"user\":\"pebbles\",\"age\":1,\"active\":false}]]"}],"name":"partition","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Takes an array to split.","source":"{Array} array - Takes an array to split."},{"tag":"param","type":"Function","name":"funct","optional":false,"description":"- Function run on each item in array.","source":"{Function} funct - Function run on each item in array."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"One array split into two arrays.","source":"{Array} - One array split into two arrays."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"xor":{"categoryName":"array","description":"Creates an array that is the symmetric difference of the provided arrays.","examples":[{"tag":"example","name":"xor([2, 1],","optional":false,"description":"[2, 3]);\n// => [1, 3]","source":"xor([2, 1], [2, 3]);\n// => [1, 3]"}],"name":"xor","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- The array to be filtered.","source":"{Array} array - The array to be filtered."},{"tag":"param","type":"Array","name":"removeThese","optional":false,"description":"- Items to be removed.","source":"{Array} removeThese - Items to be removed."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"filtered array.","source":"{Array} The filtered array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"zip":{"categoryName":"array","description":"Merges together the values of each of the arrays with the values at the corresponding position.","examples":[{"tag":"example","name":"zip(['a', 'b'],","optional":false,"description":"[1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]","source":"zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]"}],"name":"zip","params":[{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- The arrays to process.","source":"{Array} properties - The arrays to process."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns the new array of regrouped elements.","source":"{Array} - Returns the new array of regrouped elements."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"unZip":{"categoryName":"array","description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.","examples":[{"tag":"example","name":"unZip([['a', 1, true], ['b', 2, false]]);","optional":false,"description":"// => [['a', 'b'], [1, 2], [true, false]]","source":"unZip([\n\t['a', 1, true],\n\t['b', 2, false]\n]);\n// => [['a', 'b'], [1, 2], [true, false]]"}],"name":"unZip","params":[{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- The array of grouped elements to process.","source":"{Array} properties - The array of grouped elements to process."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns the new array of regrouped elements.","source":"{Array} - Returns the new array of regrouped elements."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"first":{"categoryName":"array","description":"Takes the first or multiple items from an array.","examples":[{"tag":"example","name":"first([1, 2, 3]);","optional":false,"description":"// => 1","source":"first([1, 2, 3]);\n// => 1"},{"tag":"example","name":"first([1, 2, 3],","optional":false,"description":"2);\n// => [1, 2]","source":"first([1, 2, 3], 2);\n// => [1, 2]"}],"name":"first","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to extract from.","source":"{Array} array - Array to extract from."},{"tag":"param","type":"number","name":"upTo","optional":false,"description":"- Number which determines how many items after the first item are extracted from the array.","source":"{number} upTo - Number which determines how many items after the first item are extracted from the array."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns an array.","source":"{Array} - Returns an array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"rNumSort":{"categoryName":"array","description":"Sorts an array in place using a reverse numerical comparison algorithm from highest to lowest.","examples":[{"tag":"example","name":"rNumSort([10, 0, 2, 1]);","optional":false,"description":"// => [10, 2, 1, 0]","source":"rNumSort([10, 0, 2, 1]);\n// => [10, 2, 1, 0]"}],"name":"rNumSort","params":[{"tag":"param","type":"Array","name":"numberList","optional":false,"description":"- Array of numbers.","source":"{Array} numberList - Array of numbers."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"array this method was called on.","source":"{Array} The array this method was called on."}},"times":{"categoryName":"array","description":"Iterates based on a start index and an end index. The loop ends when the start index is equal to the end index.","examples":[{"tag":"example","name":"times(0,","optional":false,"description":"3, (item) => {\nconsole.log(item);\n});\n//Will log\n// 0\n// 1\n// 2\n// => undefined","source":"times(0, 3, (item) => {\n\tconsole.log(item);\n});\n//Will log\n// 0\n// 1\n// 2\n// => undefined"}],"name":"times","params":[{"tag":"param","type":"number","name":"startIndex","optional":false,"description":"- The number to start loop from.","source":"{number} startIndex - The number to start loop from."},{"tag":"param","type":"number","name":"endIndex","optional":false,"description":"- The number to stop at the loop.","source":"{number} endIndex - The number to stop at the loop."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed position, start, and end.","source":"{Function} iteratee - Transformation function which is passed position, start, and end."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\ntimes(0, 3, (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [0, 1, 2]);\n});","source":"(async () => {\nconst tempList = [];\ntimes(0, 3, (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [0, 1, 2]);\n});"},"returns":{"tag":"returns","type":"undefined","name":"Nothing.","optional":false,"source":"{undefined} Nothing."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"timesMap":{"categoryName":"array","description":"Iterates based on a start index and end index. Creates an array with the results of the iteratee on every element in the calling array. The loop ends when the start index is equal to the end index.","examples":[{"tag":"example","name":"timesMap(0,","optional":false,"description":"3, (item) => {\nreturn item;\n});\n// => [0, 1, 2]","source":"timesMap(0, 3, (item) => {\n\treturn item;\n});\n// => [0, 1, 2]"}],"name":"timesMap","params":[{"tag":"param","type":"number","name":"startIndex","optional":false,"description":"- The number to start loop from.","source":"{number} startIndex - The number to start loop from."},{"tag":"param","type":"number","name":"endIndex","optional":false,"description":"- The number to stop at the loop.","source":"{number} endIndex - The number to stop at the loop."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed position, start, and end.","source":"{Function} iteratee - Transformation function which is passed position, start, and end."},{"tag":"param","type":"Array","name":"results","optional":true,"default":"[]","description":"- Array that will be used to assign results.","source":"{Array} [results = []] - Array that will be used to assign results."}],"category":{"tag":"category","name":"array","optional":false,"source":"array"},"returns":{"tag":"returns","type":"Object","name":"An","optional":false,"description":"array with iteratee's returned values.","source":"{Object} An array with iteratee's returned values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachObject":{"categoryName":"object","description":"Iterates through the given object.","examples":[{"tag":"example","name":"eachObject({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}","source":"eachObject({ a: 1, b: 2, c: 3 }, (item) => {\n\tconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}"}],"name":"eachObject","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = {};\neachObject({a: 1, b: 2, c: 3}, (item, key) => {\ntempList[key] = item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});","source":"(async () => {\nconst tempList = {};\neachObject({a: 1, b: 2, c: 3}, (item, key) => {\ntempList[key] = item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});"},"returns":{"tag":"returns","type":"Object|Function","name":"Returns","optional":false,"description":"the calling object.","source":"{Object|Function} Returns the calling object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"whileObject":{"categoryName":"object","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","name":"whileObject({a:","optional":false,"description":"false, b: true, c: true}, (item) => {\nreturn item;\n});\n// => false","source":"whileObject({ a: false, b: true, c: true }, (item) => {\n\treturn item;\n});\n// => false"},{"tag":"example","name":"whileObject({a:","optional":false,"description":"true, b: true, c: true}, (item) => {\nreturn item;\n});\n// => true","source":"whileObject({ a: true, b: true, c: true }, (item) => {\n\treturn item;\n});\n// => true"}],"name":"whileObject","params":[{"tag":"param","type":"Object","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true if all values returned are true or false if one value returns false.","source":"{boolean} Returns the true if all values returned are true or false if one value returns false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"filterObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","name":"filterObject({a:","optional":false,"description":"false, b: true, c: true}, (item) => {\nreturn item;\n});\n// => {b: true, c: true}","source":"filterObject({ a: false, b: true, c: true }, (item) => {\n\treturn item;\n});\n// => {b: true, c: true}"}],"name":"filterObject","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object|Function","name":"An","optional":false,"description":"object with properties that passed the test.","source":"{Object|Function} An object with properties that passed the test."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"mapObject({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nreturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}","source":"mapObject({ a: 1, b: 2, c: 3 }, (item) => {\n\treturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}"}],"name":"mapObject","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object|Function","name":"An","optional":false,"description":"object of the same calling object's type.","source":"{Object|Function} An object of the same calling object's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactMapObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"compactMapObject({a:","optional":false,"description":"undefined, b: 2, c: 3}, (item) => {\nreturn item;\n});\n// => {b: 2, c: 3}","source":"compactMapObject({ a: undefined, b: 2, c: 3 }, (item) => {\n\treturn item;\n});\n// => {b: 2, c: 3}"}],"name":"compactMapObject","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object|Function","name":"An","optional":false,"description":"object with mapped properties that are not null or undefined.","source":"{Object|Function} An object with mapped properties that are not null or undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"zipObject":{"categoryName":"object","description":"Creates an object from two arrays, one of property identifiers and one of corresponding values.","examples":[{"tag":"example","name":"zipObject(['a', 'b'],","optional":false,"description":"[1, 2]);\n// => { 'a': 1, 'b': 2 }","source":"zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }"}],"name":"zipObject","params":[{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- The property identifiers.","source":"{Array} properties - The property identifiers."},{"tag":"param","type":"Array","name":"values","optional":false,"description":"- The property values.","source":"{Array} values - The property values."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"Returns the new object.","source":"{Object} - Returns the new object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"unZipObject":{"description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.","examples":[{"tag":"example","name":"unZipObject({","optional":false,"description":"'a': 1, 'b': 2 });\n// => [['a', 'b'], [1, 2]]","source":"unZipObject({ a: 1, b: 2 });\n// => [['a', 'b'], [1, 2]]"}],"name":"unZipObject","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- The object to process.","source":"{Object} object - The object to process."}],"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns two arrays one of keys and the other of values inside a single array.","source":"{Array} - Returns two arrays one of keys and the other of values inside a single array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"promise":{"categoryName":"utility","description":"A wrapper around the promise constructor.","examples":[{"tag":"example","name":"promise((a)","optional":false,"description":"=> {});\n// => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}","source":"promise((a) => {});\n// => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}"}],"name":"promise","params":[{"tag":"param","type":"Function","name":"callback","optional":false,"description":"- Function to be called back.","source":"{Function} callback - Function to be called back."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst result = await promise((accept) => {\naccept(true);\n});\nreturn assert(result, true);\n});","source":"(async () => {\nconst result = await promise((accept) => {\naccept(true);\n});\nreturn assert(result, true);\n});"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"A constructor with a callback function.","source":"{Object} - A constructor with a callback function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"insertInRange":{"categoryName":"string","description":"Inserts text into a string at a given position.","examples":[{"tag":"example","name":"insertInRange('A","optional":false,"description":"from Lucy.', 1, ' tab');\n// => 'A tab from Lucy.'","source":"insertInRange('A from Lucy.', 1, ' tab');\n// => 'A tab from Lucy.'"}],"name":"insertInRange","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to insert the text into.","source":"{string} string - String to insert the text into."},{"tag":"param","type":"number","name":"index","optional":false,"description":"- Point of insertion.","source":"{number} index - Point of insertion."},{"tag":"param","type":"string","name":"text","optional":false,"description":"- The string to be inserted.","source":"{string} text - The string to be inserted."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"The string with the text inserted at the given point.","source":"{string} - The string with the text inserted at the given point."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"rightString":{"categoryName":"string","description":"Plucks a letter using the index starting from the right.","examples":[{"tag":"example","name":"rightString('rightString');","optional":false,"description":"// => 'g'","source":"rightString('rightString');\n// => 'g'"},{"tag":"example","name":"rightString('rightString',","optional":false,"description":"2);\n// => 'n'","source":"rightString('rightString', 2);\n// => 'n'"}],"name":"rightString","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to extract the letter from.","source":"{string} string - String to extract the letter from."},{"tag":"param","type":"number","name":"index","optional":true,"default":"1","description":"- The starting position.","source":"{number} [index=1] - The starting position."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"A letter at the given index.","source":"{string} - A letter at the given index."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"chunkString":{"categoryName":"string","description":"Splits up a string into chunks.","examples":[{"tag":"example","name":"chunkString('chunk',","optional":false,"description":"2);\n// => ['ch', 'un', 'k']","source":"chunkString('chunk', 2);\n// => ['ch', 'un', 'k']"}],"name":"chunkString","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to chunked.","source":"{string} string - String to chunked."},{"tag":"param","type":"number","name":"size","optional":true,"description":"- The max string length per chunk.","source":"{number} [size] - The max string length per chunk."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"An array with strings that are <= size parameter.","source":"{Array} - An array with strings that are <= size parameter."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"initialString":{"categoryName":"string","description":"Truncates everything before the index starting from the right.","examples":[{"tag":"example","name":"initialString('initialString');","optional":false,"description":"// => 'initialStrin'","source":"initialString('initialString');\n// => 'initialStrin'"},{"tag":"example","name":"initialString('initialString',","optional":false,"description":"2);\n// => 'initialStri'","source":"initialString('initialString', 2);\n// => 'initialStri'"}],"name":"initialString","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to extract the initial letters from.","source":"{string} string - String to extract the initial letters from."},{"tag":"param","type":"number","name":"index","optional":true,"default":"1","description":"- Starting point from the right.","source":"{number} [index=1] - Starting point from the right."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"A","optional":false,"description":"string with the characters before the index starting from the right.","source":"{string} A string with the characters before the index starting from the right."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"restString":{"categoryName":"string","description":"Truncates everything after a index.","examples":[{"tag":"example","name":"restString('restString');","optional":false,"description":"// => 'estString'","source":"restString('restString');\n// => 'estString'"},{"tag":"example","name":"restString('restString',","optional":false,"description":"2);\n// => 'stString'","source":"restString('restString', 2);\n// => 'stString'"}],"name":"restString","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to extract the rest of the letters from.","source":"{string} string - String to extract the rest of the letters from."},{"tag":"param","type":"number","name":"index","optional":true,"default":"1","description":"- Starting point.","source":"{number} [index=1] - Starting point."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"A string without the characters up-to to the index.","source":"{string} - A string without the characters up-to to the index."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"ifInvoke":{"categoryName":"function","description":"Checks if the given method is a function. If it is then it invokes it with the given arguments.","examples":[{"tag":"example","name":"ifInvoke((...args)","optional":false,"description":"=> { return args;}, 1, 2);\n// => [1, 2]","source":"ifInvoke(\n\t(...args) => {\n\t\treturn args;\n\t},\n\t1,\n\t2\n);\n// => [1, 2]"},{"tag":"example","name":"ifInvoke(undefined,","optional":false,"description":"1, 2);\n// => undefined","source":"ifInvoke(undefined, 1, 2);\n// => undefined"}],"name":"ifInvoke","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be invoked if possible.","source":"{Function} callable - The function to be invoked if possible."},{"tag":"param","type":"...Array","name":"args","optional":false,"description":"- Arguments to pass to the method.","source":"{...Array} args - Arguments to pass to the method."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"the method invoked or undefined.","source":"{*} Returns the method invoked or undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"jsonParse":{"categoryName":"utility","description":"Parses JSON string.","examples":[{"tag":"example","name":"jsonParse('{}');","optional":false,"description":"// => {}","source":"jsonParse('{}');\n// => {}"}],"name":"jsonParse","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be parsed.","source":"{string} string - String to be parsed."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the parsed object.","source":"{Object} Returns the parsed object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stringify":{"categoryName":"utility","description":"Stringify an object into a JSON string.","examples":[{"tag":"example","name":"stringify({});","optional":false,"description":"// => '{}'","source":"stringify({});\n// => '{}'"}],"name":"stringify","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- Object to Stringify.","source":"{Object} object - Object to Stringify."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"string","name":"Returns","optional":false,"description":"the object as a valid JSON string.","source":"{string} Returns the object as a valid JSON string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sortNewest":{"categoryName":"collection","description":"Sorts an array in place using a key from newest to oldest.","examples":[{"tag":"example","name":"sortNewest([{id: 1}, {id: 0}],","optional":false,"description":"'id');\n// => [{id: 1}, {id: 0}]","source":"sortNewest([{ id: 1 }, { id: 0 }], 'id');\n// => [{id: 1}, {id: 0}]"}],"name":"sortNewest","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be sorted.","source":"{Array} collection - Collection to be sorted."},{"tag":"param","type":"string","name":"key","optional":false,"description":"- The property name to sort by based on it's value.","source":"{string} key - The property name to sort by based on it's value."},{"tag":"param","type":"boolean","name":"pureMode","optional":true,"default":"true","description":"- Mutates the source array. If set to false creates a new array.","source":"{boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"sorted array and or a clone of the array sorted.","source":"{Array} The sorted array and or a clone of the array sorted."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"getNewest":{"categoryName":"collection","description":"Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.","examples":[{"tag":"example","name":"getNewest([{id: 1}, {id: 0}],","optional":false,"description":"'id');\n// => {id: 1}","source":"getNewest([{ id: 1 }, { id: 0 }], 'id');\n// => {id: 1}"}],"name":"getNewest","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be sorted.","source":"{Array} collection - Collection to be sorted."},{"tag":"param","type":"string","name":"key","optional":false,"description":"- The property name to sort by based on it's value.","source":"{string} key - The property name to sort by based on it's value."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"newest object in the collection.","source":"{Object} The newest object in the collection."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sortOldest":{"categoryName":"collection","description":"Sorts an array in place using a key from oldest to newest.","examples":[{"tag":"example","name":"sortOldest([{id: 1}, {id: 0}],","optional":false,"description":"'id');\n// => [{id: 0}, {id: 1}]","source":"sortOldest([{ id: 1 }, { id: 0 }], 'id');\n// => [{id: 0}, {id: 1}]"}],"name":"sortOldest","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be sorted.","source":"{Array} collection - Collection to be sorted."},{"tag":"param","type":"string","name":"key","optional":false,"description":"- The property name to sort by based on it's value.","source":"{string} key - The property name to sort by based on it's value."},{"tag":"param","type":"boolean","name":"pureMode","optional":true,"default":"true","description":"- Mutates the source array. If set to false creates a new array.","source":"{boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"sorted array and or a clone of the array sorted.","source":"{Array} The sorted array and or a clone of the array sorted."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"getOldest":{"categoryName":"collection","description":"Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.","examples":[{"tag":"example","name":"getOldest([{id: 1}, {id: 0}],","optional":false,"description":"'id');\n// => {id: 0}","source":"getOldest([{ id: 1 }, { id: 0 }], 'id');\n// => {id: 0}"}],"name":"getOldest","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be sorted.","source":"{Array} collection - Collection to be sorted."},{"tag":"param","type":"string","name":"key","optional":false,"description":"- The property name to sort by based on it's value.","source":"{string} key - The property name to sort by based on it's value."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"The","optional":false,"description":"newest object in the collection.","source":"{Object} The newest object in the collection."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"groupBy":{"categoryName":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection thru iteratee.\nThe order of grouped values is determined by the order they occur in collection.\nThe corresponding value of each key is an array of elements responsible for generating the key.","examples":[{"tag":"example","name":"groupBy([6.1, 4.2, 6.3],","optional":false,"description":"Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }","source":"groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }"}],"name":"groupBy","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array of objects.","source":"{Array} collection - Array of objects."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- The iteratee to transform keys.","source":"{Function} iteratee - The iteratee to transform keys."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the composed aggregate object.","source":"{Object} Returns the composed aggregate object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"countBy":{"categoryName":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection through iteratee.","examples":[{"tag":"example","name":"countBy([{a:1}, {a:3}],","optional":false,"description":"(item) => { return 'a';});\n// => {a: 2}","source":"countBy([{ a: 1 }, { a: 3 }], (item) => {\n\treturn 'a';\n});\n// => {a: 2}"}],"name":"countBy","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array of objects.","source":"{Array} collection - Array of objects."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- The iteratee to transform keys.","source":"{Function} iteratee - The iteratee to transform keys."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the composed aggregate object.","source":"{Object} Returns the composed aggregate object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"countKey":{"categoryName":"collection","description":"Count the amount of times a key is present in a colleciton.","examples":[{"tag":"example","name":"countKey([{a:1}, {a:3}],","optional":false,"description":"'a');\n// => 2","source":"countKey([{ a: 1 }, { a: 3 }], 'a');\n// => 2"}],"name":"countKey","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array of objects.","source":"{Array} collection - Array of objects."},{"tag":"param","type":"Function","name":"property","optional":false,"description":"- The name of the key.","source":"{Function} property - The name of the key."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"count.","source":"{number} The count."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"countWithoutKey":{"categoryName":"collection","description":"Count the amount of times a key is not present in a colleciton.","examples":[{"tag":"example","name":"countWithoutKey([{a:1}, {a:3}],","optional":false,"description":"'b');\n// => 2","source":"countWithoutKey([{ a: 1 }, { a: 3 }], 'b');\n// => 2"}],"name":"countWithoutKey","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array of objects.","source":"{Array} collection - Array of objects."},{"tag":"param","type":"string","name":"property","optional":false,"description":"- The name of the key.","source":"{string} property - The name of the key."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"number","name":"The","optional":false,"description":"count.","source":"{number} The count."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"indexBy":{"categoryName":"collection","description":"Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know the keys are unique.","examples":[{"tag":"example","name":"indexBy([{name: 'Lucy', id: 0}, {name: 'Erick', id: 1}],","optional":false,"description":"'id');\n// => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}","source":"indexBy(\n\t[\n\t\t{ name: 'Lucy', id: 0 },\n\t\t{ name: 'Erick', id: 1 }\n\t],\n\t'id'\n);\n// => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}"}],"name":"indexBy","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array of objects.","source":"{Array} collection - Array of objects."},{"tag":"param","type":"string","name":"key","optional":false,"description":"- The property name to index by.","source":"{string} key - The property name to index by."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the composed aggregate object.","source":"{Object} Returns the composed aggregate object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"pluck":{"categoryName":"collection","description":"Returns an array of the plucked values from the collection.","examples":[{"tag":"example","name":"pluck([{lucy: 'Ants moving around on the walls.'}, {lucy: 'In the sky with diamonds.'}],","optional":false,"description":"'lucy');\n// => ['Ants moving around on the walls.', 'In the sky with diamonds.']","source":"pluck([{ lucy: 'Ants moving around on the walls.' }, { lucy: 'In the sky with diamonds.' }], 'lucy');\n// => ['Ants moving around on the walls.', 'In the sky with diamonds.']"}],"name":"pluck","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array used to determine what value to be plucked.","source":"{Array} collection - Array used to determine what value to be plucked."},{"tag":"param","type":"string","name":"pluckThis","optional":false,"description":"- Property name.","source":"{string} pluckThis - Property name."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"An array of plucked values.","source":"{Array} - An array of plucked values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"pluckObject":{"categoryName":"object","description":"Returns an array of the plucked values from the object. Values are plucked in the order given by the array.","examples":[{"tag":"example","name":"pluckObject({a:","optional":false,"description":"1, b:3}, ['a','b']);\n// => [1, 3]","source":"pluckObject({ a: 1, b: 3 }, ['a', 'b']);\n// => [1, 3]"}],"name":"pluckObject","params":[{"tag":"param","type":"Object","name":"value","optional":false,"description":"- Array used to determine what values to be plucked.","source":"{Object} value - Array used to determine what values to be plucked."},{"tag":"param","type":"string|Array","name":"pluckThese","optional":false,"description":"- Property name.","source":"{string|Array} pluckThese - Property name."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"An array of plucked values.","source":"{Array} - An array of plucked values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"pluckValues":{"categoryName":"collection","description":"Returns an array of the arrays of plucked values from the collection.","examples":[{"tag":"example","name":"pluckValues([{a: 1, b:3}, {a: 1, b:3}],","optional":false,"description":"['a','b']);\n// => [[1, 3], [1, 3]]","source":"pluckValues(\n\t[\n\t\t{ a: 1, b: 3 },\n\t\t{ a: 1, b: 3 }\n\t],\n\t['a', 'b']\n);\n// => [[1, 3], [1, 3]]"}],"name":"pluckValues","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Array used to determine what values to be plucked.","source":"{Array} collection - Array used to determine what values to be plucked."},{"tag":"param","type":"Array","name":"pluckThese","optional":false,"description":"- Property names.","source":"{Array} pluckThese - Property names."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"An array of arrays of plucked values.","source":"{Array} - An array of arrays of plucked values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"invoke":{"categoryName":"collection","description":"Invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","name":"invoke([{lucy(item, index) { return [item, index];}}, {lucy(item, index) { return [item, index];}}],","optional":false,"description":"'lucy', 'Arity LLC');\n// => [['Arity LLC', 0], ['Arity LLC', 1]]","source":"invoke(\n\t[\n\t\t{\n\t\t\tlucy(item, index) {\n\t\t\t\treturn [item, index];\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tlucy(item, index) {\n\t\t\t\treturn [item, index];\n\t\t\t}\n\t\t}\n\t],\n\t'lucy',\n\t'Arity LLC'\n);\n// => [['Arity LLC', 0], ['Arity LLC', 1]]"}],"name":"invoke","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection from which method will be taken.","source":"{Array} collection - Collection from which method will be taken."},{"tag":"param","type":"string","name":"property","optional":false,"description":"- Value used to pluck method from object.","source":"{string} property - Value used to pluck method from object."},{"tag":"param","type":"*","name":"value","optional":false,"description":"- Value to be passed to callable property.","source":"{*} value - Value to be passed to callable property."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns the results of the invoked method.","source":"{Array} - Returns the results of the invoked method."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"invokeAsync":{"categoryName":"collection","description":"Asynchronously awaits & invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","name":"invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}],","optional":false,"description":"'lucy', 'Arity LLC');\n// => [['Arity LLC', 0], ['Arity LLC', 1]]","source":"invokeAsync(\n\t[\n\t\t{\n\t\t\tasync lucy(item, index) {\n\t\t\t\treturn [item, index];\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tasync lucy(item, index) {\n\t\t\t\treturn [item, index];\n\t\t\t}\n\t\t}\n\t],\n\t'lucy',\n\t'Arity LLC'\n);\n// => [['Arity LLC', 0], ['Arity LLC', 1]]"}],"name":"invokeAsync","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection from which method will be taken.","source":"{Array} collection - Collection from which method will be taken."},{"tag":"param","type":"string","name":"property","optional":false,"description":"- Value used to pluck method from object.","source":"{string} property - Value used to pluck method from object."},{"tag":"param","type":"*","name":"value","optional":false,"description":"- Value to be passed to callable property.","source":"{*} value - Value to be passed to callable property."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'Arity LLC');\nreturn assert(result, [['Arity LLC', 0], ['Arity LLC', 1]]);\n});","source":"(async () => {\nconst result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'Arity LLC');\nreturn assert(result, [['Arity LLC', 0], ['Arity LLC', 1]]);\n});"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns the results of the invoked method.","source":"{Array} - Returns the results of the invoked method."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"findItem":{"categoryName":"collection","description":"Finds an object in a collection by the given id and property name.","examples":[{"tag":"example","name":"findItem([{id: 1}, {id: 2}],","optional":false,"description":"1);\n// => {id: 1}","source":"findItem([{ id: 1 }, { id: 2 }], 1);\n// => {id: 1}"}],"name":"findItem","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be checked for an item.","source":"{Array} collection - Collection to be checked for an item."},{"tag":"param","type":"number|string","name":"id","optional":false,"description":"- The value to look for.","source":"{number|string} id - The value to look for."},{"tag":"param","type":"string","name":"propertyName","optional":true,"default":"'id'","description":"- The name of the property to compare.","source":"{string} [propertyName = 'id'] - The name of the property to compare."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"The found object.","source":"{Object} - The found object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"findIndex":{"categoryName":"collection","description":"Finds an object in a collection by the given id and property name and returns the array index of the object.","examples":[{"tag":"example","name":"findIndex([{id: 1}, {id: 2}],","optional":false,"description":"1);\n// => 0","source":"findIndex([{ id: 1 }, { id: 2 }], 1);\n// => 0"}],"name":"findIndex","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Collection to be checked for an item.","source":"{Array} collection - Collection to be checked for an item."},{"tag":"param","type":"number|string","name":"id","optional":false,"description":"- The value to look for.","source":"{number|string} id - The value to look for."},{"tag":"param","type":"string","name":"propertyName","optional":true,"default":"'id'","description":"- The name of the property to compare.","source":"{string} [propertyName = 'id'] - The name of the property to compare."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"The index of the object.","source":"{number} - The index of the object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sortAlphabetical":{"categoryName":"collection","description":"Perform alphabetical sort on a collection with the provided key name. Mutates the array.","examples":[{"tag":"example","name":"sortAlphabetical([{letter:'a'}, {letter:'f'}, {letter:'c'}],","optional":false,"description":"'letter');\n// => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]","source":"sortAlphabetical([{ letter: 'a' }, { letter: 'f' }, { letter: 'c' }], 'letter');\n// => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]"}],"name":"sortAlphabetical","params":[{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array to be sorted.","source":"{Array} array - Array to be sorted."}],"category":{"tag":"category","name":"collection","optional":false,"source":"collection"},"returns":{"tag":"returns","type":"Array","name":"The","optional":false,"description":"sorted array.","source":"{Array} The sorted array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"ary":{"categoryName":"function","description":"Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.","examples":[{"tag":"example","name":"ary((...args)","optional":false,"description":"=> { return args;}, 2)(1, 2, 3);\n// => [1, 2]","source":"ary((...args) => {\n\treturn args;\n}, 2)(1, 2, 3);\n// => [1, 2]"}],"name":"ary","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to cap arguments for.","source":"{Function} callable - The function to cap arguments for."},{"tag":"param","type":"number","name":"amount","optional":false,"description":"- The arity cap.","source":"{number} amount - The arity cap."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the new capped function.","source":"{Object} Returns the new capped function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"curry":{"categoryName":"function","description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.","examples":[{"tag":"example","name":"curry((a,","optional":false,"description":"b, c) => {\nreturn [a, b, c];\n})(1)(2)(3);\n// => [1, 2, 3]","source":"curry((a, b, c) => {\n\treturn [a, b, c];\n})(1)(2)(3);\n// => [1, 2, 3]"}],"name":"curry","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to curry.","source":"{Function} callable - The function to curry."},{"tag":"param","type":"number","name":"arity","optional":false,"description":"- The arity of method.","source":"{number} arity - The arity of method."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"the new curried function.","source":"{*} Returns the new curried function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"curryRight":{"description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.","examples":[{"tag":"example","name":"curryRight((a,","optional":false,"description":"b, c) => {\nreturn [a, b, c];\n})(1)(2)(3);\n// => [3, 2, 1]","source":"curryRight((a, b, c) => {\n\treturn [a, b, c];\n})(1)(2)(3);\n// => [3, 2, 1]"}],"name":"curryRight","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to curry.","source":"{Function} callable - The function to curry."},{"tag":"param","type":"number","name":"arity","optional":false,"description":"- The arity of method.","source":"{number} arity - The arity of method."}],"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"the new curried function.","source":"{*} Returns the new curried function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"once":{"categoryName":"function","description":"Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.","examples":[{"tag":"example","name":"const","optional":false,"description":"onceOnly = once((item) => { return item;});\nonceOnly(5);\nonceOnly(3);\n// => 5","source":"const onceOnly = once((item) => {\n\treturn item;\n});\nonceOnly(5);\nonceOnly(3);\n// => 5"}],"name":"once","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be called.","source":"{Function} callable - The function to be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst onceOnly = once((item) => { return item;});\nreturn await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5);\n});","source":"(async () => {\nconst onceOnly = once((item) => { return item;});\nreturn await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5);\n});"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new pass-thru function.","source":"{Function} Returns the new pass-thru function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"after":{"categoryName":"function","description":"Creates a function that executes callable, only after being called n times.","examples":[{"tag":"example","name":"const","optional":false,"description":"onlyAfter = after(1, (item) => { return item;});\nonlyAfter(1);\n// => undefined\nonlyAfter(2);\n// => 2","source":"const onlyAfter = after(1, (item) => {\n\treturn item;\n});\nonlyAfter(1);\n// => undefinedonlyAfter(2);"}],"name":"after","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be called.","source":"{Function} callable - The function to be called."},{"tag":"param","type":"number","name":"amount","optional":false,"description":"- The number of calls until method is invoked.","source":"{number} amount - The number of calls until method is invoked."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst onlyAfter = after(2, (item) => { return item;});\nreturn await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2);\n});","source":"(async () => {\nconst onlyAfter = after(2, (item) => { return item;});\nreturn await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2);\n});"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new pass-thru function.","source":"{Function} Returns the new pass-thru function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"before":{"categoryName":"function","description":"Creates a function that executes callable, only before n times.","examples":[{"tag":"example","name":"const","optional":false,"description":"onlyBefore = before(3, () => { return 1;});\nonlyBefore(1);\n// => 1\nonlyBefore(2);\n// => 2\nonlyBefore(3);\n// => 2","source":"const onlyBefore = before(3, () => {\n\treturn 1;\n});\nonlyBefore(1);\n// => 1onlyBefore(2);"}],"name":"before","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be called.","source":"{Function} callable - The function to be called."},{"tag":"param","type":"number","name":"amount","optional":false,"description":"- The number of calls before n.","source":"{number} amount - The number of calls before n."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst onlyBefore = before(3, (item) => { return item;});\nreturn await assert(onlyBefore(1), 1) && await assert(onlyBefore(2), 2) && await assert(onlyBefore(3), 2);\n});","source":"(async () => {\nconst onlyBefore = before(3, (item) => { return item;});\nreturn await assert(onlyBefore(1), 1) && await assert(onlyBefore(2), 2) && await assert(onlyBefore(3), 2);\n});"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new pass-thru function.","source":"{Function} Returns the new pass-thru function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stubObject":{"categoryName":"function","description":"This method returns a new empty object.","examples":[{"tag":"example","name":"stubObject();","optional":false,"description":"// => {}","source":"stubObject();\n// => {}"}],"name":"stubObject","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Object","name":"Returns","optional":false,"description":"the new empty object.","source":"{Object} Returns the new empty object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stubArray":{"categoryName":"function","description":"This method returns a new empty array.","examples":[{"tag":"example","name":"stubArray();","optional":false,"description":"// => []","source":"stubArray();\n// => []"}],"name":"stubArray","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Array","name":"Returns","optional":false,"description":"the new empty array.","source":"{Array} Returns the new empty array."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stubString":{"categoryName":"function","description":"This method returns a new empty string.","examples":[{"tag":"example","name":"stubString();","optional":false,"description":"// => ''","source":"stubString();\n// => ''"}],"name":"stubString","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"string","name":"Returns","optional":false,"description":"the new empty string.","source":"{string} Returns the new empty string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stubFalse":{"categoryName":"function","description":"This method returns false.","examples":[{"tag":"example","name":"stubFalse();","optional":false,"description":"// => false","source":"stubFalse();\n// => false"}],"name":"stubFalse","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"false.","source":"{boolean} Returns false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"stubTrue":{"categoryName":"function","description":"This method returns true.","examples":[{"tag":"example","name":"stubTrue();","optional":false,"description":"// => true","source":"stubTrue();\n// => true"}],"name":"stubTrue","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"true.","source":"{boolean} Returns true."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"noop":{"categoryName":"function","description":"This method returns undefined.","examples":[{"tag":"example","name":"noop();","optional":false,"description":"// => undefined","source":"noop();\n// => undefined"}],"name":"noop","category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"undefined","name":"Returns","optional":false,"description":"undefined.","source":"{undefined} Returns undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachWhile":{"categoryName":"utility","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","name":"eachWhile({a:","optional":false,"description":"false, b: true, c: true}, (item) => {\nreturn item;\n});\n// => false","source":"eachWhile({ a: false, b: true, c: true }, (item) => {\n\treturn item;\n});\n// => false"}],"name":"eachWhile","params":[{"tag":"param","type":"Object|Array|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Array|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"{Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true if all values returned are true or false if one value returns false.","source":"{boolean} Returns the true if all values returned are true or false if one value returns false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"each":{"categoryName":"utility","description":"Iterates through the given object.","examples":[{"tag":"example","name":"each({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}","source":"each({ a: 1, b: 2, c: 3 }, (item) => {\n\tconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}"}],"name":"each","params":[{"tag":"param","type":"Array|Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Array|Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\neach({a: 1, b: 2, c: 3}, (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});","source":"(async () => {\nconst tempList = [];\neach({a: 1, b: 2, c: 3}, (item) => {\ntempList.push(item);\n});\nreturn assert(tempList, [1, 2, 3]);\n});"},"returns":{"tag":"returns","type":"Array|Object|Function","name":"The","optional":false,"description":"originally given object.","source":"{Array|Object|Function} The originally given object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"filter":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","name":"filter({a:","optional":false,"description":"false, b: true, c: true}, (item) => {\nreturn item;\n});\n// => {b: true, c: true}","source":"filter({ a: false, b: true, c: true }, (item) => {\n\treturn item;\n});\n// => {b: true, c: true}"}],"name":"filter","params":[{"tag":"param","type":"Array|Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Array|Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Array|Object|Function","name":"-","optional":false,"description":"A new object of the same calling object's type.","source":"{Array|Object|Function} - A new object of the same calling object's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"map":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"map({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nreturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}","source":"map({ a: 1, b: 2, c: 3 }, (item) => {\n\treturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}"}],"name":"map","params":[{"tag":"param","type":"Array|Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Array|Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Array|Object|Function","name":"A","optional":false,"description":"new object of the same calling object's type.","source":"{Array|Object|Function} A new object of the same calling object's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactMap":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"compactMap({a:","optional":false,"description":"null, b: 2, c: 3}, (item) => {\nreturn item;\n});\n// => {b: 2, c: 3}","source":"compactMap({ a: null, b: 2, c: 3 }, (item) => {\n\treturn item;\n});\n// => {b: 2, c: 3}"}],"name":"compactMap","params":[{"tag":"param","type":"Array|Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Array|Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Array|Object|Function","name":"A","optional":false,"description":"new object of the same calling object's type.","source":"{Array|Object|Function} A new object of the same calling object's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"bindAll":{"categoryName":"function","description":"Loops through an object or an array and binds the given object to all functions encountered.","examples":[{"tag":"example","name":"bindAll([function () { return this;}],","optional":false,"description":"'Lucy')[0]().toString();\n// => 'Lucy'","source":"bindAll(\n\t[\n\t\tfunction() {\n\t\t\treturn this;\n\t\t}\n\t],\n\t'Lucy'\n)[0]().toString();\n// => 'Lucy'"},{"tag":"example","name":"bindAll({a()","optional":false,"description":"{ return this;}}, 'Lucy').a().toString();\n// => 'Lucy'","source":"bindAll(\n\t{\n\t\ta() {\n\t\t\treturn this;\n\t\t}\n\t},\n\t'Lucy'\n)\n\t.a()\n\t.toString();\n// => 'Lucy'"}],"name":"bindAll","params":[{"tag":"param","type":"Object|Function|Array","name":"collection","optional":false,"description":"- The functions to bind.","source":"{Object|Function|Array} collection - The functions to bind."},{"tag":"param","type":"*","name":"bindThis","optional":false,"description":"- Object to be bound to functions.","source":"{*} bindThis - Object to be bound to functions."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Object|Function|Array","name":"Returns","optional":false,"description":"the method invoked or undefined.","source":"{Object|Function|Array} Returns the method invoked or undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"negate":{"categoryName":"function","description":"Creates a function that negates the result of the predicate callable.","examples":[{"tag":"example","name":"negate(()","optional":false,"description":"=> { return false;})();\n// => true","source":"negate(() => {\n\treturn false;\n})();\n// => true"}],"name":"negate","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be invoked.","source":"{Function} callable - The function to be invoked."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"the given methods result.","source":"{*} Returns the given methods result."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"every":{"categoryName":"function","description":"Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).","examples":[{"tag":"example","name":"every([[], true, 1, null, 'string'],","optional":false,"description":"Boolean);\n// => false","source":"every([[], true, 1, null, 'string'], Boolean);\n// => false"}],"name":"every","params":[{"tag":"param","type":"Array|Object","name":"collection","optional":false,"description":"- The collection to iterate over.","source":"{Array|Object} collection - The collection to iterate over."},{"tag":"param","type":"Function","name":"predicate","optional":false,"description":"- The function invoked per iteration.","source":"{Function} predicate - The function invoked per iteration."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"true if all elements pass the predicate check, else false.","source":"{boolean} Returns true if all elements pass the predicate check, else false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"over":{"categoryName":"function","description":"Creates a function that invokes iteratees with the arguments it receives and returns their results.","examples":[{"tag":"example","name":"over([Math.max, Math.min])(1,","optional":false,"description":"2, 3, 4);\n// => [4, 1]","source":"over([Math.max, Math.min])(1, 2, 3, 4);\n// => [4, 1]"}],"name":"over","params":[{"tag":"param","type":"Array|Object","name":"iteratees","optional":false,"description":"- The iteratees to invoke.","source":"{Array|Object} iteratees - The iteratees to invoke."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new function.","source":"{Function} Returns the new function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"overEvery":{"categoryName":"function","description":"Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.","examples":[{"tag":"example","name":"overEvery([Boolean, isFinite])('1');","optional":false,"description":"// => true","source":"overEvery([Boolean, isFinite])('1');\n// => true"},{"tag":"example","name":"overEvery([Boolean, isFinite])(null);","optional":false,"description":"// => false","source":"overEvery([Boolean, isFinite])(null);\n// => false"}],"name":"overEvery","params":[{"tag":"param","type":"Array|Object","name":"predicates","optional":false,"description":"-  The predicates to check.","source":"{Array|Object} predicates -  The predicates to check."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new function.","source":"{Function} Returns the new function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"chain":{"categoryName":"function","description":"Creates a chainable set of functions.","examples":[{"tag":"example","name":"const","optional":false,"description":"chained = chain({a(item) { return item;}});\nchained('Acid').a();\nchained.done();\n// => 'Acid'","source":"const chained = chain({\n\ta(item) {\n\t\treturn item;\n\t}\n});\nchained('Acid').a();\nchained.done();\n// => 'Acid'"}],"name":"chain","params":[{"tag":"param","type":"Array|Object","name":"methods","optional":false,"description":"- The object to take methods from.","source":"{Array|Object} methods - The object to take methods from."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst chained = chain({a(item) { return item;}});\nchained('Acid').a();\nreturn assert(chained.done(), 'Acid');\n});","source":"(async () => {\nconst chained = chain({a(item) { return item;}});\nchained('Acid').a();\nreturn assert(chained.done(), 'Acid');\n});"},"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.","source":"{*} Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"inSync":{"categoryName":"function","description":"Invoke an array of functions.","examples":[{"tag":"example","name":"inSync([() => {console.log(1);}, () => {console.log(2);}]);","optional":false,"description":"// 1\n// 2\n// => undefined","source":"inSync([\n\t() => {\n\t\tconsole.log(1);\n\t},\n\t() => {\n\t\tconsole.log(2);\n\t}\n]);\n// 1\n// 2\n// => undefined"}],"name":"inSync","params":[{"tag":"param","type":"Array|Object|Function","name":"collection","optional":false,"description":"- The functions to be invoked.","source":"{Array|Object|Function} collection - The functions to be invoked."},{"tag":"param","type":"*","name":"arg","optional":false,"description":"- The object passed as an argument to each method.","source":"{*} arg - The object passed as an argument to each method."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\ninSync([() => {tempList.push(1);}, () => {tempList.push(2);}]);\nreturn assert(tempList, [1, 2]);\n});","source":"(async () => {\nconst tempList = [];\ninSync([() => {tempList.push(1);}, () => {tempList.push(2);}]);\nreturn assert(tempList, [1, 2]);\n});"},"returns":{"tag":"returns","type":"undefined","name":"Returns","optional":false,"description":"undefined.","source":"{undefined} Returns undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"inAsync":{"categoryName":"function","description":"Invoke an array of functions asynchronously. Each function is awaited to ensure execution order.","examples":[{"tag":"example","name":"inAsync([async () => {console.log(1);}, async () => {console.log(2);}]);","optional":false,"description":"// 1\n// 2\n// => undefined","source":"inAsync([\n\tasync () => {\n\t\tconsole.log(1);\n\t},\n\tasync () => {\n\t\tconsole.log(2);\n\t}\n]);\n// 1\n// 2\n// => undefined"}],"name":"inAsync","params":[{"tag":"param","type":"Array|Object|Function","name":"collection","optional":false,"description":"- The functions to be invoked.","source":"{Array|Object|Function} collection - The functions to be invoked."},{"tag":"param","type":"*","name":"arg","optional":false,"description":"- The object passed as an argument to each method.","source":"{*} arg - The object passed as an argument to each method."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"function","optional":false,"source":"function"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = [];\nawait inAsync([async () => {tempList.push(1);}, async () => {tempList.push(2);}]);\nreturn assert(tempList, [1, 2]);\n});","source":"(async () => {\nconst tempList = [];\nawait inAsync([async () => {tempList.push(1);}, async () => {tempList.push(2);}]);\nreturn assert(tempList, [1, 2]);\n});"},"returns":{"tag":"returns","type":"undefined","name":"Returns","optional":false,"description":"undefined.","source":"{undefined} Returns undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"nthArg":{"categoryName":"function","description":"Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.","examples":[{"tag":"example","name":"nthArg(1)('a',","optional":false,"description":"'b');\n// => 'b'","source":"nthArg(1)('a', 'b');\n// => 'b'"}],"name":"nthArg","params":[{"tag":"param","type":"number","name":"index","optional":true,"default":"0","description":"- The index of the argument to return.","source":"{number} [index = 0] - The index of the argument to return."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new pass-thru function.","source":"{Function} Returns the new pass-thru function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"reArg":{"categoryName":"function","description":"Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.","examples":[{"tag":"example","name":"reArg((a,","optional":false,"description":"b, c) => {\nreturn [a, b, c];\n}, [1,2,0])(1,2,3);\n// => [2, 3, 1]","source":"reArg(\n\t(a, b, c) => {\n\t\treturn [a, b, c];\n\t},\n\t[1, 2, 0]\n)(1, 2, 3);\n// => [2, 3, 1]"}],"name":"reArg","params":[{"tag":"param","type":"Function","name":"callable","optional":false,"description":"- The function to be invoked.","source":"{Function} callable - The function to be invoked."},{"tag":"param","type":"Array","name":"indexes","optional":false,"description":"- The arranged argument indexes.","source":"{Array} indexes - The arranged argument indexes."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new function.","source":"{Function} Returns the new function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"wrap":{"categoryName":"function","description":"Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.","examples":[{"tag":"example","name":"wrap('Lucy',","optional":false,"description":"(firstName, lastName) => {\nreturn `My name is ${firstName} ${lastName}.`;\n})('Diamonds');\n// => 'My name is Lucy Diamonds.'","source":"wrap('Lucy', (firstName, lastName) => {\n\treturn `My name is ${firstName} ${lastName}.`;\n})('Diamonds');\n// => 'My name is Lucy Diamonds.'"}],"name":"wrap","params":[{"tag":"param","type":"*","name":"value","optional":false,"description":"- The value to wrap.","source":"{*} value - The value to wrap."},{"tag":"param","type":"Function","name":"wrapper","optional":false,"description":"- The wrapper function.","source":"{Function} wrapper - The wrapper function."}],"category":{"tag":"category","name":"function","optional":false,"source":"function"},"returns":{"tag":"returns","type":"Function","name":"The","optional":false,"description":"new function.","source":"{Function} The new function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isZero":{"categoryName":"number","description":"Strictly checks if a number is zero.","examples":[{"tag":"example","name":"isZero(0);","optional":false,"description":"// => true","source":"isZero(0);\n// => true"},{"tag":"example","name":"isZero(1);","optional":false,"description":"// => false","source":"isZero(1);\n// => false"}],"name":"isZero","params":[{"tag":"param","type":"number","name":"item","optional":false,"description":"- Number to be checked.","source":"{number} item - Number to be checked."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or False.","source":"{boolean} True or False."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isNumberEqual":{"categoryName":"number","description":"Strictly checks if a number equal to another number.","examples":[{"tag":"example","name":"isNumberEqual(0,","optional":false,"description":"0);\n// => true","source":"isNumberEqual(0, 0);\n// => true"},{"tag":"example","name":"isNumberEqual(0,","optional":false,"description":"1);\n// => false","source":"isNumberEqual(0, 1);\n// => false"}],"name":"isNumberEqual","params":[{"tag":"param","type":"number","name":"item","optional":false,"description":"- Number to be checked against num.","source":"{number} item - Number to be checked against num."},{"tag":"param","type":"number","name":"num","optional":false,"description":"- Number to be checked against item.","source":"{number} num - Number to be checked against item."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or False.","source":"{boolean} True or False."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isNumberInRange":{"categoryName":"number","description":"Checks if a number is within a range.","examples":[{"tag":"example","name":"isNumberInRange(1,","optional":false,"description":"0, 2);\n// => true","source":"isNumberInRange(1, 0, 2);\n// => true"},{"tag":"example","name":"isNumberInRange(1,","optional":false,"description":"-1, 0);\n// => false","source":"isNumberInRange(1, -1, 0);\n// => false"}],"name":"isNumberInRange","params":[{"tag":"param","type":"number","name":"num","optional":false,"description":"- Number to be checked.","source":"{number} num - Number to be checked."},{"tag":"param","type":"number","name":"start","optional":false,"description":"- Beginning of range.","source":"{number} start - Beginning of range."},{"tag":"param","type":"number","name":"end","optional":false,"description":"- End of range.","source":"{number} end - End of range."}],"category":{"tag":"category","name":"number","optional":false,"source":"number"},"returns":{"tag":"returns","type":"boolean","name":"True","optional":false,"description":"or False.","source":"{boolean} True or False."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"hasKeys":{"categoryName":"object","description":"Checks to see if an object has all of the given property names.","examples":[{"tag":"example","name":"hasKeys({Lucy:","optional":false,"description":"'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Thor']);\n// => true","source":"hasKeys({ Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo' }, ['Lucy', 'Thor']);\n// => true"},{"tag":"example","name":"hasKeys({Lucy:","optional":false,"description":"'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Tom']);\n// => false","source":"hasKeys({ Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo' }, ['Lucy', 'Tom']);\n// => false"}],"name":"hasKeys","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- Object from which keys are extracted.","source":"{Object} object - Object from which keys are extracted."},{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- Array of object keys.","source":"{Array} properties - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"boolean","name":"-","optional":false,"description":"Returns true or false.","source":"{boolean} - Returns true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"hasAnyKeys":{"categoryName":"object","description":"Checks to see if an object has any of the given property names.","examples":[{"tag":"example","name":"hasAnyKeys({Lucy:","optional":false,"description":"'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy', 'Tom']);\n// => true","source":"hasAnyKeys({ Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo' }, ['Lucy', 'Tom']);\n// => true"},{"tag":"example","name":"hasAnyKeys({Lucy:","optional":false,"description":"'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Other', 'Tom']);\n// => false","source":"hasAnyKeys({ Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo' }, ['Other', 'Tom']);\n// => false"}],"name":"hasAnyKeys","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- Object from which keys are extracted.","source":"{Object} object - Object from which keys are extracted."},{"tag":"param","type":"Array","name":"properties","optional":false,"description":"- Array of object keys.","source":"{Array} properties - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"boolean","name":"-","optional":false,"description":"Returns true or false.","source":"{boolean} - Returns true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"pick":{"categoryName":"object","description":"Returns a clone of the source object with the plucked properties.","examples":[{"tag":"example","name":"pick({a:1,","optional":false,"description":"b:2, c:3}, ['a','b']);\n// => {a:1, b:2}","source":"pick({ a: 1, b: 2, c: 3 }, ['a', 'b']);\n// => {a:1, b:2}"}],"name":"pick","params":[{"tag":"param","type":"Object","name":"source","optional":false,"description":"- Object to be cloned.","source":"{Object} source - Object to be cloned."},{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array used to determine what values to be plucked.","source":"{Array} array - Array used to determine what values to be plucked."},{"tag":"param","type":"Object","name":"newObject","optional":true,"default":"{}","description":"- Object to be populated with plucked values.","source":"{Object} [newObject = {}] - Object to be populated with plucked values."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"A new object with plucked properties.","source":"{Object} - A new object with plucked properties."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactKeys":{"categoryName":"object","description":"Extracts all keys from an object whose values are not falsey. The values false, null, 0, \"\", undefined, and NaN are falsey.","examples":[{"tag":"example","name":"compactKeys({Lucy:","optional":false,"description":"'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\n// => ['Lucy', 'John']","source":"compactKeys({ Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null });\n// => ['Lucy', 'John']"}],"name":"compactKeys","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- Object from which keys are extracted.","source":"{Object} object - Object from which keys are extracted."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst results = compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\nreturn assert(results.includes('Lucy') && results.includes('John'), true);\n});","source":"(async () => {\nconst results = compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\nreturn assert(results.includes('Lucy') && results.includes('John'), true);\n});"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Returns an array of key values.","source":"{Array} - Returns an array of key values."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isMatchObject":{"categoryName":"object","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","name":"isMatchObject({a:","optional":false,"description":"1}, {a: 1});\n// => true","source":"isMatchObject({ a: 1 }, { a: 1 });\n// => true"}],"name":"isMatchObject","params":[{"tag":"param","type":"Object","name":"source","optional":false,"description":"- Source object.","source":"{Object} source - Source object."},{"tag":"param","type":"Object","name":"compareObject","optional":false,"description":"- Object to compare to source.","source":"{Object} compareObject - Object to compare to source."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true or false.","source":"{boolean} Returns the true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"invert":{"categoryName":"object","description":"Creates an inverted version of a given object by switching it's keys and values.","examples":[{"tag":"example","name":"invert({a:1});","optional":false,"description":"// => {1:'a'}","source":"invert({ a: 1 });\n// => {1:'a'}"}],"name":"invert","params":[{"tag":"param","type":"Object","name":"thisObject","optional":false,"description":"- Object to be inverted.","source":"{Object} thisObject - Object to be inverted."},{"tag":"param","type":"Array","name":"invertedObject","optional":true,"default":"{}","description":"- Empty object to be populated with inverted values from thisObject.","source":"{Array} [invertedObject = {}] - Empty object to be populated with inverted values from thisObject."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"Returns object with keys and values switched.","source":"{Object} - Returns object with keys and values switched."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"omit":{"categoryName":"object","description":"Returns a clone of the given object without the given properties.","examples":[{"tag":"example","name":"omit({a:1,","optional":false,"description":"b:2}, ['a']);\n// => {b:2}","source":"omit({ a: 1, b: 2 }, ['a']);\n// => {b:2}"}],"name":"omit","params":[{"tag":"param","type":"Object","name":"originalObject","optional":false,"description":"- Object from which keys are extracted.","source":"{Object} originalObject - Object from which keys are extracted."},{"tag":"param","type":"Array","name":"array","optional":false,"description":"- Array of object keys.","source":"{Array} array - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"A new object with the removed.","source":"{Object} - A new object with the removed."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"eachObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the given object.","examples":[{"tag":"example","name":"eachObjectAsync({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}","source":"eachObjectAsync({ a: 1, b: 2, c: 3 }, (item) => {\n\tconsole.log(item);\n});\n// => {a: 1, b: 2, c: 3}"}],"name":"eachObjectAsync","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = {};\nawait eachObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\ntempList[key] = item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});","source":"(async () => {\nconst tempList = {};\nawait eachObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\ntempList[key] = item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});"},"returns":{"tag":"returns","type":"Object|Function","name":"Returns","optional":false,"description":"the calling object.","source":"{Object|Function} Returns the calling object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"mapObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"mapObjectAsync({a:","optional":false,"description":"1, b: 2, c: 3}, (item) => {\nreturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}","source":"mapObjectAsync({ a: 1, b: 2, c: 3 }, (item) => {\n\treturn item * 2;\n});\n// => {a: 2, b: 4, c: 6}"}],"name":"mapObjectAsync","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = await mapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\nreturn item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});","source":"(async () => {\nconst tempList = await mapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\nreturn item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});"},"returns":{"tag":"returns","type":"Object|Function","name":"An","optional":false,"description":"object of the same calling object's type.","source":"{Object|Function} An object of the same calling object's type."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"compactMapObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","name":"compactMapObjectAsync({a:","optional":false,"description":"undefined, b: 2, c: 3}, (item) => {\nreturn item;\n});\n// => {b: 2, c: 3}","source":"compactMapObjectAsync({ a: undefined, b: 2, c: 3 }, (item) => {\n\treturn item;\n});\n// => {b: 2, c: 3}"}],"name":"compactMapObjectAsync","params":[{"tag":"param","type":"Object|Function","name":"callingObject","optional":false,"description":"- Object that will be looped through.","source":"{Object|Function} callingObject - Object that will be looped through."},{"tag":"param","type":"Function","name":"iteratee","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"{Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","type":"Object|Function","name":"results","optional":true,"default":"{}","description":"- Object that will be used to assign results.","source":"{Object|Function} [results = {}] - Object that will be used to assign results."}],"category":{"tag":"category","name":"object","optional":false,"source":"object"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nconst tempList = await compactMapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\nreturn item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});","source":"(async () => {\nconst tempList = await compactMapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\nreturn item;\n});\nreturn assert(tempList, {a: 1, b: 2, c: 3});\n});"},"returns":{"tag":"returns","type":"Object|Function","name":"An","optional":false,"description":"object with mapped properties that are not null or undefined.","source":"{Object|Function} An object with mapped properties that are not null or undefined."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperCase":{"categoryName":"string","description":"Converts a string and converts it entirely into uppercase.","examples":[{"tag":"example","name":"upperCase('upper","optional":false,"description":"case');\n// => 'UPPER CASE'","source":"upperCase('upper case');\n// => 'UPPER CASE'"}],"name":"upperCase","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be converted into upper case.","source":"{string} string - String to be converted into upper case."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"Converted string in upper case.","source":"{string} - Converted string in upper case."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"camelCase":{"categoryName":"string","description":"Converts a string into Camel case format.","examples":[{"tag":"example","name":"camelCase('camel","optional":false,"description":"case');\n// => 'camelCase'","source":"camelCase('camel case');\n// => 'camelCase'"}],"name":"camelCase","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be converted into Camel case.","source":"{string} string - String to be converted into Camel case."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"Converted string in Camel case.","source":"{string} - Converted string in Camel case."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"kebabCase":{"categoryName":"string","description":"Converts a string into Kebab case format.","examples":[{"tag":"example","name":"kebabCase('kebab","optional":false,"description":"case');\n// => 'kebab-case'","source":"kebabCase('kebab case');\n// => 'kebab-case'"}],"name":"kebabCase","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be converted into Kebab case.","source":"{string} string - String to be converted into Kebab case."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"Converted string in Kebab case.","source":"{string} - Converted string in Kebab case."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"snakeCase":{"categoryName":"string","description":"Converts a string into snake case format.","examples":[{"tag":"example","name":"snakeCase('snake","optional":false,"description":"case');\n// => 'snake_case'","source":"snakeCase('snake case');\n// => 'snake_case'"}],"name":"snakeCase","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be converted into snake case.","source":"{string} string - String to be converted into snake case."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"Converted string in Snake case.","source":"{string} - Converted string in Snake case."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"replaceList":{"categoryName":"string","description":"Replaces all occurrences of strings in an array with a value.","examples":[{"tag":"example","name":"replaceList('Her","optional":false,"description":"name was user.', ['user'], 'Lucy');\n// => 'Her name was Lucy.'","source":"replaceList('Her name was user.', ['user'], 'Lucy');\n// => 'Her name was Lucy.'"}],"name":"replaceList","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be replaced.","source":"{string} string - String to be replaced."},{"tag":"param","type":"Array","name":"words","optional":false,"description":"- Strings to replace.","source":"{Array} words - Strings to replace."},{"tag":"param","type":"string","name":"value","optional":false,"description":"- The match replacement.","source":"{string} value - The match replacement."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"The string with the replacement.","source":"{string} - The string with the replacement."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"rawURLDecode":{"categoryName":"string","description":"Raw URL decoder.","examples":[{"tag":"example","name":"rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.');","optional":false,"description":"// => 'Lucy saw diamonds in the sky.'","source":"rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.');\n// => 'Lucy saw diamonds in the sky.'"}],"name":"rawURLDecode","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be replaced.","source":"{string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"Converted string into the decoded URI Component .","source":"{string} - Converted string into the decoded URI Component ."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"htmlEntities":{"categoryName":"string","description":"Replaced sensitive characters with their matching html entity.","examples":[{"tag":"example","name":"htmlEntities(`<script>console.log('Lucy","optional":false,"description":"& diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`"}],"name":"htmlEntities","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be replaced.","source":"{string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"Replaced","optional":false,"description":"string.","source":"{string} Replaced string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"sanitize":{"categoryName":"string","description":"Executes rawURLDecode followd by htmlEntities methods on a string.","examples":[{"tag":"example","name":"sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);","optional":false,"description":"// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`"}],"name":"sanitize","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be replaced.","source":"{string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"Replaced","optional":false,"description":"string.","source":"{string} Replaced string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"tokenize":{"categoryName":"string","description":"Break string by non-white space characters matches.","examples":[{"tag":"example","name":"tokenize('I","optional":false,"description":"am Lucy!');\n// => [\"I\", \"am\", \"Lucy!\"]","source":"tokenize('I am Lucy!');\n// => [\"I\", \"am\", \"Lucy!\"]"}],"name":"tokenize","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be broken up.","source":"{string} string - String to be broken up."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Array of words without white space characters.","source":"{Array} - Array of words without white space characters."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"words":{"description":"Break string into word matches.","examples":[{"tag":"example","name":"words('I","optional":false,"description":"am Lucy!');\n// => [\"I\", \"am\", \"Lucy\"]","source":"words('I am Lucy!');\n// => [\"I\", \"am\", \"Lucy\"]"}],"name":"words","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be broken up.","source":"{string} string - String to be broken up."}],"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Array of words with word characters only.","source":"{Array} - Array of words with word characters only."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"truncate":{"categoryName":"string","description":"Truncates the string, accounting for word placement and character count.","examples":[{"tag":"example","name":"truncate('Where","optional":false,"description":"is Lucy?', 2);\n// => 'Where is'","source":"truncate('Where is Lucy?', 2);\n// => 'Where is'"}],"name":"truncate","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be truncated.","source":"{string} string - String to be truncated."},{"tag":"param","type":"number","name":"maxLength","optional":false,"description":"- The desired max length of the string.","source":"{number} maxLength - The desired max length of the string."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"The mutated string.","source":"{string} - The mutated string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"truncateRight":{"categoryName":"string","description":"Truncates the string, accounting for word placement and character count from the right.","examples":[{"tag":"example","name":"truncateRight('Where","optional":false,"description":"is Lucy?', 6);\n// => 'Lucy?'","source":"truncateRight('Where is Lucy?', 6);\n// => 'Lucy?'"}],"name":"truncateRight","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be truncated.","source":"{string} string - String to be truncated."},{"tag":"param","type":"number","name":"maxLength","optional":false,"description":"- The desired max length of the string.","source":"{number} maxLength - The desired max length of the string."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"The mutated string.","source":"{string} - The mutated string."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperFirstLetter":{"categoryName":"string","description":"Returns the first letter capitalized.","examples":[{"tag":"example","name":"upperFirstLetter('upper');","optional":false,"description":"// => \"U\"","source":"upperFirstLetter('upper');\n// => \"U\""}],"name":"upperFirstLetter","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to extract first letter from.","source":"{string} string - String to extract first letter from."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"An upper case letter.","source":"{string} - An upper case letter."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperFirst":{"categoryName":"string","description":"Capitalizes the first letter.","examples":[{"tag":"example","name":"upperFirst('upper');","optional":false,"description":"// => 'Upper'","source":"upperFirst('upper');\n// => 'Upper'"}],"name":"upperFirst","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be mutated.","source":"{string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"String with first letter capitalized.","source":"{string} - String with first letter capitalized."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperFirstAll":{"categoryName":"string","description":"Capitalize all first letters.","examples":[{"tag":"example","name":"upperFirstAll('Lucy","optional":false,"description":"is next up.');\n// => 'Lucy Is Next Up.'","source":"upperFirstAll('Lucy is next up.');\n// => 'Lucy Is Next Up.'"}],"name":"upperFirstAll","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be mutated.","source":"{string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"String with all first letters capitalized.","source":"{string} - String with all first letters capitalized."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperFirstOnly":{"categoryName":"string","description":"Capitalize first letter and lower case the rest.","examples":[{"tag":"example","name":"upperFirstOnly('LYSERGIC","optional":false,"description":"ACID DIETHYLAMIDE');\n// => 'Lysergic acid diethylamide'","source":"upperFirstOnly('LYSERGIC ACID DIETHYLAMIDE');\n// => 'Lysergic acid diethylamide'"}],"name":"upperFirstOnly","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be mutated.","source":"{string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"String with first letter capitalized.","source":"{string} - String with first letter capitalized."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"upperFirstOnlyAll":{"categoryName":"string","description":"Capitalize all first letters and lower case the rest.","examples":[{"tag":"example","name":"upperFirstOnlyAll('LYSERGIC","optional":false,"description":"ACID DIETHYLAMIDE');\n// => 'Lysergic Acid Diethylamide'","source":"upperFirstOnlyAll('LYSERGIC ACID DIETHYLAMIDE');\n// => 'Lysergic Acid Diethylamide'"}],"name":"upperFirstOnlyAll","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be mutated.","source":"{string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"string"},"returns":{"tag":"returns","type":"string","name":"-","optional":false,"description":"String with all first letters capitalized.","source":"{string} - String with all first letters capitalized."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"assignDeep":{"categoryName":"utility","description":"Creates new object with deeply assigned values from another object/array.","examples":[{"tag":"example","name":"assignDeep({a:1},","optional":false,"description":"{b:2})\n// => {a:1, b:2}","source":"assignDeep({ a: 1 }, { b: 2 });\n// => {a:1, b:2}"}],"name":"assignDeep","params":[{"tag":"param","type":"Object","name":"object","optional":false,"description":"- Object to be assigned new properties.","source":"{Object} object - Object to be assigned new properties."},{"tag":"param","type":"Object","name":"otherObject","optional":false,"description":"- Object from which properties are extracted.","source":"{Object} otherObject - Object from which properties are extracted."},{"tag":"param","type":"boolean","name":"mergeArrays","optional":true,"default":"true","description":"- Array from which items are assigned to the new object.","source":"{boolean} [mergeArrays = true] - Array from which items are assigned to the new object."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"Returns object with the newly assigned properties.","source":"{Object} - Returns object with the newly assigned properties."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"cacheNativeMethod":{"categoryName":"utility","description":"Caches a prototype method.","examples":[{"tag":"example","name":"cacheNativeMethod(Array.prototype.push)([],","optional":false,"description":"1);\n// => 1","source":"cacheNativeMethod(Array.prototype.push)([], 1);\n// => 1"}],"name":"cacheNativeMethod","params":[{"tag":"param","type":"Function","name":"method","optional":false,"description":"- Prototype method.","source":"{Function} method - Prototype method."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Function","name":"-","optional":false,"description":"Cached method.","source":"{Function} - Cached method."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"ifNotEqual":{"categoryName":"utility","description":"Checks if a property on an object has a value. If not, it will assign a value.","examples":[{"tag":"example","name":"ifNotEqual({},","optional":false,"description":"'a', 1);\n// => {a:1}","source":"ifNotEqual({}, 'a', 1);\n// => {a:1}"}],"name":"ifNotEqual","params":[{"tag":"param","type":"Object","name":"rootObject","optional":false,"description":"- The object to check.","source":"{Object} rootObject - The object to check."},{"tag":"param","type":"string","name":"property","optional":false,"description":"- The property name which is to be checked.","source":"{string} property - The property name which is to be checked."},{"tag":"param","type":"*","name":"equalThis","optional":false,"description":"- The reassignment value for the property being checked.","source":"{*} equalThis - The reassignment value for the property being checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"Returns the provided rootObject.","source":"{Object} - Returns the provided rootObject."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"isEqual":{"categoryName":"utility","description":"Performs a deep comparison between two objects.","examples":[{"tag":"example","name":"isEqual({a:","optional":false,"description":"[1,2,3]}, {a: [1,2,3]});\n// => true","source":"isEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] });\n// => true"}],"name":"isEqual","params":[{"tag":"param","type":"Object","name":"source","optional":false,"description":"- Source object.","source":"{Object} source - Source object."},{"tag":"param","type":"Object","name":"compareObject","optional":false,"description":"- Object to compare to source.","source":"{Object} compareObject - Object to compare to source."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"boolean","name":"Returns","optional":false,"description":"the true or false.","source":"{boolean} Returns the true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"propertyMatch":{"categoryName":"utility","description":"Using a deep comparison it checks if properties of two objects using an array are equal.","examples":[{"tag":"example","name":"propertyMatch({","optional":false,"description":"a: 1,\nb: 2\n}, {\na: 1,\nb: 2\n}, ['a', 'b']);\n// => true","source":"propertyMatch(\n\t{\n\t\ta: 1,\n\t\tb: 2\n\t},\n\t{\n\t\ta: 1,\n\t\tb: 2\n\t},\n\t['a', 'b']\n);\n// => true"}],"name":"propertyMatch","category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"property":{"tag":"property","type":"Object","name":"-","optional":false,"description":"takes an object.","source":"{Object} - takes an object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"toPath":{"categoryName":"utility","description":"Breaks up string into object chain list.","examples":[{"tag":"example","name":"toPath('post.like[2]');","optional":false,"description":"// => ['post', 'like', '2']","source":"toPath('post.like[2]');\n// => ['post', 'like', '2']"}],"name":"toPath","params":[{"tag":"param","type":"string","name":"string","optional":false,"description":"- String to be broken up.","source":"{string} string - String to be broken up."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Array","name":"-","optional":false,"description":"Array used to go through object chain.","source":"{Array} - Array used to go through object chain."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"uid":{"categoryName":"utility","description":"Creates a numerical unique ID and recycles old ones. UID numerically ascends however freed UIDs are later reused.","examples":[{"tag":"example","name":"uid();","optional":false,"description":"// => 0\nuid();\n// => 1","source":"uid();\n// => 0uid();"}],"name":"uid","category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nreturn await assert(uid(), 0) && await assert(uid(), 1);\n});","source":"(async () => {\nreturn await assert(uid(), 0) && await assert(uid(), 1);\n});"},"returns":{"tag":"returns","type":"number","name":"-","optional":false,"description":"Returns a unique id.","source":"{number} - Returns a unique id."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"free":{"description":"Frees an UID so that it may be recycled for later use.","examples":[{"tag":"example","name":"uid();","optional":false,"description":"// => 0","source":"uid();\n// => 0"},{"tag":"example","name":"uid();","optional":false,"description":"// => 1","source":"uid();\n// => 1"},{"tag":"example","name":"uid.free(0);","optional":false,"description":"// => undefined","source":"uid.free(0);\n// => undefined"},{"tag":"example","name":"uid();","optional":false,"description":"// => 0","source":"uid();\n// => 0"}],"name":"free","params":[{"tag":"param","type":"number","name":"id","optional":false,"description":"- Number to be freed.","source":"{number} id - Number to be freed."}],"test":{"tag":"test","name":"(async","optional":false,"description":"() => {\nreturn await assert(uid(), 0) &&\nawait assert(uid(), 1) &&\nawait assert(uid.free(0), undefined) &&\nawait assert(uid(), 0);\n});","source":"(async () => {\nreturn await assert(uid(), 0) &&\nawait assert(uid(), 1) &&\nawait assert(uid.free(0), undefined) &&\nawait assert(uid(), 0);\n});"},"memberof":{"tag":"memberof","name":"uid","optional":false,"source":"uid"},"returns":{"tag":"returns","type":"undefined","name":"-","optional":false,"description":"Nothing is returned.","source":"{undefined} - Nothing is returned."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"get":{"categoryName":"utility","description":"Returns property on an object.","examples":[{"tag":"example","name":"get('post.like[2]',","optional":false,"description":"{\npost: {\nlike: ['a','b','c']\n}\n});\n// => 'c'","source":"get('post.like[2]', {\n\tpost: {\n\t\tlike: ['a', 'b', 'c']\n\t}\n});\n// => 'c'"}],"name":"get","params":[{"tag":"param","type":"string","name":"propertyString","optional":false,"description":"- String used to retrieve properties.","source":"{string} propertyString - String used to retrieve properties."},{"tag":"param","type":"Object","name":"objectChain","optional":false,"description":"- Object which has a property retrieved from it.","source":"{Object} objectChain - Object which has a property retrieved from it."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Object","name":"-","optional":false,"description":"Returns property from the given object.","source":"{Object} - Returns property from the given object."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"model":{"categoryName":"utility","description":"Set & Get a model.","examples":[{"tag":"example","name":"model('test',","optional":false,"description":"{a: 1}) && model('test');\n// => {a: 1}","source":"model('test', { a: 1 }) && model('test');\n// => {a: 1}"}],"name":"model","params":[{"tag":"param","type":"string","name":"modelName","optional":false,"description":"- Name of the model.","source":"{string} modelName - Name of the model."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"property":{"tag":"property","type":"Object","name":"-","optional":false,"description":"The model object.","source":"{Object} - The model object."},"returns":{"tag":"returns","type":"*","name":"Returns","optional":false,"description":"the associated model.","source":"{*} Returns the associated model."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"toggle":{"categoryName":"utility","description":"Performs a toggle between 2 values using a deep or strict comparison.","examples":[{"tag":"example","name":"toggle(1,","optional":false,"description":"2, 3);\n// => 2","source":"toggle(1, 2, 3);\n// => 2"}],"name":"toggle","params":[{"tag":"param","type":"string|number|Object|Array","name":"value","optional":false,"description":"- Strictly compared against the on argument.","source":"{string|number|Object|Array} value - Strictly compared against the on argument."},{"tag":"param","type":"string|number|Object|Array","name":"on","optional":false,"description":"-  Strictly compared against the value argument.","source":"{string|number|Object|Array} on -  Strictly compared against the value argument."},{"tag":"param","type":"string|number|Object|Array","name":"off","optional":false,"description":"-  Value to be returned.","source":"{string|number|Object|Array} off -  Value to be returned."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"string|number|Object|Array","name":"-","optional":false,"description":"The opposing value to the current.","source":"{string|number|Object|Array} - The opposing value to the current."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flow":{"categoryName":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","name":"flow(increment,","optional":false,"description":"increment, deduct)(0);\n// => 1","source":"flow(increment, increment, deduct)(0);\n// => 1"}],"name":"flow","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Methods to invoke.","source":"{Array} collection - Methods to invoke."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new composite function.","source":"{Function} Returns the new composite function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flowRight":{"categoryName":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","name":"flowRight(increment,","optional":false,"description":"increment, deduct)(0);\n// => 1","source":"flowRight(increment, increment, deduct)(0);\n// => 1"}],"name":"flowRight","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Methods to invoke.","source":"{Array} collection - Methods to invoke."}],"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new composite function.","source":"{Function} Returns the new composite function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flowAsync":{"categoryName":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","name":"flowAsync(async","optional":false,"description":"(item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n// => 2","source":"flowAsync(\n\tasync (item) => {\n\t\treturn increment(item);\n\t},\n\tasync (item) => {\n\t\treturn increment(item);\n\t}\n)(0);\n// => 2"}],"name":"flowAsync","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Methods to invoke.","source":"{Array} collection - Methods to invoke."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new composite function.","source":"{Function} Returns the new composite function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}},"flowAsyncRight":{"categoryName":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","name":"flowAsyncRight(async","optional":false,"description":"(item) => {return increment(item);}, async (item) => {return increment(item);})(0);\n// => 2","source":"flowAsyncRight(\n\tasync (item) => {\n\t\treturn increment(item);\n\t},\n\tasync (item) => {\n\t\treturn increment(item);\n\t}\n)(0);\n// => 2"}],"name":"flowAsyncRight","params":[{"tag":"param","type":"Array","name":"collection","optional":false,"description":"- Methods to invoke.","source":"{Array} collection - Methods to invoke."}],"async":{"tag":"async","optional":false},"category":{"tag":"category","name":"utility","optional":false,"source":"utility"},"returns":{"tag":"returns","type":"Function","name":"Returns","optional":false,"description":"the new composite function.","source":"{Function} Returns the new composite function."},"type":{"tag":"type","type":"Function","optional":false,"source":"{Function}"}}}}