window.docMap = {"categories":[{"categoryName":"array","items":["arrayToObject","asyncEach","chunk","clear","cloneArray","compact","compactMapArray","compactMapAsync","difference","drop","dropRight","eachArray","eachArrayRight","eachAsync","eachAsyncRight","ensureArray","filterArray","first","flatten","flattenDeep","initial","intersect","isMatchArray","largest","last","mapArray","mapArrayRight","mapAsync","mapWhile","numSort","partition","rNumSort","remove","removeBy","rest","right","sample","shuffle","smallest","sortedIndex","sum","take","takeRight","times","timesMap","toArray","unZip","union","unique","whileArray","whileCompactMap","whileEachArray","whileMapArray","without","xor","zip"]},{"categoryName":"browser","items":["crate","crate.clear","crate.getItem","crate.removeItem","crate.setItem","eventAdd","eventRemove","importjs","isAgent","isEnter","virtualStorage","virtualStorage.clear","virtualStorage.getItem","virtualStorage.removeItem","virtualStorage.setItem"]},{"categoryName":"class","items":["construct"]},{"categoryName":"collection","items":["countBy","countKey","countWithoutKey","findIndex","findItem","getNewest","getOldest","groupBy","indexBy","invoke","invokeAsync","pluck","pluckValues","sortAlphabetical","sortNewest","sortOldest"]},{"categoryName":"function","items":["after","apply","ary","before","bindAll","chain","clearIntervals","clearTimers","curry","debounce","every","ifInvoke","inAsync","inSync","interval","negate","noop","nthArg","once","over","overEvery","reArg","stubArray","stubFalse","stubObject","stubString","stubTrue","throttle","timer","wrap"]},{"categoryName":"number","items":["add","deduct","divide","increment","isNumberEqual","isNumberInRange","isZero","minus","multiply","randomArbitrary","randomInt","remainder"]},{"categoryName":"object","items":["assign","compactKeys","compactMapObject","compactMapObjectAsync","defineProperty","eachObject","eachObjectAsync","filterObject","getOwnPropertyDescriptor","getOwnPropertyNames","hasAnyKeys","hasKeys","invert","is","isMatchObject","keys","mapObject","mapObjectAsync","objectSize","omit","pick","pluckObject","unZipObject","whileObject","zipObject"]},{"categoryName":"string","items":["camelCase","chunkString","htmlEntities","initialString","insertInRange","kebabCase","rawURLDecode","replaceList","restString","rightString","sanitize","snakeCase","tokenize","truncate","truncateRight","upperCase","upperFirst","upperFirstAll","upperFirstLetter","upperFirstOnly","upperFirstOnlyAll"]},{"categoryName":"utility","items":["assignDeep","assignDeep","cacheNativeMethod","compactMap","each","eachWhile","filter","flow","flowAsync","flowAsyncRight","flowRight","get","getFileExtension","has","hasDot","hasLength","hasValue","ifNotEqual","isArguments","isArray","isArrayBuffer","isAsync","isBoolean","isDate","isDecimal","isEmpty","isEqual","isFileCSS","isFileHTML","isFileJS","isFileJSON","isFloat32Array","isFloat64Array","isFunction","isInt16Array","isInt32Array","isInt8Array","isKindAsync","isMap","isNull","isNumber","isPlainObject","isPrimitive","isPromise","isRegExp","isSet","isString","isUint16Array","isUint32Array","isUint8Array","isUint8ClampedArray","isUndefined","isWeakMap","jsonParse","map","model","promise","propertyMatch","stringify","toPath","toggle","uid","uid.free"]}],"items":{"toArray":{"categoryName":"array","description":"Takes an array like object and creates a new Array from it.","examples":[{"tag":"example","optional":false,"description":"toArray([1, 2, 3]); // => [1, 2, 3]","source":"toArray([1, 2, 3]);\n// => [1, 2, 3]\n"}],"name":"toArray","params":[{"tag":"param","name":"arrayLike","type":"*","optional":false,"description":"- Array like object.","source":"*  {*} arrayLike - Array like object."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"new array.","source":"*  {*} - new array.\n\t *"}},"apply":{"categoryName":"function","description":"Calls a target function with arguments as specified.","examples":[{"tag":"example","optional":false,"description":"apply(function (a) {return a;}, undefined, [2]); // => 2","source":"apply(\n  function (a) {\n    return a;\n  },\n  undefined,\n  [2]\n);\n// => 2\n"}],"name":"apply","params":[{"tag":"param","name":"target","type":"Function","optional":false,"description":"- The target function to call.","source":"*  {Function} target - The target function to call."},{"tag":"param","name":"thisArgument","type":"*","optional":false,"description":"- Array like object.","source":"*  {*} thisArgument - Array like object."},{"tag":"param","name":"argumentsList","type":"Array","optional":false,"description":"- An array-like object specifying the arguments with which target should be called.","source":"*  {Array} argumentsList - An array-like object specifying the arguments with which target should be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"The result of calling the given target function with the specified this value and arguments.","source":"*  {*} - The result of calling the given target function with the specified this value and arguments.\n\t *"}},"keys":{"categoryName":"object","description":"Get object's keys.","examples":[{"tag":"example","optional":false,"description":"keys({a: 1, b: 2}); // => ['a', 'b']","source":"keys({ a: 1, b: 2 });\n// => ['a', 'b']\n"}],"name":"keys","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object to pull keys from.","source":"*  {*} source - The source object to pull keys from."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of keys.","source":"*  {Array} - Array of keys.\n\t *"}},"is":{"categoryName":"object","description":"Determines whether two values are the same value.","examples":[{"tag":"example","optional":false,"description":"is('foo', 'foo'); // => true","source":"is(\"foo\", \"foo\");\n// => true\n"}],"name":"is","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Value to compare to.","source":"*  {*} source - Value to compare to."},{"tag":"param","name":"target","type":"*","optional":false,"description":"- A value to compare.","source":"*  {*} target - A value to compare."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"A Boolean indicating whether or not the two arguments are the same value.","source":"*  {Boolean} - A Boolean indicating whether or not the two arguments are the same value.\n\t *"}},"assign":{"categoryName":"object","description":"Copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.","examples":[{"tag":"example","optional":false,"description":"assign({b: 2}, {a: 1}); // => {b: 2, a: 1}","source":"assign({ b: 2 }, { a: 1 });\n// => {b: 2, a: 1}\n"}],"name":"assign","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The target object.","source":"*  {Object} target - The target object."},{"tag":"param","name":"sources","type":"...Object","optional":false,"description":"- The source object(s).","source":"*  {...Object} sources - The source object(s)."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the target object.","source":"*  {Object} - Returns the target object.\n\t *"}},"getOwnPropertyDescriptor":{"categoryName":"object","description":"Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.","examples":[{"tag":"example","optional":false,"description":"getOwnPropertyDescriptor({ bar: 42 }, 'bar'); // => { configurable: true, enumerable: true, value: 42, writable: true }","source":"getOwnPropertyDescriptor({ bar: 42 }, \"bar\");\n// => { configurable: true, enumerable: true, value: 42, writable: true }\n"}],"name":"getOwnPropertyDescriptor","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The target object.","source":"*  {Object} target - The target object."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"*  {String} property - The name of the property whose description is to be retrieved."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A property descriptor of the given property if it exists on the object, undefined otherwise.","source":"*  {Object} - A property descriptor of the given property if it exists on the object, undefined otherwise.\n\t *"}},"defineProperty":{"categoryName":"object","description":"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.","examples":[{"tag":"example","optional":false,"description":"defineProperty({}, 'key', { enumerable: false, configurable: false, writable: false, value: 'static' }).key; // => 'static'","source":"defineProperty({}, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n}).key;\n// => 'static'\n"}],"name":"defineProperty","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The object on which to define the property.","source":"*  {Object} target - The object on which to define the property."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"*  {String} property - The name of the property whose description is to be retrieved."},{"tag":"param","name":"descriptor","type":"Object","optional":false,"description":"- The descriptor for the property being defined or modified.","source":"*  {Object} descriptor - The descriptor for the property being defined or modified."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The object that was passed to the function.","source":"*  {Object} - The object that was passed to the function.\n\t *"}},"getOwnPropertyNames":{"categoryName":"object","description":"Returns an array of all properties (enumerable or not) found directly upon a given object.","examples":[{"tag":"example","optional":false,"description":"getOwnPropertyNames({ 0: 'a', 1: 'b', 2: 'c' }); // => ['0', '1', '2']","source":"getOwnPropertyNames({ 0: \"a\", 1: \"b\", 2: \"c\" });\n// => ['0', '1', '2']\n"}],"name":"getOwnPropertyNames","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The object whose enumerable and non-enumerable own properties are to be returned.","source":"*  {Object} source - The object whose enumerable and non-enumerable own properties are to be returned."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array of strings that correspond to the properties found directly upon the given object.","source":"*  {Object} - An array of strings that correspond to the properties found directly upon the given object.\n\t *"}},"objectSize":{"categoryName":"object","description":"Returns the amount of keys on the object.","examples":[{"tag":"example","optional":false,"description":"objectSize({ 0: 'a', 1: 'b', 2: 'c' }); // => 3","source":"objectSize({ 0: \"a\", 1: \"b\", 2: \"c\" });\n// => 3\n"}],"name":"objectSize","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The target object.","source":"*  {Object} source - The target object."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The amount of keys.","source":"*  {number} - The amount of keys.\n\t *"}},"isUndefined":{"categoryName":"utility","description":"Checks if the value is undefined.","examples":[{"tag":"example","optional":false,"description":"isUndefined(undefined); // => true","source":"isUndefined(undefined);\n// => true\n"}],"name":"isUndefined","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isNull":{"categoryName":"utility","description":"Checks if the value is null.","examples":[{"tag":"example","optional":false,"description":"isNull(null); // => true","source":"isNull(null);\n// => true\n"}],"name":"isNull","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"hasValue":{"categoryName":"utility","description":"Checks if the value is not null or undefined.","examples":[{"tag":"example","optional":false,"description":"hasValue(1); // => true","source":"hasValue(1);\n// => true\n"}],"name":"hasValue","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isDecimal":{"categoryName":"utility","description":"Checks if the value is a decimal.","examples":[{"tag":"example","optional":false,"description":"isDecimal(1.01); // => true","source":"isDecimal(1.01);\n// => true\n"}],"name":"isDecimal","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isArray":{"categoryName":"utility","description":"Checks if the value is an array.","examples":[{"tag":"example","optional":false,"description":"isArray([]); // => true","source":"isArray([]);\n// => true\n"}],"name":"isArray","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isString":{"categoryName":"utility","description":"Checks if the value is a string.","examples":[{"tag":"example","optional":false,"description":"isString('Lucy'); // => true","source":"isString(\"Lucy\");\n// => true\n"}],"name":"isString","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isNumber":{"categoryName":"utility","description":"Checks if the value is a number.","examples":[{"tag":"example","optional":false,"description":"isNumber(1); // => true","source":"isNumber(1);\n// => true\n"}],"name":"isNumber","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isPlainObject":{"categoryName":"utility","description":"Checks if the value is a plain object.","examples":[{"tag":"example","optional":false,"description":"isPlainObject({}); // => true","source":"isPlainObject({});\n// => true\n"}],"name":"isPlainObject","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFunction":{"categoryName":"utility","description":"Checks if the value is a plain object.","examples":[{"tag":"example","optional":false,"description":"isFunction(() => {}); // => true","source":"isFunction(() => {});\n// => true\n"}],"name":"isFunction","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"has":{"categoryName":"utility","description":"Checks if the value includes something.","examples":[{"tag":"example","optional":false,"description":"has('My name is Acidjs', 'Acidjs'); // => true","source":"has(\"My name is Acidjs\", \"Acidjs\");\n// => true\n"}],"name":"has","params":[{"tag":"param","name":"value","type":"Array|String","optional":false,"description":"- Object to be checked.","source":"*  {Array|String} value - Object to be checked."},{"tag":"param","name":"search","type":"*","optional":false,"description":"- Object that is being searched for.","source":"*  {*} search - Object that is being searched for."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"hasLength":{"categoryName":"utility","description":"Checks if the value has length greater than 0.","examples":[{"tag":"example","optional":false,"description":"hasLength([1]); // => true","source":"hasLength([1]);\n// => true\n"}],"name":"hasLength","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isEmpty":{"categoryName":"utility","description":"Checks if the value is empty.","examples":[{"tag":"example","optional":false,"description":"isEmpty([]); // => true","source":"isEmpty([]);\n// => true\n"}],"name":"isEmpty","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFileCSS":{"categoryName":"utility","description":"Checks if the string has a .css extension.","examples":[{"tag":"example","optional":false,"description":"isFileCSS('test.css'); // => true","source":"isFileCSS(\"test.css\");\n// => true\n"}],"name":"isFileCSS","params":[{"tag":"param","name":"value","type":"string","optional":false,"description":"- Object to be checked.","source":"*  {string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFileJSON":{"categoryName":"utility","description":"Checks if the string has a .json extension.","examples":[{"tag":"example","optional":false,"description":"isFileJSON('test.json'); // => true","source":"isFileJSON(\"test.json\");\n// => true\n"}],"name":"isFileJSON","params":[{"tag":"param","name":"value","type":"string","optional":false,"description":"- Object to be checked.","source":"*  {string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFileJS":{"categoryName":"utility","description":"Checks if the string has a .js extension.","examples":[{"tag":"example","optional":false,"description":"isFileJS('test.js'); // => true","source":"isFileJS(\"test.js\");\n// => true\n"}],"name":"isFileJS","params":[{"tag":"param","name":"value","type":"string","optional":false,"description":"- Object to be checked.","source":"*  {string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFileHTML":{"categoryName":"utility","description":"Checks if the string has a .html extension.","examples":[{"tag":"example","optional":false,"description":"isFileHTML('test.html'); // => true","source":"isFileHTML(\"test.html\");\n// => true\n"}],"name":"isFileHTML","params":[{"tag":"param","name":"value","type":"string","optional":false,"description":"- Object to be checked.","source":"*  {string} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"hasDot":{"categoryName":"utility","description":"Checks if the string has a '.'.","examples":[{"tag":"example","optional":false,"description":"hasDot('test.js'); // => true","source":"hasDot(\"test.js\");\n// => true\n"}],"name":"hasDot","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"getFileExtension":{"categoryName":"utility","description":"Return the file extension.","examples":[{"tag":"example","optional":false,"description":"getFileExtension('test.js'); // => 'js'","source":"getFileExtension(\"test.js\");\n// => 'js'\n"}],"name":"getFileExtension","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Returns the extension.","source":"*  {string} - Returns the extension.\n\t *"}},"isRegExp":{"categoryName":"utility","description":"Checks if the value is a RegExp.","examples":[{"tag":"example","optional":false,"description":"isRegExp(/test/); // => true","source":"isRegExp(/test/);\n// => true\n"}],"name":"isRegExp","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isArguments":{"categoryName":"utility","description":"Checks if the value is an Arguments object.","examples":[{"tag":"example","optional":false,"description":"isArguments([]); // => false","source":"isArguments([]);\n// => false\n"}],"name":"isArguments","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isBoolean":{"categoryName":"utility","description":"Checks if the value is a Boolean.","examples":[{"tag":"example","optional":false,"description":"isBoolean(true); // => true","source":"isBoolean(true);\n// => true\n"}],"name":"isBoolean","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isDate":{"categoryName":"utility","description":"Checks if the value is a Date.","examples":[{"tag":"example","optional":false,"description":"isDate(new Date()); // => true","source":"isDate(new Date());\n// => true\n"}],"name":"isDate","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isPromise":{"categoryName":"utility","description":"Checks if an object is a promise.","examples":[{"tag":"example","optional":false,"description":"isPromise(new Promise(() => {})); // => true","source":"isPromise(new Promise(() => {}));\n// => true\n"}],"name":"isPromise","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"True or false.","source":"*  {boolean} - True or false.\n\t *"}},"isAsync":{"categoryName":"utility","description":"Checks if an object is an async function.","examples":[{"tag":"example","optional":false,"description":"isAsync(async() => {}); // => true","source":"isAsync(async () => {});\n// => true\n"}],"name":"isAsync","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"True or false.","source":"*  {boolean} - True or false.\n\t *"}},"isKindAsync":{"categoryName":"utility","description":"Checks if an object is an async function or promise.","examples":[{"tag":"example","optional":false,"description":"isKindAsync(async() => {}); // => true isKindAsync(new Promise(() => {})); // => true","source":"isKindAsync(async () => {});\n// => true isKindAsync(new Promise(() => {})); // => true\n"}],"name":"isKindAsync","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"True or false.","source":"*  {boolean} - True or false.\n\t *"}},"isPrimitive":{"categoryName":"utility","description":"Checks if an object is a primitive.","examples":[{"tag":"example","optional":false,"description":"isPrimitive(1); // => true","source":"isPrimitive(1);\n// => true\n"},{"tag":"example","optional":false,"description":"isPrimitive(() => {}); // => false","source":"isPrimitive(() => {});\n// => false\n"}],"name":"isPrimitive","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} value - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"True or false.","source":"*  {boolean} - True or false.\n\t *"}},"isMap":{"categoryName":"utility","description":"Checks if the source is a Map.","examples":[{"tag":"example","optional":false,"description":"isMap(new Map()); // => true","source":"isMap(new Map());\n// => true\n"}],"name":"isMap","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isSet":{"categoryName":"utility","description":"Checks if the source is a Set.","examples":[{"tag":"example","optional":false,"description":"isSet(new Set()); // => true","source":"isSet(new Set());\n// => true\n"}],"name":"isSet","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isWeakMap":{"categoryName":"utility","description":"Checks if the source is a WeakMap.","examples":[{"tag":"example","optional":false,"description":"isWeakMap(new WeakMap()); // => true","source":"isWeakMap(new WeakMap());\n// => true\n"}],"name":"isWeakMap","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isArrayBuffer":{"categoryName":"utility","description":"Checks if the source is a ArrayBuffer.","examples":[{"tag":"example","optional":false,"description":"isArrayBuffer(new ArrayBuffer()); // => true","source":"isArrayBuffer(new ArrayBuffer());\n// => true\n"}],"name":"isArrayBuffer","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFloat32Array":{"categoryName":"utility","description":"Checks if the source is a Float32Array.","examples":[{"tag":"example","optional":false,"description":"isFloat32Array(new Float32Array()); // => true","source":"isFloat32Array(new Float32Array());\n// => true\n"}],"name":"isFloat32Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isFloat64Array":{"categoryName":"utility","description":"Checks if the source is a Float64Array.","examples":[{"tag":"example","optional":false,"description":"isFloat64Array(new Float64Array()); // => true","source":"isFloat64Array(new Float64Array());\n// => true\n"}],"name":"isFloat64Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isInt8Array":{"categoryName":"utility","description":"Checks if the source is a Int8Array.","examples":[{"tag":"example","optional":false,"description":"isInt8Array(new Int8Array()); // => true","source":"isInt8Array(new Int8Array());\n// => true\n"}],"name":"isInt8Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isInt16Array":{"categoryName":"utility","description":"Checks if the source is a Int16Array.","examples":[{"tag":"example","optional":false,"description":"isInt16Array(new Int16Array()); // => true","source":"isInt16Array(new Int16Array());\n// => true\n"}],"name":"isInt16Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isInt32Array":{"categoryName":"utility","description":"Checks if the source is a Int32Array.","examples":[{"tag":"example","optional":false,"description":"isInt32Array(new Int32Array()); // => true","source":"isInt32Array(new Int32Array());\n// => true\n"}],"name":"isInt32Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isUint8Array":{"categoryName":"utility","description":"Checks if the source is a Uint8Array.","examples":[{"tag":"example","optional":false,"description":"isUint8Array(new Uint8Array()); // => true","source":"isUint8Array(new Uint8Array());\n// => true\n"}],"name":"isUint8Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isUint8ClampedArray":{"categoryName":"utility","description":"Checks if the source is a Uint8ClampedArray.","examples":[{"tag":"example","optional":false,"description":"isUint8ClampedArray(new Uint8ClampedArray()); // => true","source":"isUint8ClampedArray(new Uint8ClampedArray());\n// => true\n"}],"name":"isUint8ClampedArray","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isUint16Array":{"categoryName":"utility","description":"Checks if the source is a Uint16Array.","examples":[{"tag":"example","optional":false,"description":"isUint16Array(new Uint16Array()); // => true","source":"isUint16Array(new Uint16Array());\n// => true\n"}],"name":"isUint16Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"isUint32Array":{"categoryName":"utility","description":"Checks if the source is a Uint32Array.","examples":[{"tag":"example","optional":false,"description":"isUint32Array(new Uint32Array()); // => true","source":"isUint32Array(new Uint32Array());\n// => true\n"}],"name":"isUint32Array","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"}},"asyncEach":{"categoryName":"array","description":"Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.","examples":[{"tag":"example","optional":false,"description":"asyncEach([async (item, index) =>{ console.log(item, index); }, async (item) =>{ console.log(item, index); }], {a:1}); // {a:1} 0 // {a:1} 1","source":"asyncEach(\n  [\n    async (item, index) => {\n      console.log(item, index);\n    },\n    async (item) => {\n      console.log(item, index);\n    },\n  ],\n  { a: 1 }\n); // {a:1} 0 // {a:1} 1\n"}],"name":"asyncEach","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array of async functions that will be looped through. Functions are given the supplied object, index, the calling array, and the array length.","source":"*  {Array} source - Array of async functions that will be looped through.\n\t * Functions are given the supplied object, index, the calling array, and the array length."},{"tag":"param","name":"firstArgument","type":"*","optional":false,"description":"- The first argument given to each function.","source":"*  {*} firstArgument - The first argument given to each function."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"Array","optional":false,"source":"*  Array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; await asyncEach([async (item, index) => { tempList.push(index); }, async (item, index) => { tempList.push(index); }], {a:1}); return assert(tempList, [0, 1]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   await asyncEach([async (item, index) => {\n\t *     tempList.push(index);\n\t *   }, async (item, index) => {\n\t *     tempList.push(index);\n\t *   }], {a:1});\n\t *   return assert(tempList, [0, 1]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"ensureArray":{"categoryName":"array","description":"Ensures the object is an array. If not wraps in array.","examples":[{"tag":"example","optional":false,"description":"ensureArray('Hello'); // => ['Hello']","source":"ensureArray(\"Hello\");\n// => ['Hello']\n"},{"tag":"example","optional":false,"description":"ensureArray({a:1, b:2}) // => [{a:1, b:2}]","source":"ensureArray({ a: 1, b: 2 });\n// => [{a:1, b:2}]\n"}],"name":"ensureArray","params":[{"tag":"param","name":"object","type":"*","optional":false,"description":"- Data to be checked.","source":"*  {*} object - Data to be checked."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flatten":{"categoryName":"array","description":"Flattens an array up to the provided level.","examples":[{"tag":"example","optional":false,"description":"flatten([1, [2, [3, [4]], 5]]); // => [1, 2, [3, [4]], 5]","source":"flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n"}],"name":"flatten","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to flatten.","source":"*  {Array} array - Array to flatten."},{"tag":"param","name":"level","type":"number","optional":true,"description":"- Number which determines how deep the array nest can be.","source":"*  {number} [level = 1] - Number which determines how deep the array nest can be.","default":"1"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flattenDeep":{"categoryName":"array","description":"Flattens an array to a single level.","examples":[{"tag":"example","optional":false,"description":"flattenDeep([1, [2, [3, [4]], 5]]); // => [1, 2, 3, 4, 5]","source":"flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n"}],"name":"flattenDeep","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to flatten.","source":"*  {Array} array - Array to flatten."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"remove":{"categoryName":"array","description":"Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","optional":false,"description":"remove([1, 2, 3, 3, 4, 3, 5], 1); // => [2, 3, 3, 4, 3, 5]","source":"remove([1, 2, 3, 3, 4, 3, 5], 1);\n// => [2, 3, 3, 4, 3, 5]\n"},{"tag":"example","optional":false,"description":"remove([3, 3, 4, 5], 3, 4); // => [5]","source":"remove([3, 3, 4, 5], 3, 4);\n// => [5]\n"}],"name":"remove","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be mutated.","source":"*  {Array} array - Array to be mutated."},{"tag":"param","name":"removeThese","type":"string|Array","optional":false,"description":"- Items to remove from the array.","source":"*  {string|Array} removeThese - Items to remove from the array."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"removeBy":{"categoryName":"array","description":"Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","optional":false,"description":"removeBy([1, 2, 3, 3, 4, 3, 5], (item) => { return Boolean(item % 2);}); // => [2, 4]","source":"removeBy([1, 2, 3, 3, 4, 3, 5], (item) => {\n  return Boolean(item % 2);\n});\n// => [2, 4]\n"}],"name":"removeBy","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be mutated.","source":"*  {Array} array - Array to be mutated."},{"tag":"param","name":"method","type":"Function","optional":false,"description":"- Function used to check object. Return true to remove the value.","source":"*  {Function} method - Function used to check object. Return true to remove the value."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"chunk":{"categoryName":"array","description":"Chunks an array according to a user defined number.","examples":[{"tag":"example","optional":false,"description":"chunk([1,2,3], 1); // => [[1],[2],[3]]","source":"chunk([1, 2, 3], 1);\n// => [[1],[2],[3]]\n"}],"name":"chunk","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be chunked.","source":"*  {Array} array - Array to be chunked."},{"tag":"param","name":"size","type":"number","optional":false,"description":"- Number which determines the size of each chunk.","source":"*  {number} size - Number which determines the size of each chunk."}],"category":{"tag":"category","name":"Array","optional":false,"source":"*  Array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"A chunked version of the source array.","source":"*  {Array} - A chunked version of the source array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"rest":{"categoryName":"array","description":"Extracts all items in array except the first and last item.","examples":[{"tag":"example","optional":false,"description":"rest([1, 2, 3, 4, 5]); // => [2, 3, 4, 5]","source":"rest([1, 2, 3, 4, 5]);\n// => [2, 3, 4, 5]\n"}],"name":"rest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be sliced.","source":"*  {Array} array - Array to be sliced."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the aggregated array.","source":"*  {Array} - Returns the aggregated array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"clear":{"categoryName":"array","description":"Clears the values out of an array.","examples":[{"tag":"example","optional":false,"description":"clear([1,'B', 'Cat']); // => []","source":"clear([1, \"B\", \"Cat\"]);\n// => []\n"}],"name":"clear","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Takes an array to be emptied.","source":"*  {Array} array - Takes an array to be emptied."}],"category":{"tag":"category","name":"Array","optional":false,"source":"*  Array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"right":{"categoryName":"array","description":"Get the item at the supplied index starting at the end of the array.","examples":[{"tag":"example","optional":false,"description":"right([1, 2, 3, 4, 5] , 1); // => 4","source":"right([1, 2, 3, 4, 5], 1);\n// => 4\n"}],"name":"right","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be sliced.","source":"*  {Array} array - Array to be sliced."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the object at the evaluated position.","source":"*  {*} - Returns the object at the evaluated position.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"cloneArray":{"categoryName":"array","description":"Clears the values out of an array.","examples":[{"tag":"example","optional":false,"description":"cloneArray([1,'B', 'Cat']); // => [1, 'B', 'Cat']","source":"cloneArray([1, \"B\", \"Cat\"]);\n// => [1, 'B', 'Cat']\n"}],"name":"cloneArray","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Takes an array to be cloned.","source":"*  {Array} array - Takes an array to be cloned."}],"category":{"tag":"category","name":"Array","optional":false,"source":"*  Array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"add":{"categoryName":"number","description":"Adds two numbers.","examples":[{"tag":"example","optional":false,"description":"add(1, 1); // => 2","source":"add(1, 1);\n// => 2\n"}],"name":"add","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."},{"tag":"param","name":"value","type":"number","optional":false,"description":"- Second number.","source":"*  {number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns the sum of the arguments.","source":"*  {number} - Returns the sum of the arguments.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"minus":{"categoryName":"number","description":"Subtracts two numbers.","examples":[{"tag":"example","optional":false,"description":"minus(1, 1); // => 0","source":"minus(1, 1);\n// => 0\n"}],"name":"minus","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."},{"tag":"param","name":"value","type":"number","optional":false,"description":"- Second number.","source":"*  {number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns the difference of the arguments.","source":"*  {number} - Returns the difference of the arguments.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"divide":{"categoryName":"number","description":"Divides two numbers.","examples":[{"tag":"example","optional":false,"description":"divide(10, 5); // => 2","source":"divide(10, 5);\n// => 2\n"}],"name":"divide","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."},{"tag":"param","name":"value","type":"number","optional":false,"description":"- Second number.","source":"*  {number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns the quotient of the arguments.","source":"*  {number} - Returns the quotient of the arguments.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"multiply":{"categoryName":"number","description":"Multiplies two numbers.","examples":[{"tag":"example","optional":false,"description":"multiply(10, 5); // => 50","source":"multiply(10, 5);\n// => 50\n"}],"name":"multiply","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."},{"tag":"param","name":"value","type":"number","optional":false,"description":"- Second number.","source":"*  {number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns the product of the arguments.","source":"*  {number} - Returns the product of the arguments.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"remainder":{"categoryName":"number","description":"Extracts the remainder between two numbers.","examples":[{"tag":"example","optional":false,"description":"remainder(10, 6); // => 4","source":"remainder(10, 6);\n// => 4\n"}],"name":"remainder","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."},{"tag":"param","name":"value","type":"number","optional":false,"description":"- Second number.","source":"*  {number} value - Second number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns the remainder of the arguments.","source":"*  {number} - Returns the remainder of the arguments.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"increment":{"categoryName":"number","description":"Increments a number.","examples":[{"tag":"example","optional":false,"description":"increment(10); // => 11","source":"increment(10);\n// => 11\n"}],"name":"increment","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns an incremented version of the number.","source":"*  {number} - Returns an incremented version of the number.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"deduct":{"categoryName":"number","description":"Decrements a number.","examples":[{"tag":"example","optional":false,"description":"deduct(10); // => 9","source":"deduct(10);\n// => 9\n"}],"name":"deduct","params":[{"tag":"param","name":"number","type":"number","optional":false,"description":"- First number.","source":"*  {number} number - First number."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns a decremented version of the number.","source":"*  {number} - Returns a decremented version of the number.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"randomArbitrary":{"categoryName":"number","description":"Produces a random number between min (included) and max (excluded).","examples":[{"tag":"example","optional":false,"description":"randomArbitrary(10); // => 9.1","source":"randomArbitrary(10);\n// => 9.1\n"}],"name":"randomArbitrary","params":[{"tag":"param","name":"max","type":"number","optional":false,"description":"- Establishes highest possible value for the random number.","source":"*  {number} max - Establishes highest possible value for the random number."},{"tag":"param","name":"min","type":"number","optional":true,"description":"- Establishes lowest possible value for the random number.","source":"*  {number} [min = 0] - Establishes lowest possible value for the random number.","default":"0"}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"test":{"tag":"test","optional":false,"description":"(async () => { return assert(isNumber(randomArbitrary(10)), true); });","source":"* \t * (async () => {\n\t *   return assert(isNumber(randomArbitrary(10)), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns random integer between the max and min range.","source":"*  {number} - Returns random integer between the max and min range.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"randomInt":{"categoryName":"number","description":"Produces a random integer between min (included) and max (excluded).","examples":[{"tag":"example","optional":false,"description":"randomInt(10); // => 9","source":"randomInt(10);\n// => 9\n"}],"name":"randomInt","params":[{"tag":"param","name":"max","type":"number","optional":false,"description":"- Establishes highest possible value for the random number.","source":"*  {number} max - Establishes highest possible value for the random number."},{"tag":"param","name":"min","type":"number","optional":true,"description":"- Establishes lowest possible value for the random number.","source":"*  {number} [min = 0] - Establishes lowest possible value for the random number.","default":"0"}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"test":{"tag":"test","optional":false,"description":"(async () => { return assert(isNumber(randomInt(10)), true); });","source":"* \t * (async () => {\n\t *   return assert(isNumber(randomInt(10)), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns random integer between the max and min range.","source":"*  {number} - Returns random integer between the max and min range.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"shuffle":{"categoryName":"array","description":"Shuffle an array and return a new array.","examples":[{"tag":"example","optional":false,"description":"shuffle([1, 2, 3, 4]); // => [3, 4, 2, 1]","source":"shuffle([1, 2, 3, 4]);\n// => [3, 4, 2, 1]\n"}],"name":"shuffle","params":[{"tag":"param","name":"target","type":"Array","optional":false,"description":"- Target Array to be shuffled.","source":"*  {Array} target - Target Array to be shuffled."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempResult = shuffle([1, 2]); return assert(tempResult.includes(1) && tempResult.includes(2), true); });","source":"* \t * (async () => {\n\t *   const tempResult = shuffle([1, 2]);\n\t *   return assert(tempResult.includes(1) && tempResult.includes(2), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with the shuffled results.","source":"*  {Array} - An array with the shuffled results.\n\t *"}},"sample":{"categoryName":"array","description":"Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.","examples":[{"tag":"example","optional":false,"description":"sample([1, 2, 3, 4] , 2); // => [1, 3]","source":"sample([1, 2, 3, 4], 2);\n// => [1, 3]\n"}],"name":"sample","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to pull sample(s).","source":"*  {Array} array - Array to pull sample(s)."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempResult = sample([1, 2] , 2); return assert(tempResult.includes(1) && tempResult.includes(2), true); });","source":"* \t * (async () => {\n\t *   const tempResult = sample([1, 2] , 2);\n\t *   return assert(tempResult.includes(1) && tempResult.includes(2), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of randomly pulled samples.","source":"*  {Array} - An array of randomly pulled samples.\n\t *"}},"compact":{"categoryName":"array","description":"Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.","examples":[{"tag":"example","optional":false,"description":"compact([1,'B', 'Cat', false, null, 0 , '', undefined, NaN]); // => [1, 'B', 'Cat']","source":"compact([1, \"B\", \"Cat\", false, null, 0, \"\", undefined, NaN]);\n// => [1, 'B', 'Cat']\n"}],"name":"compact","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be compacted.","source":"*  {Array} array - Array to be compacted."}],"category":{"tag":"category","name":"Array","optional":false,"source":"*  Array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The new array of filtered values.","source":"*  {Array} - The new array of filtered values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"initial":{"categoryName":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","optional":false,"description":"initial([1, 2, 3, 4, 5]); // => [1, 2, 3, 4]","source":"initial([1, 2, 3, 4, 5]);\n// => [1, 2, 3, 4]\n"}],"name":"initial","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} array - Array to have items extracted from."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"smallest":{"categoryName":"array","description":"Plucks the smallest value from an array.","examples":[{"tag":"example","optional":false,"description":"smallest([1,2,3]); // => 1","source":"smallest([1, 2, 3]);\n// => 1\n"}],"name":"smallest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array from which smallest number is taken.","source":"*  {Array} array - Array from which smallest number is taken."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The smallest number.","source":"*  {number} - The smallest number.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachArray":{"categoryName":"array","description":"Iterates through the given array.","examples":[{"tag":"example","optional":false,"description":"eachArray([1, 2, 3], (item) => { console.log(item); }); // => [1, 2, 3]","source":"eachArray([1, 2, 3], (item) => {\n  console.log(item);\n});\n// => [1, 2, 3]\n"}],"name":"eachArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; eachArray([1, 2, 3], (item) => { tempList.push(item); }); return assert(tempList, [1, 2, 3]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   eachArray([1, 2, 3], (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [1, 2, 3]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachArrayRight":{"categoryName":"array","description":"Iterates through the given array in reverse.","examples":[{"tag":"example","optional":false,"description":"eachArrayRight([1, 2, 3], (item) => { console.log(item); }); // => [1, 2, 3]","source":"eachArrayRight([1, 2, 3], (item) => {\n  console.log(item);\n});\n// => [1, 2, 3]\n"}],"name":"eachArrayRight","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; eachArrayRight([1, 2, 3], (item) => { tempList.push(item); }); return assert(tempList, [3, 2, 1]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   eachArrayRight([1, 2, 3], (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [3, 2, 1]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"whileArray":{"categoryName":"array","description":"Iterates through the given array while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"whileArray([true, true, false], (item) => { return item; }); // => false","source":"whileArray([true, true, false], (item) => {\n  return item;\n});\n// => false\n"}],"name":"whileArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true if all returns are true or false if one value returns false.","source":"*  {boolean} - Returns true if all returns are true or false if one value returns false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"filterArray":{"categoryName":"array","description":"Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"filterArray([false, true, true], (item) => { return item; }); // => [true, true]","source":"filterArray([false, true, true], (item) => {\n  return item;\n});\n// => [true, true]\n"}],"name":"filterArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created object, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results.","source":"*  {Array} [results = []] - Array that will be used to assign results.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array with properties that passed the test.","source":"*  {Object} - An array with properties that passed the test.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapArray":{"categoryName":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"mapArray([1, 2, 3], (item) => { return item * 2; }); // => [2, 4, 6]","source":"mapArray([1, 2, 3], (item) => {\n  return item * 2;\n});\n// => [2, 4, 6]\n"}],"name":"mapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results.","source":"*  {Array} [results = []] - Array that will be used to assign results.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array of the same calling array's type.","source":"*  {Object} - An array of the same calling array's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapArrayRight":{"categoryName":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.","examples":[{"tag":"example","optional":false,"description":"mapArrayRight([1, 2, 3], (item) => { return item * 2; }); // => [6, 4, 2]","source":"mapArrayRight([1, 2, 3], (item) => {\n  return item * 2;\n});\n// => [6, 4, 2]\n"}],"name":"mapArrayRight","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} [results = []] - Array that will be used to assign results. Default value is a new empty array.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array of the same calling array's type.","source":"*  {Object} - An array of the same calling array's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactMapArray":{"categoryName":"array","description":"Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"compactMapArray([null, 2, 3], (item) => { return item; }); // => [2, 3]","source":"compactMapArray([null, 2, 3], (item) => {\n  return item;\n});\n// => [2, 3]\n"}],"name":"compactMapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} [results = []] - Array that will be used to assign results. Default value is a new empty array.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array with mapped properties that are not null or undefined.","source":"*  {Object} - An array with mapped properties that are not null or undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapWhile":{"categoryName":"array","description":"Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"mapWhile([true, true, false], (item) => { return item; }); // => [true, true]","source":"mapWhile([true, true, false], (item) => {\n  return item;\n});\n// => [true, true]\n"}],"name":"mapWhile","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} [results = []] - Array that will be used to assign results. Default value is a new empty array.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with properties that passed the test.","source":"*  {Array} - An array with properties that passed the test.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"whileEachArray":{"categoryName":"array","description":"Iterates through the given array but re-checks the length each loop. Usefull while mutating the same array being looped over.","examples":[{"tag":"example","optional":false,"description":"whileEachArray([1, 2, 3], (item) => { console.log(item); }); // => [1, 2, 3]","source":"whileEachArray([1, 2, 3], (item) => {\n  console.log(item);\n});\n// => [1, 2, 3]\n"}],"name":"whileEachArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; whileEachArray([1, 2, 3], (item) => { tempList.push(item); }); return assert(tempList, [1, 2, 3]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   whileEachArray([1, 2, 3], (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [1, 2, 3]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"whileMapArray":{"categoryName":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array. Re-checks the length each loop.","examples":[{"tag":"example","optional":false,"description":"whileMapArray([1, 2, 3, false, null], (item) => { return item; }); // => [1, 2, 3, false, null]","source":"whileMapArray([1, 2, 3, false, null], (item) => {\n  return item;\n});\n// => [1, 2, 3, false, null]\n"}],"name":"whileMapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} [results = []] - Array that will be used to assign results. Default value is a new empty array.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; whileMapArray([1, 2, 3, false, null], (item) => { tempList.push(item); }); return assert(tempList, [1, 2, 3, false, null]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   whileMapArray([1, 2, 3, false, null], (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [1, 2, 3, false, null]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"whileCompactMap":{"categoryName":"array","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object. Re-checks the length each loop.","examples":[{"tag":"example","optional":false,"description":"whileCompactMap([1, 2, 3, false, undefined, null], (item) => { return item; }); // => [1, 2, 3, false]","source":"whileCompactMap([1, 2, 3, false, undefined, null], (item) => {\n  return item;\n});\n// => [1, 2, 3, false]\n"}],"name":"whileCompactMap","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} [results = []] - Array that will be used to assign results. Default value is a new empty array.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; whileCompactMap([1, 2, 3, false, undefined, null], (item) => { return item; }); return assert(tempList, [1, 2, 3, false]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   whileCompactMap([1, 2, 3, false, undefined, null], (item) => {\n\t *     return item;\n\t *   });\n\t *   return assert(tempList, [1, 2, 3, false]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"intersect":{"categoryName":"array","description":"Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory)) of the array and the input array(s).","examples":[{"tag":"example","optional":false,"description":"intersect([1, 2, 3], [2, 3, 4]); // => [2, 3]","source":"intersect([1, 2, 3], [2, 3, 4]);\n// => [2, 3]\n"},{"tag":"example","optional":false,"description":"intersect([1, 2, 3], [101, 2, 50, 1], [2, 1]); // => [1, 2]","source":"intersect([1, 2, 3], [101, 2, 50, 1], [2, 1]);\n// => [1, 2]\n"}],"name":"intersect","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to compare other arrays to.","source":"*  {Array} array - Array to compare other arrays to."},{"tag":"param","name":"arrays","type":"...Array","optional":false,"description":"- A variable number of arrays.","source":"*  {...Array} arrays - A variable number of arrays."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The new array of unique values shared by all of the arrays.","source":"*  {Array} - The new array of unique values shared by all of the arrays.\n\t *"}},"difference":{"categoryName":"array","description":"Checks for differences between arrays, then creates an array based on those differences.","examples":[{"tag":"example","optional":false,"description":"difference([1, 2, 3], [1, 2]); // => [3]","source":"difference([1, 2, 3], [1, 2]);\n// => [3]\n"}],"name":"difference","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} array - Source array."},{"tag":"param","name":"compare","type":"Array","optional":false,"description":"- Array source array is compared against.","source":"*  {Array} compare - Array source array is compared against."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array which contains the differences between the source and compare array.","source":"*  {Array} - An array which contains the differences between the source and compare array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"drop":{"categoryName":"array","description":"Removes all items from an array after a specified index.","examples":[{"tag":"example","optional":false,"description":"drop([1, 2, 3], 1); // => [2, 3]","source":"drop([1, 2, 3], 1);\n// => [2, 3]\n"}],"name":"drop","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} array - Source array."},{"tag":"param","name":"amount","type":"number","optional":false,"description":"- Amount of items to drop from the array.","source":"*  {number} amount - Amount of items to drop from the array."},{"tag":"param","name":"upTo","type":"number","optional":true,"description":"- Index to stop at.","source":"*  {number} [upTo = array.length] - Index to stop at.","default":"array.length"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with all values removed after a user defined index.","source":"*  {Array} - An array with all values removed after a user defined index.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"dropRight":{"categoryName":"array","description":"Removes all items from an array before a specified index.","examples":[{"tag":"example","optional":false,"description":"dropRight([1, 2, 3], 1); // => [1, 2]","source":"dropRight([1, 2, 3], 1);\n// => [1, 2]\n"}],"name":"dropRight","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} array - Source array."},{"tag":"param","name":"amount","type":"number","optional":false,"description":"- Amount of items to drop from the array.","source":"*  {number} amount - Amount of items to drop from the array."},{"tag":"param","name":"upTo","type":"number","optional":true,"description":"- Index to stop at.","source":"*  {number} [upTo = array.length] - Index to stop at.","default":"array.length"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with all values removed before a user defined index.","source":"*  {Array} - An array with all values removed before a user defined index.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isMatchArray":{"categoryName":"array","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","optional":false,"description":"isMatchArray([1, 2, 3], [1, 2, 3]); // => true","source":"isMatchArray([1, 2, 3], [1, 2, 3]);\n// => true\n"}],"name":"isMatchArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Source object.","source":"*  {Array} source - Source object."},{"tag":"param","name":"compareArray","type":"Array","optional":false,"description":"- Object to compare to source.","source":"*  {Array} compareArray - Object to compare to source."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sortedIndex":{"categoryName":"array","description":"Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.","examples":[{"tag":"example","optional":false,"description":"sortedIndex([30, 50], 40); // => 1","source":"sortedIndex([30, 50], 40);\n// => 1\n"}],"name":"sortedIndex","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be sorted.","source":"*  {Array} array - Array to be sorted."},{"tag":"param","name":"insertThis","type":"number","optional":false,"description":"- Number to be inserted.","source":"*  {number} insertThis - Number to be inserted."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The index at which to insert.","source":"*  {number} - The index at which to insert.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"largest":{"categoryName":"array","description":"Plucks the largest value from an array.","examples":[{"tag":"example","optional":false,"description":"largest([1,2,3]); // => 3","source":"largest([1, 2, 3]);\n// => 3\n"}],"name":"largest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array from which largest number is taken.","source":"*  {Array} array - Array from which largest number is taken."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The largest number.","source":"*  {number} - The largest number.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sum":{"categoryName":"array","description":"Reduces the values in an array into a single number.","examples":[{"tag":"example","optional":false,"description":"sum([1, 2, 3, 4]); // => 10","source":"sum([1, 2, 3, 4]);\n// => 10\n"}],"name":"sum","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be reduced.","source":"*  {Array} array - Array to be reduced."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns a single value.","source":"*  {number} - Returns a single value.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachAsync":{"categoryName":"array","description":"Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","optional":false,"description":"eachAsync([3,4], async (item, index) =>{ console.log(item, index); }); // 3 0 // 4 1","source":"eachAsync([3, 4], async (item, index) => {\n  console.log(item, index);\n}); // 3 0 // 4 1\n"}],"name":"eachAsync","params":[{"tag":"param","name":"callingArray","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} callingArray - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; await eachAsync([1, 2, 3], async (item) => { tempList.push(item); }); return assert(tempList, [1, 2, 3]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   await eachAsync([1, 2, 3], async (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [1, 2, 3]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachAsyncRight":{"categoryName":"array","description":"Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","optional":false,"description":"eachAsyncRight([3,4], async (item, index) =>{ console.log(item, index); }); // 4 0 // 3 1","source":"eachAsyncRight([3, 4], async (item, index) => {\n  console.log(item, index);\n}); // 4 0 // 3 1\n"}],"name":"eachAsyncRight","params":[{"tag":"param","name":"callingArray","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} callingArray - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; await eachAsyncRight([1, 2, 3], async (item) => { tempList.push(item); }); return assert(tempList, [3, 2, 1]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   await eachAsyncRight([1, 2, 3], async (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [3, 2, 1]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"last":{"categoryName":"array","description":"Extracts item(s) from an array starting from the last item in the array.","examples":[{"tag":"example","optional":false,"description":"last([1, 2, 3, 4, 5] , 2); // => [4, 5]","source":"last([1, 2, 3, 4, 5], 2);\n// => [4, 5]\n"},{"tag":"example","optional":false,"description":"last([1, 2, 3, 4, 5]); // => 5","source":"last([1, 2, 3, 4, 5]);\n// => 5\n"}],"name":"last","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} array - Array to have items extracted from."},{"tag":"param","name":"indexFrom","type":"number","optional":true,"description":"- Value which determines how many items are extracted from the array.","source":"*  {number} [indexFrom = 0] - Value which determines how many items are extracted from the array.","default":"0"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Items from the array.","source":"*  {Array} - Items from the array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"take":{"categoryName":"array","description":"Returns a shallow copy of the array up to an amount.","examples":[{"tag":"example","optional":false,"description":"take([1,2,3], 2); // => [1, 2]","source":"take([1, 2, 3], 2);\n// => [1, 2]\n"}],"name":"take","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The source array to take from.","source":"*  {Array} source - The source array to take from."},{"tag":"param","name":"end","type":"Array","optional":true,"description":"- Zero-based index before which to end extraction.","source":"*  {Array} [end = 1] - Zero-based index before which to end extraction.","default":"1"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"takeRight":{"categoryName":"array","description":"Returns a shallow copy of the array up to an amount starting from the right.","examples":[{"tag":"example","optional":false,"description":"takeRight([1,2,3], 2); // => [2, 3]","source":"takeRight([1, 2, 3], 2);\n// => [2, 3]\n"}],"name":"takeRight","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The source array to take right from.","source":"*  {Array} source - The source array to take right from."},{"tag":"param","name":"end","type":"Array","optional":true,"description":"- Zero-based index before which to end extraction.","source":"*  {Array} [end = 1] - Zero-based index before which to end extraction.","default":"1"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapAsync":{"categoryName":"array","description":"Asynchronously iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"mapAsync([1, 2, 3], (item) => { return item * 2; }); // => [2, 4, 6]","source":"mapAsync([1, 2, 3], (item) => {\n  return item * 2;\n});\n// => [2, 4, 6]\n"}],"name":"mapAsync","params":[{"tag":"param","name":"callingArray","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} callingArray - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results.","source":"*  {Array} [results = []] - Array that will be used to assign results.","default":"[]"}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of the same calling array's type.","source":"*  {Array} - An array of the same calling array's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"unique":{"categoryName":"array","description":"Filters the array down to unique elements.","examples":[{"tag":"example","optional":false,"description":"unique([1, 2, 2, 4]); // => [1, 2, 4]","source":"unique([1, 2, 2, 4]);\n// => [1, 2, 4]\n"}],"name":"unique","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- The array to be filtered.","source":"*  {Array} array - The array to be filtered."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The filtered array.","source":"*  {Array} - The filtered array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"union":{"categoryName":"array","description":"Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.","examples":[{"tag":"example","optional":false,"description":"union([1,2,4], [1,2,3]); // => [1, 2, 4, 3]","source":"union([1, 2, 4], [1, 2, 3]);\n// => [1, 2, 4, 3]\n"}],"name":"union","params":[{"tag":"param","name":"arrays","type":"...Array","optional":false,"description":"- The arrays to be evaluated.","source":"*  {...Array} arrays - The arrays to be evaluated."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactMapAsync":{"categoryName":"array","description":"Asynchronously iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"compactMapAsync([1, 2, 3, null], async (item) => {return item;}); // => [1, 2, 3]","source":"compactMapAsync([1, 2, 3, null], async (item) => {\n  return item;\n});\n// => [1, 2, 3]\n"}],"name":"compactMapAsync","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be compacted.","source":"*  {Array} array - Array to be compacted."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Iteratee to be performed on array.","source":"*  {Function} iteratee - Iteratee to be performed on array."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array values after being put through an iterator.","source":"*  {Array} - Array values after being put through an iterator.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"numSort":{"categoryName":"array","description":"Sorts an array in place using a numerical comparison algorithm from lowest to highest.","examples":[{"tag":"example","optional":false,"description":"numSort([10, 0, 2, 1]); // => [0, 1, 2, 10]","source":"numSort([10, 0, 2, 1]);\n// => [0, 1, 2, 10]\n"}],"name":"numSort","params":[{"tag":"param","name":"numberList","type":"Array","optional":false,"description":"- Array of numbers.","source":"*  {Array} numberList - Array of numbers."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"arrayToObject":{"categoryName":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","optional":false,"description":"arrayToObject([1, 2, 3], ['i', 'love', 'lucy']); // => {i:1, love:2, lucy: 3}","source":"arrayToObject([1, 2, 3], [\"i\", \"love\", \"lucy\"]);\n// => {i:1, love:2, lucy: 3}\n"}],"name":"arrayToObject","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} array - Array to have items extracted from."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} properties - Array to have items extracted from."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"without":{"categoryName":"array","description":"Returns a copy of the array with all instances of the values removed.","examples":[{"tag":"example","optional":false,"description":"without([1, 2, 2, 4], [4]); // => [1, 2, 2]","source":"without([1, 2, 2, 4], [4]);\n// => [1, 2, 2]\n"}],"name":"without","params":[{"tag":"param","name":"target","type":"Array","optional":false,"description":"- The target array to be filtered.","source":"*  {Array} target - The target array to be filtered."},{"tag":"param","name":"removeThese","type":"Array","optional":false,"description":"- Items to be removed.","source":"*  {Array} removeThese - Items to be removed."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The target array filtered.","source":"*  {Array} - The target array filtered.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"partition":{"categoryName":"array","description":"Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.","examples":[{"tag":"example","optional":false,"description":"partition([ {user: 'barney', age: 36, active: false}, {user: 'fred', age: 40, active: true}, {user: 'pebbles', age: 1,  active: false} ], (item) => { return item.active; }); // => [ [{\"user\":\"fred\",\"age\":40,\"active\":true}], [{\"user\":\"barney\",\"age\":36,\"active\":false}, {\"user\":\"pebbles\",\"age\":1,\"active\":false}]]","source":"partition(\n  [\n    { user: \"barney\", age: 36, active: false },\n    { user: \"fred\", age: 40, active: true },\n    { user: \"pebbles\", age: 1, active: false },\n  ],\n  (item) => {\n    return item.active;\n  }\n);\n// => [ [{\"user\":\"fred\",\"age\":40,\"active\":true}], [{\"user\":\"barney\",\"age\":36,\"active\":false}, {\"user\":\"pebbles\",\"age\":1,\"active\":false}]]\n"}],"name":"partition","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Takes an array to split.","source":"*  {Array} array - Takes an array to split."},{"tag":"param","name":"funct","type":"Function","optional":false,"description":"- Function run on each item in array.","source":"*  {Function} funct - Function run on each item in array."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"One array split into two arrays.","source":"*  {Array} - One array split into two arrays.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"xor":{"categoryName":"array","description":"Creates an array that is the symmetric difference of the provided arrays.","examples":[{"tag":"example","optional":false,"description":"xor([2, 1], [2, 3]); // => [1, 3]","source":"xor([2, 1], [2, 3]);\n// => [1, 3]\n"}],"name":"xor","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- The array to be filtered.","source":"*  {Array} array - The array to be filtered."},{"tag":"param","name":"removeThese","type":"Array","optional":false,"description":"- Items to be removed.","source":"*  {Array} removeThese - Items to be removed."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The filtered array.","source":"*  {Array} - The filtered array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"zip":{"categoryName":"array","description":"Merges together the values of each of the arrays with the values at the corresponding position.","examples":[{"tag":"example","optional":false,"description":"zip(['a', 'b'], [1, 2], [true, false]); // => [['a', 1, true], ['b', 2, false]]","source":"zip([\"a\", \"b\"], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n"}],"name":"zip","params":[{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- The arrays to process.","source":"*  {Array} properties - The arrays to process."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new array of regrouped elements.","source":"*  {Array} - Returns the new array of regrouped elements.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"unZip":{"categoryName":"array","description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.","examples":[{"tag":"example","optional":false,"description":"unZip([['a', 1, true], ['b', 2, false]]); // => [['a', 'b'], [1, 2], [true, false]]","source":"unZip([\n  [\"a\", 1, true],\n  [\"b\", 2, false],\n]);\n// => [['a', 'b'], [1, 2], [true, false]]\n"}],"name":"unZip","params":[{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- The array of grouped elements to process.","source":"*  {Array} properties - The array of grouped elements to process."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new array of regrouped elements.","source":"*  {Array} - Returns the new array of regrouped elements.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"first":{"categoryName":"array","description":"Takes the first or multiple items from an array.","examples":[{"tag":"example","optional":false,"description":"first([1, 2, 3]); // => 1","source":"first([1, 2, 3]);\n// => 1\n"},{"tag":"example","optional":false,"description":"first([1, 2, 3], 2); // => [1, 2]","source":"first([1, 2, 3], 2);\n// => [1, 2]\n"}],"name":"first","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to extract from.","source":"*  {Array} array - Array to extract from."},{"tag":"param","name":"upTo","type":"number","optional":false,"description":"- Number which determines how many items after the first item are extracted from the array.","source":"*  {number} upTo - Number which determines how many items after the first item are extracted from the array."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"rNumSort":{"categoryName":"array","description":"Sorts an array in place using a reverse numerical comparison algorithm from highest to lowest.","examples":[{"tag":"example","optional":false,"description":"rNumSort([10, 0, 2, 1]); // => [10, 2, 1, 0]","source":"rNumSort([10, 0, 2, 1]);\n// => [10, 2, 1, 0]\n"}],"name":"rNumSort","params":[{"tag":"param","name":"numberList","type":"Array","optional":false,"description":"- Array of numbers.","source":"*  {Array} numberList - Array of numbers."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"times":{"categoryName":"array","description":"Iterates based on a start index and an end index. The loop ends when the start index is equal to the end index.","examples":[{"tag":"example","optional":false,"description":"times(0, 3, (item) => { console.log(item); }); //Will log // 0 // 1 // 2 // => undefined","source":"times(0, 3, (item) => {\n  console.log(item);\n}); //Will log // 0 // 1 // 2\n// => undefined\n"}],"name":"times","params":[{"tag":"param","name":"startIndex","type":"number","optional":false,"description":"- The number to start loop from.","source":"*  {number} startIndex - The number to start loop from."},{"tag":"param","name":"endIndex","type":"number","optional":false,"description":"- The number to stop at the loop.","source":"*  {number} endIndex - The number to stop at the loop."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed position, start, and end.","source":"*  {Function} iteratee - Transformation function which is passed position, start, and end."}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; times(0, 3, (item) => { tempList.push(item); }); return assert(tempList, [0, 1, 2]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   times(0, 3, (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [0, 1, 2]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Nothing.","source":"*  {undefined} - Nothing.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"timesMap":{"categoryName":"array","description":"Iterates based on a start index and end index. Creates an array with the results of the iteratee on every element in the calling array. The loop ends when the start index is equal to the end index.","examples":[{"tag":"example","optional":false,"description":"timesMap(0, 3, (item) => { return item; }); // => [0, 1, 2]","source":"timesMap(0, 3, (item) => {\n  return item;\n});\n// => [0, 1, 2]\n"}],"name":"timesMap","params":[{"tag":"param","name":"startIndex","type":"number","optional":false,"description":"- The number to start loop from.","source":"*  {number} startIndex - The number to start loop from."},{"tag":"param","name":"endIndex","type":"number","optional":false,"description":"- The number to stop at the loop.","source":"*  {number} endIndex - The number to stop at the loop."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed position, start, and end.","source":"*  {Function} iteratee - Transformation function which is passed position, start, and end."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will be used to assign results.","source":"*  {Array} [results = []] - Array that will be used to assign results.","default":"[]"}],"category":{"tag":"category","name":"array","optional":false,"source":"*  array"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array with iteratee's returned values.","source":"*  {Object} - An array with iteratee's returned values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sortNewest":{"categoryName":"collection","description":"Sorts an array in place using a key from newest to oldest.","examples":[{"tag":"example","optional":false,"description":"sortNewest([{id: 1}, {id: 0}], 'id'); // => [{id: 1}, {id: 0}]","source":"sortNewest([{ id: 1 }, { id: 0 }], \"id\");\n// => [{id: 1}, {id: 0}]\n"}],"name":"sortNewest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"string","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {string} propertyName - The property name to sort by based on it's value."},{"tag":"param","name":"pureMode","type":"boolean","optional":true,"description":"- Mutates the source array. If set to false creates a new array.","source":"*  {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.","default":"true"}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array and or a clone of the array sorted.","source":"*  {Array} - The sorted array and or a clone of the array sorted.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"getNewest":{"categoryName":"collection","description":"Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.","examples":[{"tag":"example","optional":false,"description":"getNewest([{id: 1}, {id: 0}], 'id'); // => {id: 1}","source":"getNewest([{ id: 1 }, { id: 0 }], \"id\");\n// => {id: 1}\n"}],"name":"getNewest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"string","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {string} propertyName - The property name to sort by based on it's value."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The newest object in the collection.","source":"*  {Object} - The newest object in the collection.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sortOldest":{"categoryName":"collection","description":"Sorts an array in place using a key from oldest to newest.","examples":[{"tag":"example","optional":false,"description":"sortOldest([{id: 1}, {id: 0}], 'id'); // => [{id: 0}, {id: 1}]","source":"sortOldest([{ id: 1 }, { id: 0 }], \"id\");\n// => [{id: 0}, {id: 1}]\n"}],"name":"sortOldest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"key","type":"string","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {string} key - The property name to sort by based on it's value."},{"tag":"param","name":"pureMode","type":"boolean","optional":true,"description":"- Mutates the source array. If set to false creates a new array.","source":"*  {boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.","default":"true"}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array and or a clone of the array sorted.","source":"*  {Array} - The sorted array and or a clone of the array sorted.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"getOldest":{"categoryName":"collection","description":"Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.","examples":[{"tag":"example","optional":false,"description":"getOldest([{id: 1}, {id: 0}], 'id'); // => {id: 0}","source":"getOldest([{ id: 1 }, { id: 0 }], \"id\");\n// => {id: 0}\n"}],"name":"getOldest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"key","type":"string","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {string} key - The property name to sort by based on it's value."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The newest object in the collection.","source":"*  {Object} - The newest object in the collection.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"groupBy":{"categoryName":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The order of grouped values is determined by the order they occur in collection. The corresponding value of each key is an array of elements responsible for generating the key.","examples":[{"tag":"example","optional":false,"description":"groupBy([6.1, 4.2, 6.3], Math.floor); // => { '4': [4.2], '6': [6.1, 6.3] }","source":"groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n"}],"name":"groupBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- The iteratee to transform keys.","source":"*  {Function} iteratee - The iteratee to transform keys."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"countBy":{"categoryName":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection through iteratee.","examples":[{"tag":"example","optional":false,"description":"countBy([{a:1}, {a:3}], (item) => { return 'a';}); // => {a: 2}","source":"countBy([{ a: 1 }, { a: 3 }], (item) => {\n  return \"a\";\n});\n// => {a: 2}\n"}],"name":"countBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- The iteratee to transform keys.","source":"*  {Function} iteratee - The iteratee to transform keys."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"countKey":{"categoryName":"collection","description":"Count the amount of times a key is present in a collection.","examples":[{"tag":"example","optional":false,"description":"countKey([{a:1}, {a:3}], 'a'); // => 2","source":"countKey([{ a: 1 }, { a: 3 }], \"a\");\n// => 2\n"}],"name":"countKey","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"Function","optional":false,"description":"- The name of the key.","source":"*  {Function} propertyName - The name of the key."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The count.","source":"*  {number} - The count.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"countWithoutKey":{"categoryName":"collection","description":"Count the amount of times a key is not present in a collection.","examples":[{"tag":"example","optional":false,"description":"countWithoutKey([{a:1}, {a:3}], 'b'); // => 2","source":"countWithoutKey([{ a: 1 }, { a: 3 }], \"b\");\n// => 2\n"}],"name":"countWithoutKey","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"string","optional":false,"description":"- The name of the key.","source":"*  {string} propertyName - The name of the key."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The count.","source":"*  {number} - The count.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"indexBy":{"categoryName":"collection","description":"Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know the keys are unique.","examples":[{"tag":"example","optional":false,"description":"indexBy([{name: 'Lucy', id: 0}, {name: 'Erick', id: 1}], 'id'); // => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}","source":"indexBy(\n  [\n    { name: \"Lucy\", id: 0 },\n    { name: \"Erick\", id: 1 },\n  ],\n  \"id\"\n);\n// => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}\n"}],"name":"indexBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"string","optional":false,"description":"- The property name to index by.","source":"*  {string} propertyName - The property name to index by."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"pluck":{"categoryName":"collection","description":"Returns an array of the plucked values from the collection.","examples":[{"tag":"example","optional":false,"description":"pluck([{lucy: 'Ants moving around on the walls.'}, {lucy: 'In the sky with diamonds.'}], 'lucy'); // => ['Ants moving around on the walls.', 'In the sky with diamonds.']","source":"pluck(\n  [\n    { lucy: \"Ants moving around on the walls.\" },\n    { lucy: \"In the sky with diamonds.\" },\n  ],\n  \"lucy\"\n);\n// => ['Ants moving around on the walls.', 'In the sky with diamonds.']\n"}],"name":"pluck","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array used to determine what value to be plucked.","source":"*  {Array} collection - Array used to determine what value to be plucked."},{"tag":"param","name":"pluckThis","type":"string","optional":false,"description":"- Property name.","source":"*  {string} pluckThis - Property name."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of plucked values.","source":"*  {Array} - An array of plucked values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"pluckObject":{"categoryName":"object","description":"Returns an array of the plucked values from the object. Values are plucked in the order given by the array.","examples":[{"tag":"example","optional":false,"description":"pluckObject({a: 1, b:3}, ['a','b']); // => [1, 3]","source":"pluckObject({ a: 1, b: 3 }, [\"a\", \"b\"]);\n// => [1, 3]\n"}],"name":"pluckObject","params":[{"tag":"param","name":"value","type":"Object","optional":false,"description":"- Array used to determine what values to be plucked.","source":"*  {Object} value - Array used to determine what values to be plucked."},{"tag":"param","name":"pluckThese","type":"string|Array","optional":false,"description":"- Property name.","source":"*  {string|Array} pluckThese - Property name."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of plucked values.","source":"*  {Array} - An array of plucked values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"pluckValues":{"categoryName":"collection","description":"Returns an array of the arrays of plucked values from the collection.","examples":[{"tag":"example","optional":false,"description":"pluckValues([{a: 1, b:3}, {a: 1, b:3}], ['a','b']); // => [[1, 3], [1, 3]]","source":"pluckValues(\n  [\n    { a: 1, b: 3 },\n    { a: 1, b: 3 },\n  ],\n  [\"a\", \"b\"]\n);\n// => [[1, 3], [1, 3]]\n"}],"name":"pluckValues","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array used to determine what values to be plucked.","source":"*  {Array} collection - Array used to determine what values to be plucked."},{"tag":"param","name":"pluckThese","type":"Array","optional":false,"description":"- Property names.","source":"*  {Array} pluckThese - Property names."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of arrays of plucked values.","source":"*  {Array} - An array of arrays of plucked values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"invoke":{"categoryName":"collection","description":"Invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","optional":false,"description":"invoke([{lucy(item, index) { return [item, index];}}, {lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); // => [['EXAMPLE', 0], ['EXAMPLE', 1]]","source":"invoke(\n  [\n    {\n      lucy(item, index) {\n        return [item, index];\n      },\n    },\n    {\n      lucy(item, index) {\n        return [item, index];\n      },\n    },\n  ],\n  \"lucy\",\n  \"EXAMPLE\"\n);\n// => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n"}],"name":"invoke","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection from which method will be taken.","source":"*  {Array} collection - Collection from which method will be taken."},{"tag":"param","name":"property","type":"string","optional":false,"description":"- Value used to pluck method from object.","source":"*  {string} property - Value used to pluck method from object."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- Value to be passed to callable property.","source":"*  {*} value - Value to be passed to callable property."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the results of the invoked method.","source":"*  {Array} - Returns the results of the invoked method.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"invokeAsync":{"categoryName":"collection","description":"Asynchronously awaits & invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","optional":false,"description":"invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); // => [['EXAMPLE', 0], ['EXAMPLE', 1]]","source":"invokeAsync(\n  [\n    {\n      async lucy(item, index) {\n        return [item, index];\n      },\n    },\n    {\n      async lucy(item, index) {\n        return [item, index];\n      },\n    },\n  ],\n  \"lucy\",\n  \"EXAMPLE\"\n);\n// => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n"}],"name":"invokeAsync","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection from which method will be taken.","source":"*  {Array} collection - Collection from which method will be taken."},{"tag":"param","name":"property","type":"string","optional":false,"description":"- Value used to pluck method from object.","source":"*  {string} property - Value used to pluck method from object."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- Value to be passed to callable property.","source":"*  {*} value - Value to be passed to callable property."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"test":{"tag":"test","optional":false,"description":"(async () => { const result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); return assert(result, [['EXAMPLE', 0], ['EXAMPLE', 1]]); });","source":"* \t * (async () => {\n\t *   const result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE');\n\t *   return assert(result, [['EXAMPLE', 0], ['EXAMPLE', 1]]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the results of the invoked method.","source":"*  {Array} - Returns the results of the invoked method.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"findItem":{"categoryName":"collection","description":"Finds an object in a collection by the given id and property name.","examples":[{"tag":"example","optional":false,"description":"findItem([{id: 1}, {id: 2}], 1); // => {id: 1}","source":"findItem([{ id: 1 }, { id: 2 }], 1);\n// => {id: 1}\n"}],"name":"findItem","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be checked for an item.","source":"*  {Array} collection - Collection to be checked for an item."},{"tag":"param","name":"id","type":"number|string","optional":false,"description":"- The value to look for.","source":"*  {number|string} id - The value to look for."},{"tag":"param","name":"propertyName","type":"string","optional":true,"description":"- The name of the property to compare.","source":"*  {string} [propertyName = 'id'] - The name of the property to compare.","default":"'id'"}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The found object.","source":"*  {Object} - The found object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"findIndex":{"categoryName":"collection","description":"Finds an object in a collection by the given id and property name and returns the array index of the object.","examples":[{"tag":"example","optional":false,"description":"findIndex([{id: 1}, {id: 2}], 1); // => 0","source":"findIndex([{ id: 1 }, { id: 2 }], 1);\n// => 0\n"}],"name":"findIndex","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be checked for an item.","source":"*  {Array} collection - Collection to be checked for an item."},{"tag":"param","name":"id","type":"number|string","optional":false,"description":"- The value to look for.","source":"*  {number|string} id - The value to look for."},{"tag":"param","name":"propertyName","type":"string","optional":true,"description":"- The name of the property to compare.","source":"*  {string} [propertyName = 'id'] - The name of the property to compare.","default":"'id'"}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"The index of the object.","source":"*  {number} - The index of the object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sortAlphabetical":{"categoryName":"collection","description":"Perform alphabetical sort on a collection with the provided key name. Mutates the array.","examples":[{"tag":"example","optional":false,"description":"sortAlphabetical([{letter:'a'}, {letter:'f'}, {letter:'c'}], 'letter'); // => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]","source":"sortAlphabetical([{ letter: \"a\" }, { letter: \"f\" }, { letter: \"c\" }], \"letter\");\n// => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]\n"}],"name":"sortAlphabetical","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"string","optional":false,"description":"- Name of property to compare.","source":"*  {string} propertyName - Name of property to compare."}],"category":{"tag":"category","name":"collection","optional":false,"source":"*  collection"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array.","source":"*  {Array} - The sorted array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"ary":{"categoryName":"function","description":"Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.","examples":[{"tag":"example","optional":false,"description":"ary((...args) => { return args;}, 2)(1, 2, 3); // => [1, 2]","source":"ary((...args) => {\n  return args;\n}, 2)(1, 2, 3);\n// => [1, 2]\n"}],"name":"ary","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to cap arguments for.","source":"*  {Function} callable - The function to cap arguments for."},{"tag":"param","name":"amount","type":"number","optional":false,"description":"- The arity cap.","source":"*  {number} amount - The arity cap."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new capped function.","source":"*  {Object} - Returns the new capped function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"curry":{"categoryName":"function","description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.","examples":[{"tag":"example","optional":false,"description":"curry((a, b, c) => { return [a, b, c]; })(1)(2)(3); // => [1, 2, 3]","source":"curry((a, b, c) => {\n  return [a, b, c];\n})(1)(2)(3);\n// => [1, 2, 3]\n"}],"name":"curry","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to curry.","source":"*  {Function} callable - The function to curry."},{"tag":"param","name":"arity","type":"number","optional":false,"description":"- The arity of method.","source":"*  {number} arity - The arity of method."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the new curried function.","source":"*  {*} - Returns the new curried function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"curryRight":{"description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.","examples":[{"tag":"example","optional":false,"description":"curryRight((a, b, c) => { return [a, b, c]; })(1)(2)(3); // => [3, 2, 1]","source":"curryRight((a, b, c) => {\n  return [a, b, c];\n})(1)(2)(3);\n// => [3, 2, 1]\n"}],"name":"curryRight","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to curry.","source":"*  {Function} callable - The function to curry."},{"tag":"param","name":"arity","type":"number","optional":false,"description":"- The arity of method.","source":"*  {number} arity - The arity of method."}],"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the new curried function.","source":"*  {*} - Returns the new curried function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"once":{"categoryName":"function","description":"Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.","examples":[{"tag":"example","optional":false,"description":"const onceOnly = once((item) => { return item;}); onceOnly(5); onceOnly(3); // => 5","source":"const onceOnly = once((item) => {\n  return item;\n});\nonceOnly(5);\nonceOnly(3);\n// => 5\n"}],"name":"once","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const onceOnly = once((item) => { return item;}); return await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5); });","source":"* \t * (async () => {\n\t *   const onceOnly = once((item) => { return item;});\n\t *   return await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"after":{"categoryName":"function","description":"Creates a function that executes callable, only after being called n times.","examples":[{"tag":"example","optional":false,"description":"const onlyAfter = after(1, (item) => { return item;}); onlyAfter(1); // => undefined onlyAfter(2); // => 2","source":"const onlyAfter = after(1, (item) => {\n  return item;\n});\nonlyAfter(1);\n// => undefined onlyAfter(2); // => 2\n"}],"name":"after","params":[{"tag":"param","name":"amount","type":"number","optional":false,"description":"- The number of calls until method is invoked.","source":"*  {number} amount - The number of calls until method is invoked."},{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const onlyAfter = after(2, (item) => { return item;}); return await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2); });","source":"* \t * (async () => {\n\t *   const onlyAfter = after(2, (item) => { return item;});\n\t *   return await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"before":{"categoryName":"function","description":"Creates a function that executes callable, only before n times.","examples":[{"tag":"example","optional":false,"description":"const onlyBefore = before(3, () => { return 1;}); onlyBefore(1); // => 1 onlyBefore(2); // => 2 onlyBefore(3); // => 2","source":"const onlyBefore = before(3, () => {\n  return 1;\n});\nonlyBefore(1);\n// => 1 onlyBefore(2); // => 2 onlyBefore(3); // => 2\n"}],"name":"before","params":[{"tag":"param","name":"amount","type":"number","optional":false,"description":"- The number of calls before n.","source":"*  {number} amount - The number of calls before n."},{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const onlyBefore = before(3, (item) => { return item;}); return await assert(onlyBefore(1), 1) && await assert(onlyBefore(2), 2) && await assert(onlyBefore(3), 2); });","source":"* \t * (async () => {\n\t *   const onlyBefore = before(3, (item) => { return item;});\n\t *   return await assert(onlyBefore(1), 1) && await assert(onlyBefore(2), 2) && await assert(onlyBefore(3), 2);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stubObject":{"categoryName":"function","description":"This method returns a new empty object.","examples":[{"tag":"example","optional":false,"description":"stubObject(); // => {}","source":"stubObject();\n// => {}\n"}],"name":"stubObject","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new empty object.","source":"*  {Object} - Returns the new empty object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stubArray":{"categoryName":"function","description":"This method returns a new empty array.","examples":[{"tag":"example","optional":false,"description":"stubArray(); // => []","source":"stubArray();\n// => []\n"}],"name":"stubArray","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new empty array.","source":"*  {Array} - Returns the new empty array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stubString":{"categoryName":"function","description":"This method returns a new empty string.","examples":[{"tag":"example","optional":false,"description":"stubString(); // => ''","source":"stubString();\n// => ''\n"}],"name":"stubString","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Returns the new empty string.","source":"*  {string} - Returns the new empty string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stubFalse":{"categoryName":"function","description":"This method returns false.","examples":[{"tag":"example","optional":false,"description":"stubFalse(); // => false","source":"stubFalse();\n// => false\n"}],"name":"stubFalse","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns false.","source":"*  {boolean} - Returns false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stubTrue":{"categoryName":"function","description":"This method returns true.","examples":[{"tag":"example","optional":false,"description":"stubTrue(); // => true","source":"stubTrue();\n// => true\n"}],"name":"stubTrue","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true.","source":"*  {boolean} - Returns true.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"noop":{"categoryName":"function","description":"This method returns undefined.","examples":[{"tag":"example","optional":false,"description":"noop(); // => undefined","source":"noop();\n// => undefined\n"}],"name":"noop","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachObject":{"categoryName":"object","description":"Iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"eachObject({a: 1, b: 2, c: 3}, (item) => { console.log(item); }); // => {a: 1, b: 2, c: 3}","source":"eachObject({ a: 1, b: 2, c: 3 }, (item) => {\n  console.log(item);\n});\n// => {a: 1, b: 2, c: 3}\n"}],"name":"eachObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = {}; eachObject({a: 1, b: 2, c: 3}, (item, key) => { tempList[key] = item; }); return assert(tempList, {a: 1, b: 2, c: 3}); });","source":"* \t * (async () => {\n\t *   const tempList = {};\n\t *   eachObject({a: 1, b: 2, c: 3}, (item, key) => {\n\t *     tempList[key] = item;\n\t *   });\n\t *   return assert(tempList, {a: 1, b: 2, c: 3});\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"Returns the calling object.","source":"*  {Object|Function} - Returns the calling object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"whileObject":{"categoryName":"object","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"whileObject({a: false, b: true, c: true}, (item) => { return item; }); // => false","source":"whileObject({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => false\n"},{"tag":"example","optional":false,"description":"whileObject({a: true, b: true, c: true}, (item) => { return item; }); // => true","source":"whileObject({ a: true, b: true, c: true }, (item) => {\n  return item;\n});\n// => true\n"}],"name":"whileObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object that will be looped through.","source":"*  {Object} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"filterObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"filterObject({a: false, b: true, c: true}, (item) => { return item; }); // => {b: true, c: true}","source":"filterObject({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => {b: true, c: true}\n"}],"name":"filterObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with properties that passed the test.","source":"*  {Object|Function} - An object with properties that passed the test.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"mapObject({a: 1, b: 2, c: 3}, (item) => { return item * 2; }); // => {a: 2, b: 4, c: 6}","source":"mapObject({ a: 1, b: 2, c: 3 }, (item) => {\n  return item * 2;\n});\n// => {a: 2, b: 4, c: 6}\n"}],"name":"mapObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object of the same calling object's type.","source":"*  {Object|Function} - An object of the same calling object's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactMapObject":{"categoryName":"object","description":"Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"compactMapObject({a: undefined, b: 2, c: 3}, (item) => { return item; }); // => {b: 2, c: 3}","source":"compactMapObject({ a: undefined, b: 2, c: 3 }, (item) => {\n  return item;\n});\n// => {b: 2, c: 3}\n"}],"name":"compactMapObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function} - An object with mapped properties that are not null or undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachWhile":{"categoryName":"utility","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"eachWhile({a: false, b: true, c: true}, (item) => { return item; }); // => false","source":"eachWhile({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => false\n"}],"name":"eachWhile","params":[{"tag":"param","name":"source","type":"Object|Array|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Array|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"each":{"categoryName":"utility","description":"Iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"each({a: 1, b: 2, c: 3}, (item) => { console.log(item); }); // => {a: 1, b: 2, c: 3}","source":"each({ a: 1, b: 2, c: 3 }, (item) => {\n  console.log(item);\n});\n// => {a: 1, b: 2, c: 3}\n"}],"name":"each","params":[{"tag":"param","name":"source","type":"Array|Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array|Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; each({a: 1, b: 2, c: 3}, (item) => { tempList.push(item); }); return assert(tempList, [1, 2, 3]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   each({a: 1, b: 2, c: 3}, (item) => {\n\t *     tempList.push(item);\n\t *   });\n\t *   return assert(tempList, [1, 2, 3]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array|Object|Function","optional":false,"description":"The originally given object.","source":"*  {Array|Object|Function} - The originally given object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"filter":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"filter({a: false, b: true, c: true}, (item) => { return item; }); // => {b: true, c: true}","source":"filter({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => {b: true, c: true}\n"}],"name":"filter","params":[{"tag":"param","name":"source","type":"Array|Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array|Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Array|Object|Function","optional":false,"description":"A new object of the same calling object's type.","source":"*  {Array|Object|Function} - A new object of the same calling object's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"map":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"map({a: 1, b: 2, c: 3}, (item) => { return item * 2; }); // => {a: 2, b: 4, c: 6}","source":"map({ a: 1, b: 2, c: 3 }, (item) => {\n  return item * 2;\n});\n// => {a: 2, b: 4, c: 6}\n"}],"name":"map","params":[{"tag":"param","name":"source","type":"Array|Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array|Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Array|Object|Function","optional":false,"description":"A new object of the same calling object's type.","source":"*  {Array|Object|Function} - A new object of the same calling object's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactMap":{"categoryName":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"compactMap({a: null, b: 2, c: 3}, (item) => { return item; }); // => {b: 2, c: 3}","source":"compactMap({ a: null, b: 2, c: 3 }, (item) => {\n  return item;\n});\n// => {b: 2, c: 3}\n"}],"name":"compactMap","params":[{"tag":"param","name":"source","type":"Array|Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array|Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Array|Object|Function","optional":false,"description":"A new object of the same calling object's type.","source":"*  {Array|Object|Function} - A new object of the same calling object's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"bindAll":{"categoryName":"function","description":"Loops through an object or an array and binds the given object to all functions encountered.","examples":[{"tag":"example","optional":false,"description":"bindAll([function () { return this;}], 'Lucy')[0]().toString(); // => 'Lucy'","source":"bindAll(\n  [\n    function () {\n      return this;\n    },\n  ],\n  \"Lucy\"\n)[0]().toString();\n// => 'Lucy'\n"},{"tag":"example","optional":false,"description":"bindAll({a() { return this;}}, 'Lucy').a().toString(); // => 'Lucy'","source":"bindAll(\n  {\n    a() {\n      return this;\n    },\n  },\n  \"Lucy\"\n)\n  .a()\n  .toString();\n// => 'Lucy'\n"}],"name":"bindAll","params":[{"tag":"param","name":"collection","type":"Object|Function|Array","optional":false,"description":"- The functions to bind.","source":"*  {Object|Function|Array} collection - The functions to bind."},{"tag":"param","name":"bindThis","type":"*","optional":false,"description":"- Object to be bound to functions.","source":"*  {*} bindThis - Object to be bound to functions."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Object|Function|Array","optional":false,"description":"Returns the method invoked or undefined.","source":"*  {Object|Function|Array} - Returns the method invoked or undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"ifInvoke":{"categoryName":"function","description":"Checks if the given method is a function. If it is then it invokes it with the given arguments.","examples":[{"tag":"example","optional":false,"description":"ifInvoke((...args) => { return args;}, 1, 2); // => [1, 2]","source":"ifInvoke(\n  (...args) => {\n    return args;\n  },\n  1,\n  2\n);\n// => [1, 2]\n"},{"tag":"example","optional":false,"description":"ifInvoke(undefined, 1, 2); // => undefined","source":"ifInvoke(undefined, 1, 2);\n// => undefined\n"}],"name":"ifInvoke","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked if possible.","source":"*  {Function} callable - The function to be invoked if possible."},{"tag":"param","name":"args","type":"...Array","optional":false,"description":"- Arguments to pass to the method.","source":"*  {...Array} args - Arguments to pass to the method."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the method invoked or undefined.","source":"*  {*} - Returns the method invoked or undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"negate":{"categoryName":"function","description":"Creates a function that negates the result of the predicate callable.","examples":[{"tag":"example","optional":false,"description":"negate(() => { return false;})(); // => true","source":"negate(() => {\n  return false;\n})();\n// => true\n"}],"name":"negate","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the given methods result.","source":"*  {*} - Returns the given methods result.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"every":{"categoryName":"function","description":"Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).","examples":[{"tag":"example","optional":false,"description":"every([[], true, 1, null, 'string'], Boolean); // => false","source":"every([[], true, 1, null, \"string\"], Boolean);\n// => false\n"}],"name":"every","params":[{"tag":"param","name":"collection","type":"Array|Object","optional":false,"description":"- The collection to iterate over.","source":"*  {Array|Object} collection - The collection to iterate over."},{"tag":"param","name":"predicate","type":"Function","optional":false,"description":"- The function invoked per iteration.","source":"*  {Function} predicate - The function invoked per iteration."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true if all elements pass the predicate check, else false.","source":"*  {boolean} - Returns true if all elements pass the predicate check, else false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"over":{"categoryName":"function","description":"Creates a function that invokes iteratees with the arguments it receives and returns their results.","examples":[{"tag":"example","optional":false,"description":"over([Math.max, Math.min])(1, 2, 3, 4); // => [4, 1]","source":"over([Math.max, Math.min])(1, 2, 3, 4);\n// => [4, 1]\n"}],"name":"over","params":[{"tag":"param","name":"iteratees","type":"Array|Object","optional":false,"description":"- The iteratees to invoke.","source":"*  {Array|Object} iteratees - The iteratees to invoke."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new function.","source":"*  {Function} - Returns the new function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"overEvery":{"categoryName":"function","description":"Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.","examples":[{"tag":"example","optional":false,"description":"overEvery([Boolean, isFinite])('1'); // => true","source":"overEvery([Boolean, isFinite])(\"1\");\n// => true\n"},{"tag":"example","optional":false,"description":"overEvery([Boolean, isFinite])(null); // => false","source":"overEvery([Boolean, isFinite])(null);\n// => false\n"}],"name":"overEvery","params":[{"tag":"param","name":"predicates","type":"Array|Object","optional":false,"description":"-  The predicates to check.","source":"*  {Array|Object} predicates -  The predicates to check."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new function.","source":"*  {Function} - Returns the new function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"timer":{"categoryName":"function","description":"Timer wrapper.","examples":[{"tag":"example","optional":false,"description":"timer(() => {}, 100); // => 0","source":"timer(() => {}, 100);\n// => 0\n"}],"name":"timer","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"number","optional":false,"description":"- The time in milliseconds.","source":"*  {number} time - The time in milliseconds."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns setTimeout ID.","source":"*  {Object} - Returns setTimeout ID.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"interval":{"categoryName":"function","description":"Interval wrapper.","examples":[{"tag":"example","optional":false,"description":"interval(() => {}, 100); // => 0","source":"interval(() => {}, 100);\n// => 0\n"}],"name":"interval","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"number","optional":false,"description":"- The time in milliseconds.","source":"*  {number} time - The time in milliseconds."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns setInterval ID.","source":"*  {Object} - Returns setInterval ID.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"clearTimers":{"categoryName":"function","description":"Clear all active timers.","examples":[{"tag":"example","optional":false,"description":"clearTimers(); // => undefined","source":"clearTimers();\n// => undefined\n"}],"name":"clearTimers","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"}},"clearIntervals":{"categoryName":"function","description":"Clear all active intervals.","examples":[{"tag":"example","optional":false,"description":"clearIntervals(); // => undefined","source":"clearIntervals();\n// => undefined\n"}],"name":"clearIntervals","category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"}},"debounce":{"categoryName":"function","description":"Creates a debounced function that delays invoking callable until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounce function has a clear method to cancel the timer.","examples":[{"tag":"example","optional":false,"description":"debounce(() => { console.log('debounced'); }, 0)(); // 'debounced'","source":"debounce(() => {\n  console.log(\"debounced\");\n}, 0)(); // 'debounced'\n"}],"name":"debounce","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"number","optional":false,"description":"- The time in milliseconds.","source":"*  {number} time - The time in milliseconds."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The debounced function.","source":"*  {Function} - The debounced function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"throttle":{"categoryName":"function","description":"Creates a throttled function that only invokes callable at most once per every wait milliseconds. The throttle function has a clear method to cancel the timer.","examples":[{"tag":"example","optional":false,"description":"throttle(() => { console.log('throttle'); }, 0)(); // 'throttle'","source":"throttle(() => {\n  console.log(\"throttle\");\n}, 0)(); // 'throttle'\n"}],"name":"throttle","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"number","optional":false,"description":"- The time in milliseconds.","source":"*  {number} time - The time in milliseconds."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The throttled function.","source":"*  {Function} - The throttled function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"chain":{"categoryName":"function","description":"Creates a chainable set of functions.","examples":[{"tag":"example","optional":false,"description":"const chained = chain({a(item) { return item;}}); chained('Acid').a(); chained.done(); // => 'Acid'","source":"const chained = chain({\n  a(item) {\n    return item;\n  },\n});\nchained(\"Acid\").a();\nchained.done();\n// => 'Acid'\n"}],"name":"chain","params":[{"tag":"param","name":"methods","type":"Array|Object","optional":false,"description":"- The object to take methods from.","source":"*  {Array|Object} methods - The object to take methods from."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const chained = chain({a(item) { return item;}}); chained('Acid').a(); return assert(chained.done(), 'Acid'); });","source":"* \t * (async () => {\n\t *   const chained = chain({a(item) { return item;}});\n\t *   chained('Acid').a();\n\t *   return assert(chained.done(), 'Acid');\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.","source":"*  {*} - Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"inSync":{"categoryName":"function","description":"Invoke an array of functions.","examples":[{"tag":"example","optional":false,"description":"inSync([() => {console.log(1);}, () => {console.log(2);}]); // 1 // 2 // => undefined","source":"inSync([\n  () => {\n    console.log(1);\n  },\n  () => {\n    console.log(2);\n  },\n]); // 1 // 2\n// => undefined\n"}],"name":"inSync","params":[{"tag":"param","name":"collection","type":"Array|Object|Function","optional":false,"description":"- The functions to be invoked.","source":"*  {Array|Object|Function} collection - The functions to be invoked."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- The object passed as an argument to each method.","source":"*  {*} value - The object passed as an argument to each method."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; inSync([() => {tempList.push(1);}, () => {tempList.push(2);}]); return assert(tempList, [1, 2]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   inSync([() => {tempList.push(1);}, () => {tempList.push(2);}]);\n\t *   return assert(tempList, [1, 2]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"inAsync":{"categoryName":"function","description":"Invoke an array of functions asynchronously. Each function is awaited to ensure execution order.","examples":[{"tag":"example","optional":false,"description":"inAsync([async () => {console.log(1);}, async () => {console.log(2);}]); // 1 // 2 // => undefined","source":"inAsync([\n  async () => {\n    console.log(1);\n  },\n  async () => {\n    console.log(2);\n  },\n]); // 1 // 2\n// => undefined\n"}],"name":"inAsync","params":[{"tag":"param","name":"collection","type":"Array|Object|Function","optional":false,"description":"- The functions to be invoked.","source":"*  {Array|Object|Function} collection - The functions to be invoked."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- The object passed as an argument to each method.","source":"*  {*} value - The object passed as an argument to each method."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = []; await inAsync([async () => {tempList.push(1);}, async () => {tempList.push(2);}]); return assert(tempList, [1, 2]); });","source":"* \t * (async () => {\n\t *   const tempList = [];\n\t *   await inAsync([async () => {tempList.push(1);}, async () => {tempList.push(2);}]);\n\t *   return assert(tempList, [1, 2]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"nthArg":{"categoryName":"function","description":"Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.","examples":[{"tag":"example","optional":false,"description":"nthArg(1)('a', 'b'); // => 'b'","source":"nthArg(1)(\"a\", \"b\");\n// => 'b'\n"}],"name":"nthArg","params":[{"tag":"param","name":"index","type":"number","optional":true,"description":"- The index of the argument to return.","source":"*  {number} [index = 0] - The index of the argument to return.","default":"0"}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"reArg":{"categoryName":"function","description":"Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.","examples":[{"tag":"example","optional":false,"description":"reArg((a, b, c) => { return [a, b, c]; }, [1,2,0])(1,2,3); // => [2, 3, 1]","source":"reArg(\n  (a, b, c) => {\n    return [a, b, c];\n  },\n  [1, 2, 0]\n)(1, 2, 3);\n// => [2, 3, 1]\n"}],"name":"reArg","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"indexes","type":"Array","optional":false,"description":"- The arranged argument indexes.","source":"*  {Array} indexes - The arranged argument indexes."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new function.","source":"*  {Function} - Returns the new function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"wrap":{"categoryName":"function","description":"Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.","examples":[{"tag":"example","optional":false,"description":"wrap('Lucy', (firstName, lastName) => { return `My name is ${firstName} ${lastName}.`; })('Diamonds'); // => 'My name is Lucy Diamonds.'","source":"wrap(\"Lucy\", (firstName, lastName) => {\n  return `My name is ${firstName} ${lastName}.`;\n})(\"Diamonds\");\n// => 'My name is Lucy Diamonds.'\n"}],"name":"wrap","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- The value to wrap.","source":"*  {*} value - The value to wrap."},{"tag":"param","name":"wrapper","type":"Function","optional":false,"description":"- The wrapper function.","source":"*  {Function} wrapper - The wrapper function."}],"category":{"tag":"category","name":"function","optional":false,"source":"*  function"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The new function.","source":"*  {Function} - The new function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isZero":{"categoryName":"number","description":"Strictly checks if a number is zero.","examples":[{"tag":"example","optional":false,"description":"isZero(0); // => true","source":"isZero(0);\n// => true\n"},{"tag":"example","optional":false,"description":"isZero(1); // => false","source":"isZero(1);\n// => false\n"}],"name":"isZero","params":[{"tag":"param","name":"item","type":"number","optional":false,"description":"- Number to be checked.","source":"*  {number} item - Number to be checked."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isNumberEqual":{"categoryName":"number","description":"Strictly checks if a number equal to another number.","examples":[{"tag":"example","optional":false,"description":"isNumberEqual(0, 0); // => true","source":"isNumberEqual(0, 0);\n// => true\n"},{"tag":"example","optional":false,"description":"isNumberEqual(0, 1); // => false","source":"isNumberEqual(0, 1);\n// => false\n"}],"name":"isNumberEqual","params":[{"tag":"param","name":"item","type":"number","optional":false,"description":"- Number to be checked against num.","source":"*  {number} item - Number to be checked against num."},{"tag":"param","name":"num","type":"number","optional":false,"description":"- Number to be checked against item.","source":"*  {number} num - Number to be checked against item."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isNumberInRange":{"categoryName":"number","description":"Checks if a number is within a range.","examples":[{"tag":"example","optional":false,"description":"isNumberInRange(1, 0, 2); // => true","source":"isNumberInRange(1, 0, 2);\n// => true\n"},{"tag":"example","optional":false,"description":"isNumberInRange(1, -1, 0); // => false","source":"isNumberInRange(1, -1, 0);\n// => false\n"}],"name":"isNumberInRange","params":[{"tag":"param","name":"num","type":"number","optional":false,"description":"- Number to be checked.","source":"*  {number} num - Number to be checked."},{"tag":"param","name":"start","type":"number","optional":false,"description":"- Beginning of range.","source":"*  {number} start - Beginning of range."},{"tag":"param","name":"end","type":"number","optional":false,"description":"- End of range.","source":"*  {number} end - End of range."}],"category":{"tag":"category","name":"number","optional":false,"source":"*  number"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"hasKeys":{"categoryName":"object","description":"Checks to see if an object has all of the given property names.","examples":[{"tag":"example","optional":false,"description":"hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Thor']); // => true","source":"hasKeys({ Lucy: \"Ringo\", John: \"Malkovich\", Thor: \"Bobo\" }, [\"Lucy\", \"Thor\"]);\n// => true\n"},{"tag":"example","optional":false,"description":"hasKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy','Tom']); // => false","source":"hasKeys({ Lucy: \"Ringo\", John: \"Malkovich\", Thor: \"Bobo\" }, [\"Lucy\", \"Tom\"]);\n// => false\n"}],"name":"hasKeys","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} object - Object from which keys are extracted."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- Array of object keys.","source":"*  {Array} properties - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"hasAnyKeys":{"categoryName":"object","description":"Checks to see if an object has any of the given property names.","examples":[{"tag":"example","optional":false,"description":"hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Lucy', 'Tom']); // => true","source":"hasAnyKeys({ Lucy: \"Ringo\", John: \"Malkovich\", Thor: \"Bobo\" }, [\"Lucy\", \"Tom\"]);\n// => true\n"},{"tag":"example","optional":false,"description":"hasAnyKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: 'Bobo'}, ['Other', 'Tom']); // => false","source":"hasAnyKeys({ Lucy: \"Ringo\", John: \"Malkovich\", Thor: \"Bobo\" }, [\n  \"Other\",\n  \"Tom\",\n]);\n// => false\n"}],"name":"hasAnyKeys","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} object - Object from which keys are extracted."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- Array of object keys.","source":"*  {Array} properties - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"pick":{"categoryName":"object","description":"Returns a clone of the source object with the plucked properties.","examples":[{"tag":"example","optional":false,"description":"pick({a:1, b:2, c:3}, ['a','b']); // => {a:1, b:2}","source":"pick({ a: 1, b: 2, c: 3 }, [\"a\", \"b\"]);\n// => {a:1, b:2}\n"}],"name":"pick","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object to be cloned.","source":"*  {Object} source - Object to be cloned."},{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array used to determine what values to be plucked.","source":"*  {Array} array - Array used to determine what values to be plucked."},{"tag":"param","name":"newObject","type":"Object","optional":true,"description":"- Object to be populated with plucked values.","source":"*  {Object} [newObject = {}] - Object to be populated with plucked values.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A new object with plucked properties.","source":"*  {Object} - A new object with plucked properties.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactKeys":{"categoryName":"object","description":"Extracts all keys from an object whose values are not falsey. The values false, null, 0, \"\", undefined, and NaN are falsey.","examples":[{"tag":"example","optional":false,"description":"compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null}); // => ['Lucy', 'John']","source":"compactKeys({\n  Lucy: \"Ringo\",\n  John: \"Malkovich\",\n  Thor: undefined,\n  other: false,\n  that: null,\n});\n// => ['Lucy', 'John']\n"}],"name":"compactKeys","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} object - Object from which keys are extracted."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"test":{"tag":"test","optional":false,"description":"(async () => { const results = compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null}); return assert(results.includes('Lucy') && results.includes('John'), true); });","source":"* \t * (async () => {\n\t *   const results = compactKeys({Lucy: 'Ringo', John: 'Malkovich', Thor: undefined, other: false, that: null});\n\t *   return assert(results.includes('Lucy') && results.includes('John'), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array of key values.","source":"*  {Array} - Returns an array of key values.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isMatchObject":{"categoryName":"object","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","optional":false,"description":"isMatchObject({a: 1}, {a: 1}); // => true","source":"isMatchObject({ a: 1 }, { a: 1 });\n// => true\n"}],"name":"isMatchObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object.","source":"*  {Object} source - Source object."},{"tag":"param","name":"compareObject","type":"Object","optional":false,"description":"- Object to compare to source.","source":"*  {Object} compareObject - Object to compare to source."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"zipObject":{"categoryName":"object","description":"Creates an object from two arrays, one of property identifiers and one of corresponding values.","examples":[{"tag":"example","optional":false,"description":"zipObject(['a', 'b'], [1, 2]); // => { 'a': 1, 'b': 2 }","source":"zipObject([\"a\", \"b\"], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n"}],"name":"zipObject","params":[{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- The property identifiers.","source":"*  {Array} properties - The property identifiers."},{"tag":"param","name":"values","type":"Array","optional":false,"description":"- The property values.","source":"*  {Array} values - The property values."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new object.","source":"*  {Object} - Returns the new object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"unZipObject":{"categoryName":"object","description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.","examples":[{"tag":"example","optional":false,"description":"unZipObject({ 'a': 1, 'b': 2 }); // => [['a', 'b'], [1, 2]]","source":"unZipObject({ a: 1, b: 2 });\n// => [['a', 'b'], [1, 2]]\n"}],"name":"unZipObject","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- The object to process.","source":"*  {Object} object - The object to process."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns two arrays one of keys and the other of values inside a single array.","source":"*  {Array} - Returns two arrays one of keys and the other of values inside a single array.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"invert":{"categoryName":"object","description":"Creates an inverted version of a given object by switching it's keys and values.","examples":[{"tag":"example","optional":false,"description":"invert({a:1}); // => {1:'a'}","source":"invert({ a: 1 });\n// => {1:'a'}\n"}],"name":"invert","params":[{"tag":"param","name":"thisObject","type":"Object","optional":false,"description":"- Object to be inverted.","source":"*  {Object} thisObject - Object to be inverted."},{"tag":"param","name":"invertedObject","type":"Array","optional":true,"description":"- Empty object to be populated with inverted values from thisObject.","source":"*  {Array} [invertedObject = {}] - Empty object to be populated with inverted values from thisObject.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns object with keys and values switched.","source":"*  {Object} - Returns object with keys and values switched.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"omit":{"categoryName":"object","description":"Returns a clone of the given object without the given properties.","examples":[{"tag":"example","optional":false,"description":"omit({a:1, b:2}, ['a']); // => {b:2}","source":"omit({ a: 1, b: 2 }, [\"a\"]);\n// => {b:2}\n"}],"name":"omit","params":[{"tag":"param","name":"originalObject","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} originalObject - Object from which keys are extracted."},{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array of object keys.","source":"*  {Array} array - Array of object keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A new object with the removed.","source":"*  {Object} - A new object with the removed.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eachObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"eachObjectAsync({a: 1, b: 2, c: 3}, (item) => { console.log(item); }); // => {a: 1, b: 2, c: 3}","source":"eachObjectAsync({ a: 1, b: 2, c: 3 }, (item) => {\n  console.log(item);\n});\n// => {a: 1, b: 2, c: 3}\n"}],"name":"eachObjectAsync","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = {}; await eachObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => { tempList[key] = item; }); return assert(tempList, {a: 1, b: 2, c: 3}); });","source":"* \t * (async () => {\n\t *   const tempList = {};\n\t *   await eachObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n\t *     tempList[key] = item;\n\t *   });\n\t *   return assert(tempList, {a: 1, b: 2, c: 3});\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"Returns source.","source":"*  {Object|Function} - Returns source.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"mapObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"mapObjectAsync({a: 1, b: 2, c: 3}, (item) => { return item * 2; }); // => {a: 2, b: 4, c: 6}","source":"mapObjectAsync({ a: 1, b: 2, c: 3 }, (item) => {\n  return item * 2;\n});\n// => {a: 2, b: 4, c: 6}\n"}],"name":"mapObjectAsync","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = await mapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => { return item; }); return assert(tempList, {a: 1, b: 2, c: 3}); });","source":"* \t * (async () => {\n\t *   const tempList = await mapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n\t *     return item;\n\t *   });\n\t *   return assert(tempList, {a: 1, b: 2, c: 3});\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object of the same calling object's type.","source":"*  {Object|Function} - An object of the same calling object's type.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"compactMapObjectAsync":{"categoryName":"object","description":"Asynchronously iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"compactMapObjectAsync({a: undefined, b: 2, c: 3}, (item) => { return item; }); // => {b: 2, c: 3}","source":"compactMapObjectAsync({ a: undefined, b: 2, c: 3 }, (item) => {\n  return item;\n});\n// => {b: 2, c: 3}\n"}],"name":"compactMapObjectAsync","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"category":{"tag":"category","name":"object","optional":false,"source":"*  object"},"test":{"tag":"test","optional":false,"description":"(async () => { const tempList = await compactMapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => { return item; }); return assert(tempList, {a: 1, b: 2, c: 3}); });","source":"* \t * (async () => {\n\t *   const tempList = await compactMapObjectAsync({a: 1, b: 2, c: 3}, async (item, key) => {\n\t *     return item;\n\t *   });\n\t *   return assert(tempList, {a: 1, b: 2, c: 3});\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function} - An object with mapped properties that are not null or undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperCase":{"categoryName":"string","description":"Converts a string and converts it entirely into uppercase.","examples":[{"tag":"example","optional":false,"description":"upperCase('upper case'); // => 'UPPER CASE'","source":"upperCase(\"upper case\");\n// => 'UPPER CASE'\n"}],"name":"upperCase","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be converted into upper case.","source":"*  {string} string - String to be converted into upper case."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Converted string in upper case.","source":"*  {string} - Converted string in upper case.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"camelCase":{"categoryName":"string","description":"Converts a string into Camel case format.","examples":[{"tag":"example","optional":false,"description":"camelCase('camel case'); // => 'camelCase'","source":"camelCase(\"camel case\");\n// => 'camelCase'\n"}],"name":"camelCase","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be converted into Camel case.","source":"*  {string} string - String to be converted into Camel case."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Converted string in Camel case.","source":"*  {string} - Converted string in Camel case.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"kebabCase":{"categoryName":"string","description":"Converts a string into Kebab case format.","examples":[{"tag":"example","optional":false,"description":"kebabCase('kebab case'); // => 'kebab-case'","source":"kebabCase(\"kebab case\");\n// => 'kebab-case'\n"}],"name":"kebabCase","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be converted into Kebab case.","source":"*  {string} string - String to be converted into Kebab case."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Converted string in Kebab case.","source":"*  {string} - Converted string in Kebab case.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"snakeCase":{"categoryName":"string","description":"Converts a string into snake case format.","examples":[{"tag":"example","optional":false,"description":"snakeCase('snake case'); // => 'snake_case'","source":"snakeCase(\"snake case\");\n// => 'snake_case'\n"}],"name":"snakeCase","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be converted into snake case.","source":"*  {string} string - String to be converted into snake case."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Converted string in Snake case.","source":"*  {string} - Converted string in Snake case.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"insertInRange":{"categoryName":"string","description":"Inserts text into a string at a given position.","examples":[{"tag":"example","optional":false,"description":"insertInRange('A from Lucy.', 1, ' tab'); // => 'A tab from Lucy.'","source":"insertInRange(\"A from Lucy.\", 1, \" tab\");\n// => 'A tab from Lucy.'\n"}],"name":"insertInRange","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to insert the text into.","source":"*  {string} string - String to insert the text into."},{"tag":"param","name":"index","type":"number","optional":false,"description":"- Point of insertion.","source":"*  {number} index - Point of insertion."},{"tag":"param","name":"text","type":"string","optional":false,"description":"- The string to be inserted.","source":"*  {string} text - The string to be inserted."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"The string with the text inserted at the given point.","source":"*  {string} - The string with the text inserted at the given point.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"rightString":{"categoryName":"string","description":"Plucks a letter using the index starting from the right.","examples":[{"tag":"example","optional":false,"description":"rightString('rightString'); // => 'g'","source":"rightString(\"rightString\");\n// => 'g'\n"},{"tag":"example","optional":false,"description":"rightString('rightString', 2); // => 'n'","source":"rightString(\"rightString\", 2);\n// => 'n'\n"}],"name":"rightString","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to extract the letter from.","source":"*  {string} string - String to extract the letter from."},{"tag":"param","name":"index","type":"number","optional":true,"description":"- The starting position.","source":"*  {number} [index=1] - The starting position.","default":"1"}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"A letter at the given index.","source":"*  {string} - A letter at the given index.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"chunkString":{"categoryName":"string","description":"Splits up a string into chunks.","examples":[{"tag":"example","optional":false,"description":"chunkString('chunk', 2); // => ['ch', 'un', 'k']","source":"chunkString(\"chunk\", 2);\n// => ['ch', 'un', 'k']\n"}],"name":"chunkString","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to chunked.","source":"*  {string} string - String to chunked."},{"tag":"param","name":"size","type":"number","optional":true,"description":"- The max string length per chunk.","source":"*  {number} [size] - The max string length per chunk."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with strings that are <= size parameter.","source":"*  {Array} - An array with strings that are <= size parameter.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"initialString":{"categoryName":"string","description":"Truncates everything before the index starting from the right.","examples":[{"tag":"example","optional":false,"description":"initialString('initialString'); // => 'initialStrin'","source":"initialString(\"initialString\");\n// => 'initialStrin'\n"},{"tag":"example","optional":false,"description":"initialString('initialString', 2); // => 'initialStri'","source":"initialString(\"initialString\", 2);\n// => 'initialStri'\n"}],"name":"initialString","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to extract the initial letters from.","source":"*  {string} string - String to extract the initial letters from."},{"tag":"param","name":"index","type":"number","optional":true,"description":"- Starting point from the right.","source":"*  {number} [index=1] - Starting point from the right.","default":"1"}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"A string with the characters before the index starting from the right.","source":"*  {string} - A string with the characters before the index starting from the right.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"restString":{"categoryName":"string","description":"Truncates everything after a index.","examples":[{"tag":"example","optional":false,"description":"restString('restString'); // => 'estString'","source":"restString(\"restString\");\n// => 'estString'\n"},{"tag":"example","optional":false,"description":"restString('restString', 2); // => 'stString'","source":"restString(\"restString\", 2);\n// => 'stString'\n"}],"name":"restString","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to extract the rest of the letters from.","source":"*  {string} string - String to extract the rest of the letters from."},{"tag":"param","name":"index","type":"number","optional":true,"description":"- Starting point.","source":"*  {number} [index=1] - Starting point.","default":"1"}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"A string without the characters up-to to the index.","source":"*  {string} - A string without the characters up-to to the index.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"replaceList":{"categoryName":"string","description":"Replaces all occurrences of strings in an array with a value.","examples":[{"tag":"example","optional":false,"description":"replaceList('Her name was user.', ['user'], 'Lucy'); // => 'Her name was Lucy.'","source":"replaceList(\"Her name was user.\", [\"user\"], \"Lucy\");\n// => 'Her name was Lucy.'\n"}],"name":"replaceList","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be replaced.","source":"*  {string} string - String to be replaced."},{"tag":"param","name":"words","type":"Array","optional":false,"description":"- Strings to replace.","source":"*  {Array} words - Strings to replace."},{"tag":"param","name":"value","type":"string","optional":false,"description":"- The match replacement.","source":"*  {string} value - The match replacement."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"The string with the replacement.","source":"*  {string} - The string with the replacement.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"rawURLDecode":{"categoryName":"string","description":"Raw URL decoder.","examples":[{"tag":"example","optional":false,"description":"rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.'); // => 'Lucy saw diamonds in the sky.'","source":"rawURLDecode(\"Lucy%20saw%20diamonds%20in%20the%20sky.\");\n// => 'Lucy saw diamonds in the sky.'\n"}],"name":"rawURLDecode","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be replaced.","source":"*  {string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Converted string into the decoded URI Component .","source":"*  {string} - Converted string into the decoded URI Component .\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"htmlEntities":{"categoryName":"string","description":"Replaced sensitive characters with their matching html entity.","examples":[{"tag":"example","optional":false,"description":"htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`); // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n"}],"name":"htmlEntities","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be replaced.","source":"*  {string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Replaced string.","source":"*  {string} - Replaced string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"sanitize":{"categoryName":"string","description":"Executes rawURLDecode followd by htmlEntities methods on a string.","examples":[{"tag":"example","optional":false,"description":"sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`); // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n"}],"name":"sanitize","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be replaced.","source":"*  {string} string - String to be replaced."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Replaced string.","source":"*  {string} - Replaced string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"tokenize":{"categoryName":"string","description":"Break string by non-white space characters matches.","examples":[{"tag":"example","optional":false,"description":"tokenize('I am Lucy!'); // => [\"I\", \"am\", \"Lucy!\"]","source":"tokenize(\"I am Lucy!\");\n// => [\"I\", \"am\", \"Lucy!\"]\n"}],"name":"tokenize","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be broken up.","source":"*  {string} string - String to be broken up."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of words without white space characters.","source":"*  {Array} - Array of words without white space characters.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"words":{"description":"Break string into word matches.","examples":[{"tag":"example","optional":false,"description":"words('I am Lucy!'); // => [\"I\", \"am\", \"Lucy\"]","source":"words(\"I am Lucy!\");\n// => [\"I\", \"am\", \"Lucy\"]\n"}],"name":"words","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be broken up.","source":"*  {string} string - String to be broken up."}],"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of words with word characters only.","source":"*  {Array} - Array of words with word characters only.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"truncate":{"categoryName":"string","description":"Truncates the string, accounting for word placement and character count.","examples":[{"tag":"example","optional":false,"description":"truncate('Where is Lucy?', 2); // => 'Where is'","source":"truncate(\"Where is Lucy?\", 2);\n// => 'Where is'\n"}],"name":"truncate","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be truncated.","source":"*  {string} string - String to be truncated."},{"tag":"param","name":"maxLength","type":"number","optional":false,"description":"- The desired max length of the string.","source":"*  {number} maxLength - The desired max length of the string."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"The mutated string.","source":"*  {string} - The mutated string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"truncateRight":{"categoryName":"string","description":"Truncates the string, accounting for word placement and character count from the right.","examples":[{"tag":"example","optional":false,"description":"truncateRight('Where is Lucy?', 6); // => 'Lucy?'","source":"truncateRight(\"Where is Lucy?\", 6);\n// => 'Lucy?'\n"}],"name":"truncateRight","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be truncated.","source":"*  {string} string - String to be truncated."},{"tag":"param","name":"maxLength","type":"number","optional":false,"description":"- The desired max length of the string.","source":"*  {number} maxLength - The desired max length of the string."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"The mutated string.","source":"*  {string} - The mutated string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperFirstLetter":{"categoryName":"string","description":"Returns the first letter capitalized.","examples":[{"tag":"example","optional":false,"description":"upperFirstLetter('upper'); // => \"U\"","source":"upperFirstLetter(\"upper\");\n// => \"U\"\n"}],"name":"upperFirstLetter","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to extract first letter from.","source":"*  {string} string - String to extract first letter from."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"An upper case letter.","source":"*  {string} - An upper case letter.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperFirst":{"categoryName":"string","description":"Capitalizes the first letter.","examples":[{"tag":"example","optional":false,"description":"upperFirst('upper'); // => 'Upper'","source":"upperFirst(\"upper\");\n// => 'Upper'\n"}],"name":"upperFirst","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be mutated.","source":"*  {string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"String with first letter capitalized.","source":"*  {string} - String with first letter capitalized.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperFirstAll":{"categoryName":"string","description":"Capitalize all first letters.","examples":[{"tag":"example","optional":false,"description":"upperFirstAll('Lucy is next up.'); // => 'Lucy Is Next Up.'","source":"upperFirstAll(\"Lucy is next up.\");\n// => 'Lucy Is Next Up.'\n"}],"name":"upperFirstAll","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be mutated.","source":"*  {string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"String with all first letters capitalized.","source":"*  {string} - String with all first letters capitalized.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperFirstOnly":{"categoryName":"string","description":"Capitalize first letter and lower case the rest.","examples":[{"tag":"example","optional":false,"description":"upperFirstOnly('LYSERGIC ACID DIETHYLAMIDE'); // => 'Lysergic namespace diethylamide'","source":"upperFirstOnly(\"LYSERGIC ACID DIETHYLAMIDE\");\n// => 'Lysergic namespace diethylamide'\n"}],"name":"upperFirstOnly","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be mutated.","source":"*  {string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"String with first letter capitalized.","source":"*  {string} - String with first letter capitalized.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"upperFirstOnlyAll":{"categoryName":"string","description":"Capitalize all first letters and lower case the rest.","examples":[{"tag":"example","optional":false,"description":"upperFirstOnlyAll('LYSERGIC ACID DIETHYLAMIDE'); // => 'Lysergic Acid Diethylamide'","source":"upperFirstOnlyAll(\"LYSERGIC ACID DIETHYLAMIDE\");\n// => 'Lysergic Acid Diethylamide'\n"}],"name":"upperFirstOnlyAll","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be mutated.","source":"*  {string} string - String to be mutated."}],"category":{"tag":"category","name":"string","optional":false,"source":"*  string"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"String with all first letters capitalized.","source":"*  {string} - String with all first letters capitalized.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"construct":{"categoryName":"class","description":"A function which acts like the \"new\" operator and can pass arguments. This is a safe version of the original which will error if given undefined This is useful when working with classes and prefering to avoid the new operator and it's potential side effects.","examples":[{"tag":"example","optional":false,"description":"const newClass = construct(function (a) {return a;}, []); // => 2","source":"const newClass = construct(function (a) {\n  return a;\n}, []);\n// => 2\n"}],"name":"construct","params":[{"tag":"param","name":"target","type":"Function","optional":false,"description":"- The target function or class.","source":"*  {Function} target - The target function or class."},{"tag":"param","name":"argumentsList","type":"Array","optional":true,"description":"- An array-like object specifying the arguments with which target should be called. Default value is a new empty array.","source":"*  {Array} [argumentsList =[]] - An array-like object specifying the arguments with which target should be called. Default value is a new empty array.","default":"[]"},{"tag":"param","name":"newTarget","type":"Array","optional":false,"description":"- The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target.","source":"*  {Array} newTarget - The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target."}],"category":{"tag":"category","name":"class","optional":false,"source":"*  class"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.","source":"*  {*} - A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.\n\t *"}},"assignDeep":{"categoryName":"utility","description":"Creates a deep clone of an object.","examples":[{"tag":"example","optional":false,"description":"clone({b:2}) // => {a:1, b:2}","source":"clone({ b: 2 });\n// => {a:1, b:2}\n"}],"name":"assignDeep","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object to clone.","source":"*  {Object} source - Source object to clone."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns a deep clone of an object.","source":"*  {Object} - Returns a deep clone of an object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"cacheNativeMethod":{"categoryName":"utility","description":"Caches a prototype method.","examples":[{"tag":"example","optional":false,"description":"cacheNativeMethod(Array.prototype.push)([], 1); // => 1","source":"cacheNativeMethod(Array.prototype.push)([], 1);\n// => 1\n"}],"name":"cacheNativeMethod","params":[{"tag":"param","name":"method","type":"Function","optional":false,"description":"- Prototype method.","source":"*  {Function} method - Prototype method."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Cached method.","source":"*  {Function} - Cached method.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"ifNotEqual":{"categoryName":"utility","description":"Checks if a property on an object has a value. If not, it will assign a value.","examples":[{"tag":"example","optional":false,"description":"ifNotEqual({}, 'a', 1); // => {a:1}","source":"ifNotEqual({}, \"a\", 1);\n// => {a:1}\n"}],"name":"ifNotEqual","params":[{"tag":"param","name":"rootObject","type":"Object","optional":false,"description":"- The object to check.","source":"*  {Object} rootObject - The object to check."},{"tag":"param","name":"property","type":"string","optional":false,"description":"- The property name which is to be checked.","source":"*  {string} property - The property name which is to be checked."},{"tag":"param","name":"equalThis","type":"*","optional":false,"description":"- The reassignment value for the property being checked.","source":"*  {*} equalThis - The reassignment value for the property being checked."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the provided rootObject.","source":"*  {Object} - Returns the provided rootObject.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isEqual":{"categoryName":"utility","description":"Performs a deep comparison between two objects.","examples":[{"tag":"example","optional":false,"description":"isEqual({a: [1,2,3]}, {a: [1,2,3]}); // => true","source":"isEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] });\n// => true\n"}],"name":"isEqual","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object.","source":"*  {Object} source - Source object."},{"tag":"param","name":"compareObject","type":"Object","optional":false,"description":"- Object to compare to source.","source":"*  {Object} compareObject - Object to compare to source."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"propertyMatch":{"categoryName":"utility","description":"Using a deep comparison it checks if properties of two objects using an array are equal.","examples":[{"tag":"example","optional":false,"description":"propertyMatch({ a: 1, b: 2 }, { a: 1, b: 2 }, ['a', 'b']); // => true","source":"propertyMatch({ a: 1, b: 2 }, { a: 1, b: 2 }, [\"a\", \"b\"]);\n// => true\n"}],"name":"propertyMatch","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The source object to compare.","source":"*  {Object} source - The source object to compare."},{"tag":"param","name":"compared","type":"Object","optional":false,"description":"- Object to be compared to source.","source":"*  {Object} compared - Object to be compared to source."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- List of properties to compare defaults to keys(source).","source":"*  {Array} properties - List of properties to compare defaults to keys(source)."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array of properties.","source":"*  {Array} - Returns an array of properties.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"toPath":{"categoryName":"utility","description":"Breaks up string into object chain list.","examples":[{"tag":"example","optional":false,"description":"toPath('post.like[2]'); // => ['post', 'like', '2']","source":"toPath(\"post.like[2]\");\n// => ['post', 'like', '2']\n"}],"name":"toPath","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be broken up.","source":"*  {string} string - String to be broken up."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array used to go through object chain.","source":"*  {Array} - Array used to go through object chain.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"uid":{"categoryName":"utility","description":"Creates a numerical unique ID and recycles old ones. UID numerically ascends however freed UIDs are later reused.","examples":[{"tag":"example","optional":false,"description":"uid(); // => 0 uid(); // => 1","source":"uid();\n// => 0 uid(); // => 1\n"}],"name":"uid","category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"test":{"tag":"test","optional":false,"description":"(async () => { return await assert(uid(), 0) && await assert(uid(), 1); });","source":"* \t * (async () => {\n\t *   return await assert(uid(), 0) && await assert(uid(), 1);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"number","optional":false,"description":"Returns a unique id.","source":"*  {number} - Returns a unique id.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"uid.free":{"categoryName":"utility","description":"Frees an UID so that it may be recycled for later use.","examples":[{"tag":"example","optional":false,"description":"uid(); // => 0 uid(); // => 1 uid.free(0); // => undefined uid(); // => 0","source":"uid();\n// => 0 uid(); // => 1 uid.free(0); // => undefined uid(); // => 0\n"}],"name":"uid.free","params":[{"tag":"param","name":"id","type":"number","optional":false,"description":"- Number to be freed.","source":"*  {number} id - Number to be freed."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"test":{"tag":"test","optional":false,"description":"(async () => { return await assert(uid(), 0) && await assert(uid(), 1) && await assert(uid.free(0), undefined) && await assert(uid(), 0); });","source":"* \t * (async () => {\n\t *   return await assert(uid(), 0) &&\n\t *    await assert(uid(), 1) &&\n\t *    await assert(uid.free(0), undefined) &&\n\t *    await assert(uid(), 0);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Nothing is returned.","source":"*  {undefined} - Nothing is returned.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"get":{"categoryName":"utility","description":"Returns property on an object.","examples":[{"tag":"example","optional":false,"description":"get('post.like[2]', { post: { like: ['a','b','c'] } }); // => 'c'","source":"get(\"post.like[2]\", { post: { like: [\"a\", \"b\", \"c\"] } });\n// => 'c'\n"}],"name":"get","params":[{"tag":"param","name":"propertyString","type":"string","optional":false,"description":"- String used to retrieve properties.","source":"*   {string} propertyString - String used to retrieve properties."},{"tag":"param","name":"objectChain","type":"Object","optional":false,"description":"- Object which has a property retrieved from it.","source":"*  {Object} objectChain - Object which has a property retrieved from it."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns property from the given object.","source":"*  {Object} - Returns property from the given object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"jsonParse":{"categoryName":"utility","description":"Parses JSON string.","examples":[{"tag":"example","optional":false,"description":"jsonParse('{}'); // => {}","source":"jsonParse(\"{}\");\n// => {}\n"}],"name":"jsonParse","params":[{"tag":"param","name":"string","type":"string","optional":false,"description":"- String to be parsed.","source":"*  {string} string - String to be parsed."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the parsed object.","source":"*  {Object} - Returns the parsed object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"stringify":{"categoryName":"utility","description":"Stringify an object into a JSON string.","examples":[{"tag":"example","optional":false,"description":"stringify({}); // => '{}'","source":"stringify({});\n// => '{}'\n"}],"name":"stringify","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object to Stringify.","source":"*  {Object} object - Object to Stringify."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"string","optional":false,"description":"Returns the object as a valid JSON string.","source":"*  {string} - Returns the object as a valid JSON string.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"model":{"categoryName":"utility","description":"Set & Get a model.","examples":[{"tag":"example","optional":false,"description":"model('test', {a: 1}) && model('test'); // => {a: 1}","source":"model(\"test\", { a: 1 }) && model(\"test\");\n// => {a: 1}\n"}],"name":"model","params":[{"tag":"param","name":"modelName","type":"string","optional":false,"description":"- Name of the model.","source":"*  {string} modelName - Name of the model."},{"tag":"param","name":"modelValue","type":"Object","optional":false,"description":"- The model object.","source":"*  {Object} modelValue - The model object."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the associated model.","source":"*  {*} - Returns the associated model.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"promise":{"categoryName":"utility","description":"A wrapper around the promise constructor.","examples":[{"tag":"example","optional":false,"description":"promise((a) => {}); // => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}","source":"promise((a) => {});\n// => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}\n"}],"name":"promise","params":[{"tag":"param","name":"callback","type":"Function","optional":false,"description":"- Function to be called back.","source":"*  {Function} callback - Function to be called back."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"test":{"tag":"test","optional":false,"description":"(async () => { const result = await promise((accept) => { accept(true); }); return assert(result, true); });","source":"* \t * (async () => {\n\t *   const result = await promise((accept) => {\n\t *     accept(true);\n\t *   });\n\t *   return assert(result, true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A constructor with a callback function.","source":"*  {Object} - A constructor with a callback function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"toggle":{"categoryName":"utility","description":"Performs a toggle between 2 values using a deep or strict comparison.","examples":[{"tag":"example","optional":false,"description":"let toggleMe = true; toggleMe = toggle(toggleMe, true, false); // => false","source":"let toggleMe = true;\ntoggleMe = toggle(toggleMe, true, false);\n// => false\n"}],"name":"toggle","params":[{"tag":"param","name":"value","type":"(string|number|Object|Array)","optional":false,"description":"- Strictly compared against on & off arguments.","source":"*   {(string|number|Object|Array)} value - Strictly compared against on & off arguments."},{"tag":"param","name":"on","type":"(string|number|Object|Array)","optional":false,"description":"-  The first object to be compared to.","source":"*  {(string|number|Object|Array)} on -  The first object to be compared to."},{"tag":"param","name":"off","type":"(string|number|Object|Array)","optional":false,"description":"- The second object to be compared to.","source":"*  {(string|number|Object|Array)} off - The second object to be compared to."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"(string|number|Object|Array)","optional":false,"description":"The opposing value to the current.","source":"*  {(string|number|Object|Array)} - The opposing value to the current.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flow":{"categoryName":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","optional":false,"description":"flow(increment, increment, deduct)(0); // => 1","source":"flow(increment, increment, deduct)(0);\n// => 1\n"}],"name":"flow","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flowRight":{"categoryName":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","optional":false,"description":"flowRight(increment, increment, deduct)(0); // => 1","source":"flowRight(increment, increment, deduct)(0);\n// => 1\n"}],"name":"flowRight","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flowAsync":{"categoryName":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","optional":false,"description":"flowAsync(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0); // => 2","source":"flowAsync(\n  async (item) => {\n    return increment(item);\n  },\n  async (item) => {\n    return increment(item);\n  }\n)(0);\n// => 2\n"}],"name":"flowAsync","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"flowAsyncRight":{"categoryName":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","optional":false,"description":"flowAsyncRight(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0); // => 2","source":"flowAsyncRight(\n  async (item) => {\n    return increment(item);\n  },\n  async (item) => {\n    return increment(item);\n  }\n)(0);\n// => 2\n"}],"name":"flowAsyncRight","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"utility","optional":false,"source":"*  utility"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isAgent":{"categoryName":"browser","description":"Checks to see of the browser agent has a string.","examples":[{"tag":"example","optional":false,"description":"isAgent('mobile'); // => false","source":"isAgent(\"mobile\");\n// => false\n"}],"name":"isAgent","params":[{"tag":"param","name":"value","type":"string","optional":false,"description":"- The string to search for.","source":"*  {string} value - The string to search for."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true or false.","source":"*  {boolean} - Returns true or false."},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eventAdd":{"categoryName":"browser","description":"Attaches an event listener to a node.","examples":[{"tag":"example","optional":false,"description":"eventAdd(document.body, 'click', () => {console.log('CLICKED');}); // = > document.body","source":"eventAdd(document.body, \"click\", () => {\n  console.log(\"CLICKED\");\n}); // = > document.body\n"}],"name":"eventAdd","params":[{"tag":"param","name":"node","type":"Node","optional":false,"description":"- Given node.","source":"*  {Node} node - Given node."},{"tag":"param","name":"type","type":"string","optional":false,"description":"- A string representing the event type.","source":"*  {string} type - A string representing the event type."},{"tag":"param","name":"listener","type":"Object|Function","optional":false,"description":"- The object which receives a notification when an event of the specified type occurs.","source":"*  {Object|Function} listener - The object which receives a notification when an event of the specified type occurs."},{"tag":"param","name":"options","type":"Object","optional":false,"description":"- An options object that specifies characteristics about the event listener.","source":"*  {Object} options - An options object that specifies characteristics about the event listener."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"Node","optional":false,"description":"Returns given node.","source":"*  {Node} - Returns given node.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"eventRemove":{"categoryName":"browser","description":"Attaches an event listener to a node.","examples":[{"tag":"example","optional":false,"description":"eventRemove(document.body, () => {console.log('CLICKED');}); // = > Undefined","source":"eventRemove(document.body, () => {\n  console.log(\"CLICKED\");\n}); // = > Undefined\n"}],"name":"eventRemove","params":[{"tag":"param","name":"node","type":"Node","optional":false,"description":"- Given node.","source":"*  {Node} node - Given node."},{"tag":"param","name":"type","type":"string","optional":false,"description":"- A string representing the event type.","source":"*  {string} type - A string representing the event type."},{"tag":"param","name":"listener","type":"Object|Function","optional":false,"description":"- An object|function representing the listener.","source":"*  {Object|Function} listener - An object|function representing the listener."},{"tag":"param","name":"options","type":"Object","optional":false,"description":"- An options object that specifies characteristics about the event listener.","source":"*  {Object} options - An options object that specifies characteristics about the event listener."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Undefined.","source":"*  {undefined} - Undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"isEnter":{"categoryName":"browser","description":"Checks if the keycode of the event is strictly equal to 13.","examples":[{"tag":"example","optional":false,"description":"isEnter('click'); // => false","source":"isEnter(\"click\");\n// => false\n"}],"name":"isEnter","params":[{"tag":"param","name":"eventObject","type":"Object","optional":false,"description":"- Object to be checked.","source":"*  {Object} eventObject - Object to be checked."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"boolean","optional":false,"description":"Returns true if the keycode property of the object equals 13.","source":"*  {boolean} - Returns true if the keycode property of the object equals 13.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"importjs":{"categoryName":"browser","description":"Asynchronously import a js file and append it to the head node. If a script fails to load importjs won't reject the promise rather it'll return the error event to limit further complications & reduce code complexity.","examples":[{"tag":"example","optional":false,"description":"importjs('core.js'); importjs('core');","source":"importjs(\"core.js\");\nimportjs(\"core\");\n"}],"name":"importjs","params":[{"tag":"param","name":"url","type":"*","optional":false,"description":"- URL of the script to import. If not \".\" is found in the file name \".js\" will be appended.","source":"*  {*} url - URL of the script to import. If not \".\" is found in the file name \".js\" will be appended."}],"async":{"tag":"async","optional":false,"source":"*"},"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"Promise","optional":false,"description":"Returns a promise which returns a \"load\" or \"error\" event associated with the script.","source":"*  {Promise} - Returns a promise which returns a \"load\" or \"error\" event associated with the script.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"virtualStorage":{"categoryName":"browser","description":"A virtual storage & drop in replacement for localStorage. The virtualStorage function is a factory which wraps the VirtualStorage constructor & returns it. Direct class/constructor access is named VirtualStorage.","examples":[{"tag":"example","optional":false,"description":"const myVirtualStorage = virtualStorage(); // => New Crate Object","source":"const myVirtualStorage = virtualStorage();\n// => New Crate Object\n"}],"name":"virtualStorage","category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a new VirtualStorage Object.","source":"*  {*} - Returns a new VirtualStorage Object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"virtualStorage.setItem":{"categoryName":"browser","description":"Save an item to a virtual storage object.","examples":[{"tag":"example","optional":false,"description":"const myVirtualStorage = virtualStorage(); myVirtualStorage.setItem('key', 'value'); // => undefined","source":"const myVirtualStorage = virtualStorage();\nmyVirtualStorage.setItem(\"key\", \"value\");\n// => undefined\n"}],"name":"virtualStorage.setItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to store the data.","source":"*  {string} key - The key used to store the data."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify","source":"*  {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify"}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"virtualStorage.getItem":{"categoryName":"browser","description":"Get an item from a virtual storage object.","examples":[{"tag":"example","optional":false,"description":"const myVirtualStorage = virtualStorage(); myVirtualStorage.setItem('key', 'value'); myVirtualStorage.getItem('key'); // => 'value'","source":"const myVirtualStorage = virtualStorage();\nmyVirtualStorage.setItem(\"key\", \"value\");\nmyVirtualStorage.getItem(\"key\");\n// => 'value'\n"}],"name":"virtualStorage.getItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to store the data.","source":"*  {string} key - The key used to store the data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"virtualStorage.removeItem":{"categoryName":"browser","description":"Remove an item from a virtual storage object.","examples":[{"tag":"example","optional":false,"description":"const myVirtualStorage = virtualStorage(); myVirtualStorage.setItem('key', 'value'); myVirtualStorage.removeItem('key'); myVirtualStorage.getItem('key'); // => undefined","source":"const myVirtualStorage = virtualStorage();\nmyVirtualStorage.setItem(\"key\", \"value\");\nmyVirtualStorage.removeItem(\"key\");\nmyVirtualStorage.getItem(\"key\");\n// => undefined\n"}],"name":"virtualStorage.removeItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to remove data.","source":"*  {string} key - The key used to remove data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"virtualStorage.clear":{"categoryName":"browser","description":"Clears all data from the virtual storage object by replacing with a new object.","examples":[{"tag":"example","optional":false,"description":"const myVirtualStorage = virtualStorage(); myVirtualStorage.setItem('key', 'value'); myVirtualStorage.clear(); myVirtualStorage.getItem('key'); // => undefined","source":"const myVirtualStorage = virtualStorage();\nmyVirtualStorage.setItem(\"key\", \"value\");\nmyVirtualStorage.clear();\nmyVirtualStorage.getItem(\"key\");\n// => undefined\n"}],"name":"virtualStorage.clear","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to remove data.","source":"*  {string} key - The key used to remove data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"crate":{"categoryName":"browser","description":"Create a virtual storage container with localStorage support. Crate will fallback to strictly virtual storage if localStorage isn't supported. If localStorage is supported virtual storage will be used first and only fallback to localStorage when needed. Crate is ideal as a seemless drop in replacement for localStorage when the browser doesn't support or allow localStorage. The crate function is a factory which wraps the Crate constructor & returns it. Direct class/constructor access is named Crate.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); // => New Crate Object","source":"const storageCrate = crate();\n// => New Crate Object\n"}],"name":"crate","category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a new Crate Object.","source":"*  {*} - Returns a new Crate Object.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"crate.setItem":{"categoryName":"browser","description":"Save an item to a crate.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); storageCrate.setItem('key', 'value'); // => undefined","source":"const storageCrate = crate();\nstorageCrate.setItem(\"key\", \"value\");\n// => undefined\n"}],"name":"crate.setItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to store the data.","source":"*  {string} key - The key used to store the data."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify","source":"*  {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify"}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"crate.getItem":{"categoryName":"browser","description":"Get an item from a crate.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); storageCrate.setItem('key', 'value'); storageCrate.getItem('key'); // => 'value'","source":"const storageCrate = crate();\nstorageCrate.setItem(\"key\", \"value\");\nstorageCrate.getItem(\"key\");\n// => 'value'\n"}],"name":"crate.getItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to store the data.","source":"*  {string} key - The key used to store the data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"crate.removeItem":{"categoryName":"browser","description":"Remove an item from a crate.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); storageCrate.setItem('key', 'value'); storageCrate.removeItem('key'); storageCrate.getItem('key'); // => undefined","source":"const storageCrate = crate();\nstorageCrate.setItem(\"key\", \"value\");\nstorageCrate.removeItem(\"key\");\nstorageCrate.getItem(\"key\");\n// => undefined\n"}],"name":"crate.removeItem","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to remove data.","source":"*  {string} key - The key used to remove data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}},"crate.clear":{"categoryName":"browser","description":"Clears all data for the crate including all of localStorage if supported.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); storageCrate.setItem('key', 'value'); storageCrate.clear(); storageCrate.getItem('key'); // => undefined","source":"const storageCrate = crate();\nstorageCrate.setItem(\"key\", \"value\");\nstorageCrate.clear();\nstorageCrate.getItem(\"key\");\n// => undefined\n"}],"name":"crate.clear","params":[{"tag":"param","name":"key","type":"string","optional":false,"description":"- The key used to remove data.","source":"*  {string} key - The key used to remove data."}],"category":{"tag":"category","name":"browser","optional":false,"source":"*  browser"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"},"type":{"tag":"type","type":"Function","optional":false,"source":"*  {Function}"}}}}