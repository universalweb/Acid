window.docMap = {"categories":[{"title":"array","items":["arrayToObject","chunk","clear","cloneArray","compactMapArray","compactMapAsyncArray","difference","drop","dropRight","eachArray","eachAsyncArray","eachRight","eachRightAsync","ensureArray","ensureBuffer","everyArray","everyAsyncArray","filterArray","filterAsyncArray","first","flatten","flattenDeep","inAsync","initial","intersection","isMatchArray","largest","last","mapArray","mapAsyncArray","mapRightArray","mapWhile","numSort","partition","rNumSort","range","remove","removeBy","rest","right","sample","shuffle","smallest","sortedIndex","take","takeRight","timesMapAsync","toArray","unZip","union","unique","untilFalseArray","untilTrueArray","whileCompactMap","whileEachArray","whileMapArray","without","xor","zip"]},{"title":"browser","items":["Crate","Crate.clear","Crate.getItem","Crate.removeItem","Crate.setItem","crate","eventAdd","eventRemove","importjs","isAgent","isEnter","virtualStorage"]},{"title":"class","items":["construct"]},{"title":"collection","items":["countBy","countKey","countWithoutKey","findIndex","findItem","getNewest","getOldest","groupBy","indexBy","indexedAlphabetically","invoke","invokeAsync","pluck","pluckValues","sortNewest","sortOldest"]},{"title":"file","items":["getFileExtension","isFileCSS","isFileHTML","isFileJS","isFileJSON"]},{"title":"function","items":["after","apply","ary","before","chain","clearIntervals","clearTimers","curry","debounce","ifInvoke","ifValue","inSync","interval","negate","noop","nthArg","once","over","overEvery","reArg","throttle","timer","wrap"]},{"title":"math","items":["add","deduct","divide","increment","minus","multiply","randomFloat","remainder","sub","sum"]},{"title":"number","items":["isNumberEqual","isNumberInRange","isNumberNotInRange","isZero","randomInt"]},{"title":"object","items":["assign","compactKeys","compactMapAsyncObject","compactMapObject","defProp","eachAsyncObject","eachObject","everyAsyncObject","everyObject","filterAsyncObject","filterObject","getPropDesc","getPropNames","hasAnyKeys","hasKeys","invert","isMatchObject","isSame","keys","mapObject","mapObjectAsync","objectSize","omit","pick","pluckObject","unZipObject","zipObject"]},{"title":"string","items":["camelCase","chunkString","htmlEntities","initialString","insertInRange","kebabCase","rawURLDecode","replaceList","restString","rightString","sanitize","snakeCase","tokenize","truncate","truncateRight","upperCase","upperFirst","upperFirstAll","upperFirstLetter","upperFirstOnly","upperFirstOnlyAll"]},{"title":"type","items":["cloneType","getType","getTypeName","hasValue","isArguments","isArray","isArrayBuffer","isArrayLike","isAsync","isBigInt","isBoolean","isBuffer","isChild","isCloneable","isConstructor","isDate","isEmpty","isF32","isF64","isFloat","isFunction","isGenerator","isI16","isI32","isI8","isIterable","isKindAsync","isMap","isNull","isNumber","isParent","isPlainObject","isPrimitive","isPromise","isRegex","isRelated","isSafeInt","isSet","isString","isTypedArray","isU16","isU32","isU8","isU8C","isUndefined","isWeakMap","noValue"]},{"title":"utility","items":["UniqID","UniqID.free","UniqID.get","assert","bindAll","cacheNativeMethod","clone","compact","compactMap","concurrent","concurrentStatus","each","every","falsey","filter","flow","flowAsync","flowAsyncRight","flowRight","forOfCompactMap","forOfCompactMap","forOfCompactMapAsync","forOfCompactMapAsync","forOfEvery","forOfEveryAsync","forOfFilter","forOfFilterAsync","get","has","hasDot","hasLength","ifNotAssign","isEqual","jsonParse","map","model","notEqual","pair","promise","propertyMatch","returnValue","stringify","stubArray","stubFalse","stubObject","stubString","stubTrue","times","timesAsync","timesMap","toPath","toggle","truey","uniqID"]}],"items":{"chunk":{"category":"array","description":"Chunks an array according to a user defined number.","examples":[{"tag":"example","optional":false,"description":"import { chunk, assert } from 'Acid'; assert(chunk([1,2,3], 1), [[1],[2],[3]]);","source":"import { chunk, assert } from \"Acid\";\nassert(chunk([1, 2, 3], 1), [[1], [2], [3]]);\n"}],"name":"chunk","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be chunked.","source":"*  {Array} array - Array to be chunked."},{"tag":"param","name":"size","type":"Number","optional":false,"description":"- Number which determines the size of each chunk.","source":"*  {Number} size - Number which determines the size of each chunk."}],"type":"function","functionTag":"chunk","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"A chunked version of the source array.","source":"*  {Array} - A chunked version of the source array.\n\t *"}},"clear":{"category":"array","description":"Clears the values out of an array.","examples":[{"tag":"example","optional":false,"description":"import { clear, assert } from 'Acid'; assert(clear([1,'B', 'Cat']), []);","source":"import { clear, assert } from \"Acid\";\nassert(clear([1, \"B\", \"Cat\"]), []);\n"}],"name":"clear","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Takes an array to be emptied.","source":"*  {Array} array - Takes an array to be emptied."}],"type":"function","functionTag":"clear","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"cloneArray":{"category":"array","description":"Clone an array (uses .slice()) and assign the source arrays values to the new array.","examples":[{"tag":"example","optional":false,"description":"import { cloneArray, assert } from 'Acid'; assert(cloneArray([1,'B', 'Cat']), [1, 'B', 'Cat']);","source":"import { cloneArray, assert } from \"Acid\";\nassert(cloneArray([1, \"B\", \"Cat\"]), [1, \"B\", \"Cat\"]);\n"}],"name":"cloneArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array to be quick cloned.","source":"*  {Array} source - The array to be quick cloned."}],"type":"function","functionTag":"cloneArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The newly cloned array with assigned items.","source":"*  {Array} - The newly cloned array with assigned items.\n\t *"}},"isUndefined":{"category":"type","description":"Checks if the value is undefined.","examples":[{"tag":"example","optional":false,"description":"import { isUndefined, assert } from 'Acid'; assert(isUndefined(undefined), true);","source":"import { isUndefined, assert } from \"Acid\";\nassert(isUndefined(undefined), true);\n"}],"name":"isUndefined","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isUndefined","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"hasLength":{"category":"utility","description":"Checks if the value has length greater than 0.","examples":[{"tag":"example","optional":false,"description":"import { hasLength, assert } from 'Acid'; assert(hasLength([1]), true);","source":"import { hasLength, assert } from \"Acid\";\nassert(hasLength([1]), true);\n"}],"name":"hasLength","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"hasLength","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isNull":{"category":"type","description":"Checks if the value is null.","examples":[{"tag":"example","optional":false,"description":"import { isNull, assert } from 'Acid'; assert(isNull(null), true);","source":"import { isNull, assert } from \"Acid\";\nassert(isNull(null), true);\n"}],"name":"isNull","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isNull","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"hasValue":{"category":"type","description":"Checks if the value is not null or undefined.","examples":[{"tag":"example","optional":false,"description":"import { hasValue, assert } from 'Acid'; assert(hasValue(1), true);","source":"import { hasValue, assert } from \"Acid\";\nassert(hasValue(1), true);\n"}],"name":"hasValue","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"hasValue","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"returnValue":{"category":"utility","description":"A simple function which returns the value it's given.","name":"returnValue","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object.","source":"*  {*} source - The source object."}],"type":"function","functionTag":"returnValue","returns":{"tag":"returns","name":"The","type":"source","optional":false,"description":"source object.","source":"*  {source} The source object.\n\t */"}},"eachArray":{"category":"array","description":"Iterates through the given array.","examples":[{"tag":"example","optional":false,"description":"import { eachArray, assert } from 'Acid'; const list = []; eachArray([1, 2, 3], (item, index) => { list[index] = item; }); assert(list, [1, 2, 3]);","source":"import { eachArray, assert } from \"Acid\";\nconst list = [];\neachArray([1, 2, 3], (item, index) => {\n  list[index] = item;\n});\nassert(list, [1, 2, 3]);\n"}],"name":"eachArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"eachArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"compactMapArray":{"category":"array","description":"Iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"import { compactMapArray, assert } from 'Acid'; assert(compactMapArray([null, 2, 3], (item) => { return item; }), [2, 3]);","source":"import { compactMapArray, assert } from \"Acid\";\nassert(\n  compactMapArray([null, 2, 3], (item) => {\n    return item;\n  }),\n  [2, 3]\n);\n"}],"name":"compactMapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} results - Array that will be used to assign results. Default value is a new empty array."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"compactMapArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with mapped properties that are not null or undefined.","source":"*  {Array} - An array with mapped properties that are not null or undefined.\n\t *"}},"eachAsyncArray":{"category":"array","description":"Asynchronously Iterates through the given array. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","optional":false,"description":"import { eachAsyncArray, assert } from 'Acid'; const tempList = []; await eachAsyncArray([1, 2, 3], async (item) => { tempList.push(item); }); assert(tempList, [1, 2, 3]);","source":"import { eachAsyncArray, assert } from \"Acid\";\nconst tempList = [];\nawait eachAsyncArray([1, 2, 3], async (item) => {\n  tempList.push(item);\n});\nassert(tempList, [1, 2, 3]);\n"}],"name":"eachAsyncArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"type":"function","isAsync":true,"functionTag":"eachAsyncArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns source the originally given array.","source":"*  {Array} - Returns source the originally given array.\n\t *"}},"compactMapAsyncArray":{"category":"array","description":"Asynchronously iterates through the calling array and creates an array with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"import { compactMapAsync, assert } from 'Acid'; assert(await compactMapAsync([1, 2, 3, null], async (item) => { return item; }), [1, 2, 3]);","source":"import { compactMapAsync, assert } from \"Acid\";\nassert(\n  await compactMapAsync([1, 2, 3, null], async (item) => {\n    return item;\n  }),\n  [1, 2, 3]\n);\n"}],"name":"compactMapAsyncArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to be compacted.","source":"*  {Array} source - Array to be compacted."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Iteratee to be performed on array.","source":"*  {Function} iteratee - Iteratee to be performed on array."}],"type":"function","isAsync":true,"functionTag":"compactMapAsyncArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array values after being put through an iterator.","source":"*  {Array} - Array values after being put through an iterator.\n\t *"}},"range":{"category":"array","description":"Create a numbered list of integers.","examples":[{"tag":"example","optional":false,"description":"import { range, assert } from 'Acid'; assert(range(0, 30, 5), [0, 5, 10, 15, 20, 25]);","source":"import { range, assert } from \"Acid\";\nassert(range(0, 30, 5), [0, 5, 10, 15, 20, 25]);\n"}],"name":"range","params":[{"tag":"param","name":"start","type":"Number","optional":false,"description":"- Value which determines the start of the range.","source":"*  {Number} start - Value which determines the start of the range."},{"tag":"param","name":"end","type":"Number","optional":false,"description":"- Value which determines the end of the range.","source":"*  {Number} end - Value which determines the end of the range."},{"tag":"param","name":"step","type":"Number","optional":false,"description":"- Value used to step between integers.","source":"*  {Number} step - Value used to step between integers."}],"type":"function","functionTag":"range","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of integers.","source":"*  {Array} - An array of integers.\n\t *"}},"isArray":{"category":"type","description":"Checks if the value is an array. This references Array.isArray.","examples":[{"tag":"example","optional":false,"description":"import { isArray, assert } from 'Acid'; assert(isArray([]), true); assert(isArray(2), false);","source":"import { isArray, assert } from \"Acid\";\nassert(isArray([]), true);\nassert(isArray(2), false);\n"}],"name":"isArray","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isArray","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"ensureArray":{"category":"array","description":"Ensures the source is an array if not the source is wrapped in a array or an empty array is returned.","examples":[{"tag":"example","optional":false,"description":"import { isArray, ensureArray, assert } from 'Acid'; assert(isArray(ensureArray('test')), ['test']);","source":"import { isArray, ensureArray, assert } from \"Acid\";\nassert(isArray(ensureArray(\"test\")), [\"test\"]);\n"}],"name":"ensureArray","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"ensureArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"}},"flattenDeep":{"category":"array","description":"Flattens an array to a single level.","examples":[{"tag":"example","optional":false,"description":"import { flattenDeep, assert } from 'Acid'; assert(flattenDeep([1, [2, [3, [4]], 5]]), [1, 2, 3, 4, 5]);","source":"import { flattenDeep, assert } from \"Acid\";\nassert(flattenDeep([1, [2, [3, [4]], 5]]), [1, 2, 3, 4, 5]);\n"}],"name":"flattenDeep","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to flatten.","source":"*  {Array} source - Array to flatten."}],"type":"function","functionTag":"flattenDeep","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"}},"construct":{"category":"class","description":"A function which acts like the \"new\" operator and can pass arguments. This is a safe version of the original which will error if given undefined This is useful when working with classes and prefering to avoid the new operator and it's potential side effects.","examples":[{"tag":"example","optional":false,"description":"import { construct, assert } from 'Acid'; class test { constructor(a) { return 1; } } const newClass = construct(test, [1]); assert(test, 1);","source":"import { construct, assert } from \"Acid\";\nclass test {\n  constructor(a) {\n    return 1;\n  }\n}\nconst newClass = construct(test, [1]);\nassert(test, 1);\n"}],"name":"construct","params":[{"tag":"param","name":"target","type":"Function","optional":false,"description":"- The target function or class.","source":"*  {Function} target - The target function or class."},{"tag":"param","name":"argumentsList","type":"Array","optional":true,"description":"- An array-like object specifying the arguments with which target should be called. Default value is a new empty array.","source":"*  {Array} [argumentsList =[]] - An array-like object specifying the arguments with which target should be called. Default value is a new empty array.","default":"[]"},{"tag":"param","name":"newTarget","type":"Array","optional":false,"description":"- The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target.","source":"*  {Array} newTarget - The constructor whose prototype should be used. See also the new.target operator. If newTarget is not present, its value defaults to target."}],"type":"function","functionTag":"construct","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.","source":"*  {*} - A new instance of target (or newTarget, if present), initialized by target as a constructor with the given argumentsList.\n\t *"}},"difference":{"category":"array","description":"Checks for primitive differences between a source array to other arrays, then returns a new array containing those differences.","examples":[{"tag":"example","optional":false,"description":"import { difference, assert } from 'Acid'; assert(difference([1, 2, 3], [1, 2]));","source":"import { difference, assert } from \"Acid\";\nassert(difference([1, 2, 3], [1, 2]));\n"}],"name":"difference","params":[{"tag":"param","name":"sources","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} sources - Source array."},{"tag":"param","name":"compare","type":"...Array","optional":false,"description":"- Array(s) source array is compared against.","source":"*  {...Array} compare - Array(s) source array is compared against."}],"type":"function","functionTag":"difference","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array which contains the differences between the source and compare array.","source":"*  {Array} - An array which contains the differences between the source and compare array.\n\t *"}},"drop":{"category":"array","description":"Removes all items from an array after a specified index.","examples":[{"tag":"example","optional":false,"description":"import { drop, assert } from 'Acid'; assert(drop([1, 2, 3], 1), [2, 3]);","source":"import { drop, assert } from \"Acid\";\nassert(drop([1, 2, 3], 1), [2, 3]);\n"}],"name":"drop","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} array - Source array."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- Amount of items to drop from the array.","source":"*  {Number} amount - Amount of items to drop from the array."},{"tag":"param","name":"upTo","type":"Number","optional":true,"description":"- Index to stop at.","source":"*  {Number} [upTo = array.length] - Index to stop at.","default":"array.length"}],"type":"function","functionTag":"drop","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with all values removed after a user defined index.","source":"*  {Array} - An array with all values removed after a user defined index.\n\t *"}},"dropRight":{"category":"array","description":"Removes all items from an array before a specified index.","examples":[{"tag":"example","optional":false,"description":"import { dropRight, assert } from 'Acid'; assert(dropRight([1, 2, 3], 1), [1, 2]);","source":"import { dropRight, assert } from \"Acid\";\nassert(dropRight([1, 2, 3], 1), [1, 2]);\n"}],"name":"dropRight","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Source array.","source":"*  {Array} array - Source array."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- Amount of items to drop from the array.","source":"*  {Number} amount - Amount of items to drop from the array."},{"tag":"param","name":"upTo","type":"Number","optional":true,"description":"- Index to stop at.","source":"*  {Number} [upTo = array.length] - Index to stop at.","default":"array.length"}],"type":"function","functionTag":"dropRight","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with all values removed before a user defined index.","source":"*  {Array} - An array with all values removed before a user defined index.\n\t *"}},"eachRight":{"category":"array","description":"Iterates through the given array in reverse.","examples":[{"tag":"example","optional":false,"description":"import { eachRight, assert } from 'Acid'; const tempList = []; eachRight([1, 2, 3], (item) => { tempList.push(item); }); assert(tempList, [3, 2, 1]);","source":"import { eachRight, assert } from \"Acid\";\nconst tempList = [];\neachRight([1, 2, 3], (item) => {\n  tempList.push(item);\n});\nassert(tempList, [3, 2, 1]);\n"}],"name":"eachRight","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"eachRight","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"eachRightAsync":{"category":"array","description":"Asynchronously Iterates through the given array in reverse. Each async function is awaited as to ensure synchronous order.","examples":[{"tag":"example","optional":false,"description":"import { eachRightAsync, assert } from 'Acid'; const tempList = []; await eachRightAsync([1, 2, 3], async (item) => { tempList.push(item); }); assert(tempList, [3, 2, 1]);","source":"import { eachRightAsync, assert } from \"Acid\";\nconst tempList = [];\nawait eachRightAsync([1, 2, 3], async (item) => {\n  tempList.push(item);\n});\nassert(tempList, [3, 2, 1]);\n"}],"name":"eachRightAsync","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."}],"type":"function","isAsync":true,"functionTag":"eachRightAsync","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"}},"everyArray":{"category":"array","description":"Iterates through the given array while the iteratee returns true else the loop exits & returns false.","examples":[{"tag":"example","optional":false,"description":"import { everyArray, assert } from 'Acid'; assert(everyArray([true, true, false], (item, index, source, sourceLength, thisBind) => { return item; }), false); assert(everyArray([true, true, true], (item, index, source, sourceLength, thisBind) => { return item; }), true);","source":"import { everyArray, assert } from \"Acid\";\nassert(\n  everyArray(\n    [true, true, false],\n    (item, index, source, sourceLength, thisBind) => {\n      return item;\n    }\n  ),\n  false\n);\nassert(\n  everyArray(\n    [true, true, true],\n    (item, index, source, sourceLength, thisBind) => {\n      return item;\n    }\n  ),\n  true\n);\n"}],"name":"everyArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"everyArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns true if all returns are true or false if one value returns false.","source":"*  {Array} - Returns true if all returns are true or false if one value returns false.\n\t *"}},"everyAsyncArray":{"category":"array","description":"Iterates through the given array while the iteratee returns true else the loop exits & returns false.","examples":[{"tag":"example","optional":false,"description":"import { everyAsyncArray, assert } from 'Acid'; assert(everyAsyncArray([true, true, false], (item, index, source, sourceLength, thisBind) => { return item; }), false); assert(everyAsyncArray([true, true, true], (item, index, source, sourceLength, thisBind) => { return item; }), true);","source":"import { everyAsyncArray, assert } from \"Acid\";\nassert(\n  everyAsyncArray(\n    [true, true, false],\n    (item, index, source, sourceLength, thisBind) => {\n      return item;\n    }\n  ),\n  false\n);\nassert(\n  everyAsyncArray(\n    [true, true, true],\n    (item, index, source, sourceLength, thisBind) => {\n      return item;\n    }\n  ),\n  true\n);\n"}],"name":"everyAsyncArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"everyAsyncArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns true if all returns are true or false if one value returns false.","source":"*  {Array} - Returns true if all returns are true or false if one value returns false.\n\t *"}},"filterArray":{"category":"array","description":"Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { filterArray, assert } from 'Acid'; assert(filterArray([false, true, true], (item) => { return item; }), [true, true]);","source":"import { filterArray, assert } from \"Acid\";\nassert(\n  filterArray([false, true, true], (item) => {\n    return item;\n  }),\n  [true, true]\n);\n"}],"name":"filterArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created object, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results.","source":"*  {Array} results - Array that will be used to assign results."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"filterArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with properties that passed the test.","source":"*  {Array} - An array with properties that passed the test.\n\t *"}},"filterAsyncArray":{"category":"array","description":"Iterates through the calling array and creates an array with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { filterAsyncArray, assert } from 'Acid'; assert(filterAsyncArray([false, true, true], (item) => { return item; }), [true, true]);","source":"import { filterAsyncArray, assert } from \"Acid\";\nassert(\n  filterAsyncArray([false, true, true], (item) => {\n    return item;\n  }),\n  [true, true]\n);\n"}],"name":"filterAsyncArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created object, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created object, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results.","source":"*  {Array} results - Array that will be used to assign results."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"filterAsyncArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with properties that passed the test.","source":"*  {Array} - An array with properties that passed the test.\n\t *"}},"first":{"category":"array","description":"Takes the first or multiple items from an array.","examples":[{"tag":"example","optional":false,"description":"import { first, assert } from 'Acid'; assert(first([1, 2, 3]), 1);","source":"import { first, assert } from \"Acid\";\nassert(first([1, 2, 3]), 1);\n"}],"name":"first","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to extract from.","source":"*  {Array} array - Array to extract from."},{"tag":"param","name":"upTo","type":"Number","optional":false,"description":"- Number which determines how many items after the first item are extracted from the array.","source":"*  {Number} upTo - Number which determines how many items after the first item are extracted from the array."}],"type":"function","functionTag":"first","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"}},"flatten":{"category":"array","description":"Flattens an array up to the provided level.","examples":[{"tag":"example","optional":false,"description":"import { flatten, assert } from 'Acid'; assert(flatten([1, [2, [3, [4]], 5]]), [1, 2, [3, [4]], 5]);","source":"import { flatten, assert } from \"Acid\";\nassert(flatten([1, [2, [3, [4]], 5]]), [1, 2, [3, [4]], 5]);\n"}],"name":"flatten","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to flatten.","source":"*  {Array} source - Array to flatten."},{"tag":"param","name":"level","type":"Number","optional":true,"description":"- Number which determines how deep the array nest can be.","source":"*  {Number} [level = 1] - Number which determines how deep the array nest can be.","default":"1"}],"type":"function","functionTag":"flatten","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"}},"initial":{"category":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","optional":false,"description":"import { initial, assert } from 'Acid'; assert(initial([1, 2, 3, 4, 5]), [1, 2, 3, 4]);","source":"import { initial, assert } from \"Acid\";\nassert(initial([1, 2, 3, 4, 5]), [1, 2, 3, 4]);\n"}],"name":"initial","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} array - Array to have items extracted from."}],"type":"function","functionTag":"initial","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"}},"intersection":{"category":"array","description":"Returns an new array that is the [set intersection](http://en.wikipedia.org/wiki/Intersection_(set_theory)) of the array and the input array(s).","examples":[{"tag":"example","optional":false,"description":"import { intersection, assert } from 'Acid'; assert(intersection([1, 2, 3], [2, 3, 4]), [2, 3]);","source":"import { intersection, assert } from \"Acid\";\nassert(intersection([1, 2, 3], [2, 3, 4]), [2, 3]);\n"}],"name":"intersection","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to compare other arrays to.","source":"*  {Array} array - Array to compare other arrays to."},{"tag":"param","name":"arrays","type":"...Array","optional":false,"description":"- A variable number of arrays.","source":"*  {...Array} arrays - A variable number of arrays."}],"type":"function","functionTag":"intersection","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The new array of unique values shared by all of the arrays.","source":"*  {Array} - The new array of unique values shared by all of the arrays.\n\t *"}},"keys":{"category":"object","description":"Get object's keys.","examples":[{"tag":"example","optional":false,"description":"keys({a: 1, b: 2}); // => ['a', 'b']","source":"keys({ a: 1, b: 2 });\n// => ['a', 'b']\n"}],"name":"keys","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object to pull keys from.","source":"*  {*} source - The source object to pull keys from."}],"type":"function","functionTag":"keys","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of keys.","source":"*  {Array} - Array of keys.\n\t *"}},"toPath":{"category":"utility","description":"Breaks up string into object chain list.","examples":[{"tag":"example","optional":false,"description":"import { toPath, assert } from 'Acid'; assert(toPath('post.like[2]'), ['post', 'like', '2']);","source":"import { toPath, assert } from \"Acid\";\nassert(toPath(\"post.like[2]\"), [\"post\", \"like\", \"2\"]);\n"}],"name":"toPath","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be broken up.","source":"*  {String} source - String to be broken up."}],"type":"function","functionTag":"toPath","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array used to go through object chain.","source":"*  {Array} - Array used to go through object chain.\n\t *"}},"get":{"category":"utility","description":"Returns property on an object.","examples":[{"tag":"example","optional":false,"description":"import { get, assert } from 'Acid'; const objectTarget = { post: { like: ['a','b','c'] } }; assert(get('post.like[2]', objectTarget), 'c');","source":"import { get, assert } from \"Acid\";\nconst objectTarget = { post: { like: [\"a\", \"b\", \"c\"] } };\nassert(get(\"post.like[2]\", objectTarget), \"c\");\n"}],"name":"get","params":[{"tag":"param","name":"propertyString","type":"String","optional":false,"description":"- String used to retrieve properties.","source":"*  {String} propertyString - String used to retrieve properties."},{"tag":"param","name":"target","type":"Object","optional":false,"description":"- Object which has a property retrieved from it.","source":"*  {Object} target - Object which has a property retrieved from it."}],"type":"function","functionTag":"get","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns property from the given object.","source":"*  {Object} - Returns property from the given object.\n\t *"}},"hasKeys":{"category":"object","description":"Checks to see if an object has all of the given property names.","examples":[{"tag":"example","optional":false,"description":"import { hasKeys, assert } from 'Acid'; assert(hasKeys({a: {b: { c: 1}}}, 'a', 'a.b', 'a.b.c'), true);","source":"import { hasKeys, assert } from \"Acid\";\nassert(hasKeys({ a: { b: { c: 1 } } }, \"a\", \"a.b\", \"a.b.c\"), true);\n"}],"name":"hasKeys","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object to check for keys.","source":"*  {Object} source - Source object to check for keys."},{"tag":"param","name":"properties","type":"...String","optional":false,"description":"- List of strings to check.","source":"*  {...String} properties - List of strings to check."}],"type":"function","functionTag":"hasKeys","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"hasAnyKeys":{"category":"object","description":"Checks to see if an object has any of the given property names.","examples":[{"tag":"example","optional":false,"description":"import { hasAnyKeys, assert } from 'Acid'; assert(hasAnyKeys({a: {b: { yes : 1}}}, 'no', 'nope', 'a.b.yes'), true); assert(hasAnyKeys({a: {b: { yes : 1}}}, 'no', 'nope', 'a.b.noped'), false);","source":"import { hasAnyKeys, assert } from \"Acid\";\nassert(hasAnyKeys({ a: { b: { yes: 1 } } }, \"no\", \"nope\", \"a.b.yes\"), true);\nassert(hasAnyKeys({ a: { b: { yes: 1 } } }, \"no\", \"nope\", \"a.b.noped\"), false);\n"}],"name":"hasAnyKeys","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object to check for keys.","source":"*  {Object} source - Source object to check for keys."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- List of strings to check.","source":"*  {Array} properties - List of strings to check."}],"type":"function","functionTag":"hasAnyKeys","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isPlainObject":{"category":"type","description":"Checks if the value is a plain object.","examples":[{"tag":"example","optional":false,"description":"import { isPlainObject } from 'Acid'; isPlainObject({}); // => true","source":"import { isPlainObject } from \"Acid\";\nisPlainObject({});\n// => true\n"}],"name":"isPlainObject","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isPlainObject","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isEqual":{"category":"utility","description":"Performs a deep comparison between two objects & determines if the value is the same using strict comparison.","examples":[{"tag":"example","optional":false,"description":"import { isEqual, assert } from 'Acid'; assert(isEqual({a: [1,2,3]}, {a: [1,2,3]}), true);","source":"import { isEqual, assert } from \"Acid\";\nassert(isEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] }), true);\n"}],"name":"isEqual","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Source object.","source":"*  {*} source - Source object."},{"tag":"param","name":"target","type":"*","optional":false,"description":"- Object to be compared.","source":"*  {*} target - Object to be compared."}],"type":"function","functionTag":"isEqual","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isMatchArray":{"category":"array","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","optional":false,"description":"import { isMatchArray, assert } from 'Acid'; assert(isMatchArray([1, 2, 3], [1, 2, 3]), true);","source":"import { isMatchArray, assert } from \"Acid\";\nassert(isMatchArray([1, 2, 3], [1, 2, 3]), true);\n"}],"name":"isMatchArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Source object.","source":"*  {Array} source - Source object."},{"tag":"param","name":"compareArray","type":"Array","optional":false,"description":"- Object to compare to source.","source":"*  {Array} compareArray - Object to compare to source."}],"type":"function","functionTag":"isMatchArray","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"largest":{"category":"array","description":"Plucks the largest value from an array.","examples":[{"tag":"example","optional":false,"description":"import { largest, assert } from 'Acid'; assert(largest([1,2,3]), 3);","source":"import { largest, assert } from \"Acid\";\nassert(largest([1, 2, 3]), 3);\n"}],"name":"largest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array from which largest number is taken.","source":"*  {Array} array - Array from which largest number is taken."}],"type":"function","functionTag":"largest","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The largest number.","source":"*  {Number} - The largest number.\n\t *"}},"last":{"category":"array","description":"Extracts item(s) from an array starting from the last item in the array.","examples":[{"tag":"example","optional":false,"description":"import { last, assert } from 'Acid'; assert(last([1, 2, 3, 4, 5] , 2), [4, 5]);","source":"import { last, assert } from \"Acid\";\nassert(last([1, 2, 3, 4, 5], 2), [4, 5]);\n"}],"name":"last","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} array - Array to have items extracted from."},{"tag":"param","name":"indexFrom","type":"Number","optional":true,"description":"- Value which determines how many items are extracted from the array.","source":"*  {Number} [indexFrom = 0] - Value which determines how many items are extracted from the array.","default":"0"}],"type":"function","functionTag":"last","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Items from the array.","source":"*  {Array} - Items from the array.\n\t *"}},"mapArray":{"category":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"import { mapArray, assert } from 'Acid'; assert(mapArray([1, 2, 3], (item) => { return item * 2; }), [2, 4, 6]);","source":"import { mapArray, assert } from \"Acid\";\nassert(\n  mapArray([1, 2, 3], (item) => {\n    return item * 2;\n  }),\n  [2, 4, 6]\n);\n"}],"name":"mapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results.","source":"*  {Array} results - Array that will be used to assign results."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"mapArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of the same calling array's type.","source":"*  {Array} - An array of the same calling array's type.\n\t *"}},"mapAsyncArray":{"category":"array","description":"Asynchronously iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array.","examples":[{"tag":"example","optional":false,"description":"import { mapAsyncArray, assert } from 'Acid'; assert(await mapAsyncArray([1, 2, 3], async (item) => { return item * 2; }), [2, 4, 6]);","source":"import { mapAsyncArray, assert } from \"Acid\";\nassert(\n  await mapAsyncArray([1, 2, 3], async (item) => {\n    return item * 2;\n  }),\n  [2, 4, 6]\n);\n"}],"name":"mapAsyncArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."}],"type":"function","isAsync":true,"functionTag":"mapAsyncArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of the same calling array's type.","source":"*  {Array} - An array of the same calling array's type.\n\t *"}},"mapRightArray":{"category":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array in reverse.","examples":[{"tag":"example","optional":false,"description":"import { mapRightArray, assert } from 'Acid'; assert(mapRightArray([1, 2, 3], (item) => { return item * 2; }), [6, 4, 2]);","source":"import { mapRightArray, assert } from \"Acid\";\nassert(\n  mapRightArray([1, 2, 3], (item) => {\n    return item * 2;\n  }),\n  [6, 4, 2]\n);\n"}],"name":"mapRightArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} results - Array that will be used to assign results. Default value is a new empty array."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"mapRightArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of the same calling array's type.","source":"*  {Array} - An array of the same calling array's type.\n\t *"}},"mapWhile":{"category":"array","description":"Iterates through the given and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { mapWhile, assert } from 'Acid'; assert(mapWhile([1, 2, 0], (item) => { return Boolean(item); }), [1, 2]);","source":"import { mapWhile, assert } from \"Acid\";\nassert(\n  mapWhile([1, 2, 0], (item) => {\n    return Boolean(item);\n  }),\n  [1, 2]\n);\n"}],"name":"mapWhile","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, the newly created array, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, the newly created array, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} results - Array that will be used to assign results. Default value is a new empty array."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"mapWhile","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with properties that passed the test.","source":"*  {Array} - An array with properties that passed the test.\n\t *"}},"numSort":{"category":"array","description":"Sorts an array in place using a numerical comparison algorithm from lowest to highest.","examples":[{"tag":"example","optional":false,"description":"numSort([10, 0, 2, 1]); // => [0, 1, 2, 10]","source":"numSort([10, 0, 2, 1]);\n// => [0, 1, 2, 10]\n"}],"name":"numSort","params":[{"tag":"param","name":"numberList","type":"Array","optional":false,"description":"- Array of numbers.","source":"*  {Array} numberList - Array of numbers."}],"type":"function","functionTag":"numSort","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"arrayToObject":{"category":"array","description":"Takes all but the last item in the array.","examples":[{"tag":"example","optional":false,"description":"import { arrayToObject, assert } from 'Acid'; assert(arrayToObject([1, 2, 3], ['a', 'b', 'c']), {a:1, b:2, c: 3});","source":"import { arrayToObject, assert } from \"Acid\";\nassert(arrayToObject([1, 2, 3], [\"a\", \"b\", \"c\"]), { a: 1, b: 2, c: 3 });\n"}],"name":"arrayToObject","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} source - Array to have items extracted from."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- Array to have items extracted from.","source":"*  {Array} properties - Array to have items extracted from."}],"type":"function","functionTag":"arrayToObject","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns a completely flattened array.","source":"*  {Array} - Returns a completely flattened array.\n\t *"}},"partition":{"category":"array","description":"Split array into two arrays: one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.","examples":[{"tag":"example","optional":false,"description":"partition([ {user: 'barney', age: 36, active: false}, {user: 'fred', age: 40, active: true}, {user: 'pebbles', age: 1,  active: false} ], (item) => { return item.active; }); // => [ [{\"user\":\"fred\",\"age\":40,\"active\":true}], [{\"user\":\"barney\",\"age\":36,\"active\":false}, {\"user\":\"pebbles\",\"age\":1,\"active\":false}]]","source":"partition(\n  [\n    { user: \"barney\", age: 36, active: false },\n    { user: \"fred\", age: 40, active: true },\n    { user: \"pebbles\", age: 1, active: false },\n  ],\n  (item) => {\n    return item.active;\n  }\n);\n// => [ [{\"user\":\"fred\",\"age\":40,\"active\":true}], [{\"user\":\"barney\",\"age\":36,\"active\":false}, {\"user\":\"pebbles\",\"age\":1,\"active\":false}]]\n"}],"name":"partition","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Takes an array to split.","source":"*  {Array} array - Takes an array to split."},{"tag":"param","name":"funct","type":"Function","optional":false,"description":"- Function run on each item in array.","source":"*  {Function} funct - Function run on each item in array."}],"type":"function","functionTag":"partition","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"One array split into two arrays.","source":"*  {Array} - One array split into two arrays.\n\t *"}},"rNumSort":{"category":"array","description":"Sorts an array in place using a reverse numerical comparison algorithm from highest to lowest.","examples":[{"tag":"example","optional":false,"description":"rNumSort([10, 0, 2, 1]); // => [10, 2, 1, 0]","source":"rNumSort([10, 0, 2, 1]);\n// => [10, 2, 1, 0]\n"}],"name":"rNumSort","params":[{"tag":"param","name":"numberList","type":"Array","optional":false,"description":"- Array of numbers.","source":"*  {Array} numberList - Array of numbers."}],"type":"function","functionTag":"rNumSort","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"remove":{"category":"array","description":"Removes all occurrences of the passed in items from the array and returns the array. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","optional":false,"description":"remove([1, 2, 3, 3, 4, 3, 5], 1); // => [2, 3, 3, 4, 3, 5]","source":"remove([1, 2, 3, 3, 4, 3, 5], 1);\n// => [2, 3, 3, 4, 3, 5]\n"},{"tag":"example","optional":false,"description":"remove([3, 3, 4, 5], 3, 4); // => [5]","source":"remove([3, 3, 4, 5], 3, 4);\n// => [5]\n"}],"name":"remove","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be mutated.","source":"*  {Array} array - Array to be mutated."},{"tag":"param","name":"removeThese","type":"String|Array","optional":false,"description":"- Items to remove from the array.","source":"*  {String|Array} removeThese - Items to remove from the array."}],"type":"function","functionTag":"remove","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"removeBy":{"category":"array","description":"Removes items that pass the method's test. This mutates the given array. Clone the array if you desire to avoid mutation.","examples":[{"tag":"example","optional":false,"description":"removeBy([1, 2, 3, 3, 4, 3, 5], (item) => { return Boolean(item % 2);}); // => [2, 4]","source":"removeBy([1, 2, 3, 3, 4, 3, 5], (item) => {\n  return Boolean(item % 2);\n});\n// => [2, 4]\n"}],"name":"removeBy","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to be mutated.","source":"*  {Array} source - Array to be mutated."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Function used to check object. Return true to remove the value.","source":"*  {Function} iteratee - Function used to check object. Return true to remove the value."}],"type":"function","functionTag":"removeBy","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array this method was called on.","source":"*  {Array} - The array this method was called on.\n\t *"}},"rest":{"category":"array","description":"Extracts all items in array except the first and last item.","examples":[{"tag":"example","optional":false,"description":"rest([1, 2, 3, 4, 5]); // => [2, 3, 4, 5]","source":"rest([1, 2, 3, 4, 5]);\n// => [2, 3, 4, 5]\n"}],"name":"rest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be sliced.","source":"*  {Array} array - Array to be sliced."}],"type":"function","functionTag":"rest","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the aggregated array.","source":"*  {Array} - Returns the aggregated array.\n\t *"}},"right":{"category":"array","description":"Get the item at the supplied index starting at the end of the array.","examples":[{"tag":"example","optional":false,"description":"right([1, 2, 3, 4, 5] , 1); // => 4","source":"right([1, 2, 3, 4, 5], 1);\n// => 4\n"}],"name":"right","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array to be sliced.","source":"*  {Array} source - Array to be sliced."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- Amount from the right.","source":"*  {Number} amount - Amount from the right."}],"type":"function","functionTag":"right","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the object at the evaluated position.","source":"*  {*} - Returns the object at the evaluated position.\n\t *"}},"randomInt":{"category":"number","description":"Produces a random whole number between min (included) and max (excluded). Do not use for security or encryption.","examples":[{"tag":"example","optional":false,"description":"import { randomInt, assert } from 'Acid'; assert(randomInt(10, 0), (value) => { return value > 0 && value < 10;});","source":"import { randomInt, assert } from \"Acid\";\nassert(randomInt(10, 0), (value) => {\n  return value > 0 && value < 10;\n});\n"}],"name":"randomInt","params":[{"tag":"param","name":"max","type":"Number","optional":false,"description":"- The highest possible value for the random number.","source":"*  {Number} max - The highest possible value for the random number."},{"tag":"param","name":"min","type":"Number","optional":true,"description":"- Establishes lowest possible value for the random number.","source":"*  {Number} [min = 0] - Establishes lowest possible value for the random number.","default":"0"}],"type":"function","functionTag":"randomInt","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns random integer between the max and min range.","source":"*  {Number} - Returns random integer between the max and min range.\n\t *"}},"toArray":{"category":"array","description":"Takes an array like object and creates a new Array from it.","examples":[{"tag":"example","optional":false,"description":"toArray([1, 2, 3]); // => [1, 2, 3]","source":"toArray([1, 2, 3]);\n// => [1, 2, 3]\n"}],"name":"toArray","params":[{"tag":"param","name":"arrayLike","type":"*","optional":false,"description":"- Array like object.","source":"*  {*} arrayLike - Array like object."}],"type":"function","functionTag":"toArray","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"New array.","source":"*  {*} - New array.\n\t *"}},"isNumberEqual":{"category":"number","description":"Checks if two numbers are the same.","examples":[{"tag":"example","optional":false,"description":"import { isNumberEqual, assert } from 'Acid'; assert(isNumberEqual(0, 0), true);","source":"import { isNumberEqual, assert } from \"Acid\";\nassert(isNumberEqual(0, 0), true);\n"}],"name":"isNumberEqual","params":[{"tag":"param","name":"source","type":"Number","optional":false,"description":"- Number to be checked.","source":"*  {Number} source - Number to be checked."},{"tag":"param","name":"target","type":"Number","optional":false,"description":"- Number to be checked.","source":"*  {Number} target - Number to be checked."}],"type":"function","functionTag":"isNumberEqual","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"shuffle":{"category":"array","description":"Shuffle an array and return a new array.","examples":[{"tag":"example","optional":false,"description":"import { shuffle, assert } from 'Acid'; assert(shuffle([1, 2, 3, 4]), [3, 4, 2, 1]);","source":"import { shuffle, assert } from \"Acid\";\nassert(shuffle([1, 2, 3, 4]), [3, 4, 2, 1]);\n"}],"name":"shuffle","params":[{"tag":"param","name":"target","type":"Array","optional":false,"description":"- Target Array to be shuffled.","source":"*  {Array} target - Target Array to be shuffled."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of times to shuffle the array.","source":"*  {Number} amount - The amount of times to shuffle the array."}],"type":"function","functionTag":"shuffle","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with the shuffled results.","source":"*  {Array} - An array with the shuffled results.\n\t *"}},"sample":{"category":"array","description":"Produce a random sample from the list. Pass a number to return n random elements from the list. Otherwise a single random item will be returned.","examples":[{"tag":"example","optional":false,"description":"sample([1, 2, 3, 4] , 2); // => [1, 3]","source":"sample([1, 2, 3, 4], 2);\n// => [1, 3]\n"}],"name":"sample","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array to pull sample(s) from.","source":"*  {Array} source - The array to pull sample(s) from."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of samples to take.","source":"*  {Number} amount - The amount of samples to take."}],"type":"function","functionTag":"sample","test":{"tag":"test","optional":false,"description":"(async () => { const tempResult = sample([1, 2] , 2); return assert(tempResult.includes(1) && tempResult.includes(2), true); });","source":"* \t * (async () => {\n\t *   const tempResult = sample([1, 2] , 2);\n\t *   return assert(tempResult.includes(1) && tempResult.includes(2), true);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of randomly pulled samples.","source":"*  {Array} - An array of randomly pulled samples.\n\t *"}},"smallest":{"category":"array","description":"Plucks the smallest value from an array.","examples":[{"tag":"example","optional":false,"description":"smallest([1,2,3]); // => 1","source":"smallest([1, 2, 3]);\n// => 1\n"}],"name":"smallest","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array from which smallest number is taken.","source":"*  {Array} array - Array from which smallest number is taken."}],"type":"function","functionTag":"smallest","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The smallest number.","source":"*  {Number} - The smallest number.\n\t *"}},"sortedIndex":{"category":"array","description":"Uses a binary search to determine the index at which the value should be inserted into the list in order to maintain the list's sorted order.","examples":[{"tag":"example","optional":false,"description":"sortedIndex([30, 50], 40); // => 1","source":"sortedIndex([30, 50], 40);\n// => 1\n"}],"name":"sortedIndex","params":[{"tag":"param","name":"array","type":"Array","optional":false,"description":"- Array to be sorted.","source":"*  {Array} array - Array to be sorted."},{"tag":"param","name":"insertThis","type":"Number","optional":false,"description":"- Number to be inserted.","source":"*  {Number} insertThis - Number to be inserted."}],"type":"function","functionTag":"sortedIndex","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The index at which to insert.","source":"*  {Number} - The index at which to insert.\n\t *"}},"take":{"category":"array","description":"Returns a shallow copy of the array up to an amount.","examples":[{"tag":"example","optional":false,"description":"import { take, assert } from 'Acid'; assert(take([1,2,3], 2), [1, 2]);","source":"import { take, assert } from \"Acid\";\nassert(take([1, 2, 3], 2), [1, 2]);\n"}],"name":"take","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The source array to take from.","source":"*  {Array} source - The source array to take from."},{"tag":"param","name":"endIndex","type":"Array","optional":true,"description":"- Zero-based index before which to end extraction.","source":"*  {Array} [endIndex = 1] - Zero-based index before which to end extraction.","default":"1"}],"type":"function","functionTag":"take","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"}},"takeRight":{"category":"array","description":"Returns a shallow copy of the array up to an amount starting from the right.","examples":[{"tag":"example","optional":false,"description":"import { takeRight, assert } from 'Acid'; assert(takeRight([1,2,3], 2), [2, 3]);","source":"import { takeRight, assert } from \"Acid\";\nassert(takeRight([1, 2, 3], 2), [2, 3]);\n"}],"name":"takeRight","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The source array to take right from.","source":"*  {Array} source - The source array to take right from."},{"tag":"param","name":"indexRight","type":"Array","optional":true,"description":"- Zero-based index from the right to begin extraction.","source":"*  {Array} [indexRight = 1] - Zero-based index from the right to begin extraction.","default":"1"}],"type":"function","functionTag":"takeRight","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"}},"unique":{"category":"array","description":"Filters the array down to unique elements.","examples":[{"tag":"example","optional":false,"description":"unique([1, 2, 2, 4]); // => [1, 2, 4]","source":"unique([1, 2, 2, 4]);\n// => [1, 2, 4]\n"}],"name":"unique","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array to be filtered.","source":"*  {Array} source - The array to be filtered."},{"tag":"param","name":"isSorted","type":"Boolean","optional":false,"description":"- Flag which means the array is already sorted.","source":"*  {Boolean} isSorted - Flag which means the array is already sorted."}],"type":"function","functionTag":"unique","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The filtered array.","source":"*  {Array} - The filtered array.\n\t *"}},"union":{"category":"array","description":"Computes the union of the passed-in arrays: the list of unique items, in order, that are present in one or more of the arrays.","examples":[{"tag":"example","optional":false,"description":"union([1,2,4], [1,2,3]); // => [1, 2, 4, 3]","source":"union([1, 2, 4], [1, 2, 3]);\n// => [1, 2, 4, 3]\n"}],"name":"union","params":[{"tag":"param","name":"arrays","type":"...Array","optional":false,"description":"- The arrays to be evaluated.","source":"*  {...Array} arrays - The arrays to be evaluated."}],"type":"function","functionTag":"union","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The aggregated array.","source":"*  {Array} - The aggregated array.\n\t *"}},"untilFalseArray":{"category":"array","description":"Loops through an array invoking an iteratee with (value, key). If the iteratee always yields true then true is returned. If and when the iteratee yields false the loop stops & false is returned.","examples":[{"tag":"example","optional":false,"description":"import { untilFalseArray, assert } from 'Acid'; assert(untilFalseArray([true, true, false], (item) => { return item; }), false); assert(untilFalseArray([true, true, true], (item) => { return item; }), true);","source":"import { untilFalseArray, assert } from \"Acid\";\nassert(\n  untilFalseArray([true, true, false], (item) => {\n    return item;\n  }),\n  false\n);\nassert(\n  untilFalseArray([true, true, true], (item) => {\n    return item;\n  }),\n  true\n);\n"}],"name":"untilFalseArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array to iterate over.","source":"*  {Array} source - The array to iterate over."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item & key and expects a boolean to be returned.","source":"*  {Function} iteratee - Transformation function which is passed item & key and expects a boolean to be returned."}],"type":"function","functionTag":"untilFalseArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns true if all returns are true or false if one value returns false.","source":"*  {Array} - Returns true if all returns are true or false if one value returns false.\n\t *"}},"untilTrueArray":{"category":"array","description":"Loops through an array invoking an iteratee with (value, key). If the iteratee always yields false then true is returned. If and when the iteratee yields true the loop stops & false is returned.","examples":[{"tag":"example","optional":false,"description":"import { untilTrueArray, assert } from 'Acid'; assert(untilTrueArray([true], (item) => { return item; }), false); assert(untilTrueArray([true, true, true], (item) => { return item; }), true);","source":"import { untilTrueArray, assert } from \"Acid\";\nassert(\n  untilTrueArray([true], (item) => {\n    return item;\n  }),\n  false\n);\nassert(\n  untilTrueArray([true, true, true], (item) => {\n    return item;\n  }),\n  true\n);\n"}],"name":"untilTrueArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array to iterate over.","source":"*  {Array} source - The array to iterate over."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item & key and expects a boolean to be returned.","source":"*  {Function} iteratee - Transformation function which is passed item & key and expects a boolean to be returned."}],"type":"function","functionTag":"untilTrueArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns true if all returns are false or false if one value returns true.","source":"*  {Array} - Returns true if all returns are false or false if one value returns true.\n\t *"}},"whileCompactMap":{"category":"array","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object. Re-checks the length each loop.","examples":[{"tag":"example","optional":false,"description":"import { whileCompactMap, assert } from 'Acid'; assert(whileCompactMap([1, 2, 3, false, undefined, null], (item) => { return item; }), [1, 2, 3, false]);","source":"import { whileCompactMap, assert } from \"Acid\";\nassert(\n  whileCompactMap([1, 2, 3, false, undefined, null], (item) => {\n    return item;\n  }),\n  [1, 2, 3, false]\n);\n"}],"name":"whileCompactMap","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} results - Array that will be used to assign results. Default value is a new empty array."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"whileCompactMap","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"whileEachArray":{"category":"array","description":"Iterates through the given array but re-checks the length each loop. Usefull while mutating the same array being looped over.","examples":[{"tag":"example","optional":false,"description":"import { whileEachArray, assert } from 'Acid'; const list = []; whileEachArray([1, 2, 3], (item, index) => { list[index] = item; }); assert(list, [1, 2, 3]);","source":"import { whileEachArray, assert } from \"Acid\";\nconst list = [];\nwhileEachArray([1, 2, 3], (item, index) => {\n  list[index] = item;\n});\nassert(list, [1, 2, 3]);\n"}],"name":"whileEachArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"whileEachArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"whileMapArray":{"category":"array","description":"Iterates through the calling array and creates an object with the results of the iteratee on every element in the calling array. Re-checks the length each loop.","examples":[{"tag":"example","optional":false,"description":"import { whileMapArray, assert } from 'Acid'; assert(whileMapArray([1, 2, 3], (item, index, source) => { if (index === 0) { source.push(4); } return item; }), [1, 2, 3, 4]);","source":"import { whileMapArray, assert } from \"Acid\";\nassert(\n  whileMapArray([1, 2, 3], (item, index, source) => {\n    if (index === 0) {\n      source.push(4);\n    }\n    return item;\n  }),\n  [1, 2, 3, 4]\n);\n"}],"name":"whileMapArray","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"results","type":"Array","optional":false,"description":"- Array that will be used to assign results. Default value is a new empty array.","source":"*  {Array} results - Array that will be used to assign results. Default value is a new empty array."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"whileMapArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The originally given array.","source":"*  {Array} - The originally given array.\n\t *"}},"without":{"category":"array","description":"Returns a copy of the array with all instances of the values removed.","examples":[{"tag":"example","optional":false,"description":"import { without, assert } from 'Acid'; assert(without([1, 2, 2, 4], [4]), [1, 2, 2]);","source":"import { without, assert } from \"Acid\";\nassert(without([1, 2, 2, 4], [4]), [1, 2, 2]);\n"}],"name":"without","params":[{"tag":"param","name":"target","type":"Array","optional":false,"description":"- The target array to be filtered.","source":"*  {Array} target - The target array to be filtered."},{"tag":"param","name":"sources","type":"Array","optional":false,"description":"- Items to be removed.","source":"*  {Array} sources - Items to be removed."}],"type":"function","functionTag":"without","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The target array filtered.","source":"*  {Array} - The target array filtered.\n\t *"}},"xor":{"category":"array","description":"Creates an array that is the symmetric difference of the provided arrays.","examples":[{"tag":"example","optional":false,"description":"xor([2, 1], [2, 3, 5], [6]); // => [1, 3, 5, 6]","source":"xor([2, 1], [2, 3, 5], [6]);\n// => [1, 3, 5, 6]\n"}],"name":"xor","params":[{"tag":"param","name":"arrays","type":"...Array","optional":false,"description":"- The array(s) to be filtered.","source":"*  {...Array} arrays - The array(s) to be filtered."}],"type":"function","functionTag":"xor","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The filtered array.","source":"*  {Array} - The filtered array.\n\t *"}},"zip":{"category":"array","description":"Merges together the values of each of the arrays with the values at the corresponding position.","examples":[{"tag":"example","optional":false,"description":"zip(['a', 'b'], [1, 2], [true, false]); // => [['a', 1, true], ['b', 2, false]]","source":"zip([\"a\", \"b\"], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n"}],"name":"zip","params":[{"tag":"param","name":"arrays","type":"Array","optional":false,"description":"- The arrays to process.","source":"*  {Array} arrays - The arrays to process."}],"type":"function","functionTag":"zip","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new array of regrouped elements.","source":"*  {Array} - Returns the new array of regrouped elements.\n\t *"}},"unZip":{"category":"array","description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip array configuration.","examples":[{"tag":"example","optional":false,"description":"unZip([['a', 1, true], ['b', 2, false]]); // => [['a', 'b'], [1, 2], [true, false]]","source":"unZip([\n  [\"a\", 1, true],\n  [\"b\", 2, false],\n]);\n// => [['a', 'b'], [1, 2], [true, false]]\n"}],"name":"unZip","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- The array of grouped elements to process.","source":"*  {Array} source - The array of grouped elements to process."}],"type":"function","functionTag":"unZip","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new array of regrouped elements.","source":"*  {Array} - Returns the new array of regrouped elements.\n\t *"}},"isConstructor":{"category":"type","description":"Checks to see if the constructor is that of a native object.","examples":[{"tag":"example","optional":false,"description":"import { isConstructor, assert } from 'Acid'; assert(isConstructor(2, Number), true);","source":"import { isConstructor, assert } from \"Acid\";\nassert(isConstructor(2, Number), true);\n"}],"name":"isConstructor","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The object to be checked.","source":"*  {Object} target - The object to be checked."},{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The source constructor object.","source":"*  {Object} source - The source constructor object."}],"type":"function","functionTag":"isConstructor","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the target object.","source":"*  {Object} - Returns the target object.\n\t *"}},"isBuffer":{"category":"type","description":"Checks if an object or objects are a Buffer.","examples":[{"tag":"example","optional":false,"description":"import { isBuffer, assert, construct } from 'Acid'; assert(isBuffer(Buffer.from('test')), true);","source":"import { isBuffer, assert, construct } from \"Acid\";\nassert(isBuffer(Buffer.from(\"test\")), true);\n"}],"name":"isBuffer","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isBuffer","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"ensureBuffer":{"category":"array","description":"Ensures the source is a Buffer if not the source is used to create a buffer using Buffer.from else if there's no source an empty Buffer is returned with Buffer.alloc(0). Keep in mind not all objects can be used to create a Buffer.","examples":[{"tag":"example","optional":false,"description":"import { isBuffer, ensureBuffer, assert } from 'Acid'; assert(isBuffer(ensureBuffer('test')), true);","source":"import { isBuffer, ensureBuffer, assert } from \"Acid\";\nassert(isBuffer(ensureBuffer(\"test\")), true);\n"}],"name":"ensureBuffer","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"ensureBuffer","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array.","source":"*  {Array} - Returns an array.\n\t *"}},"countBy":{"category":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection through iteratee.","examples":[{"tag":"example","optional":false,"description":"import { countBy, assert } from 'Acid'; assert(countBy([{a:1}, {a:3}], (item) => { return 'a';}), {a: 2});","source":"import { countBy, assert } from \"Acid\";\nassert(\n  countBy([{ a: 1 }, { a: 3 }], (item) => {\n    return \"a\";\n  }),\n  { a: 2 }\n);\n"}],"name":"countBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- The iteratee to transform keys.","source":"*  {Function} iteratee - The iteratee to transform keys."}],"type":"function","functionTag":"countBy","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"}},"countKey":{"category":"collection","description":"Count the amount of times a key is present in a collection.","examples":[{"tag":"example","optional":false,"description":"import { countKey, assert } from 'Acid'; assert(countKey([{a:1}, {a:3}], 'a'), 2);","source":"import { countKey, assert } from \"Acid\";\nassert(countKey([{ a: 1 }, { a: 3 }], \"a\"), 2);\n"}],"name":"countKey","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"Function","optional":false,"description":"- The name of the key.","source":"*  {Function} propertyName - The name of the key."}],"type":"function","functionTag":"countKey","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The count.","source":"*  {Number} - The count.\n\t *"}},"countWithoutKey":{"category":"collection","description":"Count the amount of times a key is not present in a collection.","examples":[{"tag":"example","optional":false,"description":"import { countWithoutKey, assert } from 'Acid'; assert(countWithoutKey([{a:1}, {a:3}], 'b'), 2);","source":"import { countWithoutKey, assert } from \"Acid\";\nassert(countWithoutKey([{ a: 1 }, { a: 3 }], \"b\"), 2);\n"}],"name":"countWithoutKey","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- The name of the key.","source":"*  {String} propertyName - The name of the key."}],"type":"function","functionTag":"countWithoutKey","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The count.","source":"*  {Number} - The count.\n\t *"}},"findIndex":{"category":"collection","description":"Finds an object in a collection by the given id and property name and returns the array index of the object.","examples":[{"tag":"example","optional":false,"description":"findIndex([{id: 1}, {id: 2}], 1); // => 0","source":"findIndex([{ id: 1 }, { id: 2 }], 1);\n// => 0\n"}],"name":"findIndex","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be checked for an item.","source":"*  {Array} collection - Collection to be checked for an item."},{"tag":"param","name":"id","type":"Number|string","optional":false,"description":"- The value to look for.","source":"*  {Number|string} id - The value to look for."},{"tag":"param","name":"propertyName","type":"String","optional":true,"description":"- The name of the property to compare.","source":"*  {String} [propertyName = 'id'] - The name of the property to compare.","default":"'id'"}],"type":"function","functionTag":"findIndex","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The index of the object.","source":"*  {Number} - The index of the object.\n\t *"}},"findItem":{"category":"collection","description":"Finds an object in a collection by the given id and property name.","examples":[{"tag":"example","optional":false,"description":"findItem([{id: 1}, {id: 2}], 1); // => {id: 1}","source":"findItem([{ id: 1 }, { id: 2 }], 1);\n// => {id: 1}\n"}],"name":"findItem","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be checked for an item.","source":"*  {Array} collection - Collection to be checked for an item."},{"tag":"param","name":"id","type":"Number|string","optional":false,"description":"- The value to look for.","source":"*  {Number|string} id - The value to look for."},{"tag":"param","name":"propertyName","type":"String","optional":true,"description":"- The name of the property to compare.","source":"*  {String} [propertyName = 'id'] - The name of the property to compare.","default":"'id'"}],"type":"function","functionTag":"findItem","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The found object.","source":"*  {Object} - The found object.\n\t *"}},"sortNewest":{"category":"collection","description":"Sorts an array in place using a key from newest to oldest.","examples":[{"tag":"example","optional":false,"description":"sortNewest([{id: 1}, {id: 0}], 'id'); // => [{id: 1}, {id: 0}]","source":"sortNewest([{ id: 1 }, { id: 0 }], \"id\");\n// => [{id: 1}, {id: 0}]\n"}],"name":"sortNewest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {String} propertyName - The property name to sort by based on it's value."},{"tag":"param","name":"pureMode","type":"Boolean","optional":true,"description":"- Mutates the source array. If set to false creates a new array.","source":"*  {Boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.","default":"true"}],"type":"function","functionTag":"sortNewest","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array and or a clone of the array sorted.","source":"*  {Array} - The sorted array and or a clone of the array sorted.\n\t *"}},"getNewest":{"category":"collection","description":"Sorts an array in place using a key from newest to oldest and returns the latest. Does not mutate the array.","examples":[{"tag":"example","optional":false,"description":"getNewest([{id: 1}, {id: 0}], 'id'); // => {id: 1}","source":"getNewest([{ id: 1 }, { id: 0 }], \"id\");\n// => {id: 1}\n"}],"name":"getNewest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {String} propertyName - The property name to sort by based on it's value."}],"type":"function","functionTag":"getNewest","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The newest object in the collection.","source":"*  {Object} - The newest object in the collection.\n\t *"}},"sortOldest":{"category":"collection","description":"Sorts an array in place using a key from oldest to newest.","examples":[{"tag":"example","optional":false,"description":"sortOldest([{id: 1}, {id: 0}], 'id'); // => [{id: 0}, {id: 1}]","source":"sortOldest([{ id: 1 }, { id: 0 }], \"id\");\n// => [{id: 0}, {id: 1}]\n"}],"name":"sortOldest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {String} propertyName - The property name to sort by based on it's value."},{"tag":"param","name":"pureMode","type":"Boolean","optional":true,"description":"- Mutates the source array. If set to false creates a new array.","source":"*  {Boolean} [pureMode = true] - Mutates the source array. If set to false creates a new array.","default":"true"}],"type":"function","functionTag":"sortOldest","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array and or a clone of the array sorted.","source":"*  {Array} - The sorted array and or a clone of the array sorted.\n\t *"}},"getOldest":{"category":"collection","description":"Sorts an array in place using a key from oldest to newest and returns the oldest. Does not mutate the array.","examples":[{"tag":"example","optional":false,"description":"getOldest([{id: 1}, {id: 0}], 'id'); // => {id: 0}","source":"getOldest([{ id: 1 }, { id: 0 }], \"id\");\n// => {id: 0}\n"}],"name":"getOldest","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"key","type":"String","optional":false,"description":"- The property name to sort by based on it's value.","source":"*  {String} key - The property name to sort by based on it's value."}],"type":"function","functionTag":"getOldest","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The newest object in the collection.","source":"*  {Object} - The newest object in the collection.\n\t *"}},"groupBy":{"category":"collection","description":"Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The order of grouped values is determined by the order they occur in collection. The corresponding value of each key is an array of elements responsible for generating the key.","examples":[{"tag":"example","optional":false,"description":"groupBy([6.1, 4.2, 6.3], Math.floor); // => { '4': [4.2], '6': [6.1, 6.3] }","source":"groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n"}],"name":"groupBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- The iteratee to transform keys.","source":"*  {Function} iteratee - The iteratee to transform keys."}],"type":"function","functionTag":"groupBy","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"}},"indexBy":{"category":"collection","description":"Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know the keys are unique.","examples":[{"tag":"example","optional":false,"description":"indexBy([{name: 'Lucy', id: 0}, {name: 'Erick', id: 1}], 'id'); // => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}","source":"indexBy(\n  [\n    { name: \"Lucy\", id: 0 },\n    { name: \"Erick\", id: 1 },\n  ],\n  \"id\"\n);\n// => { \"0\": {name: 'Lucy', id: 0}, \"1\": {name: 'Erick', id: 1}}\n"}],"name":"indexBy","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array of objects.","source":"*  {Array} collection - Array of objects."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- The property name to index by.","source":"*  {String} propertyName - The property name to index by."}],"type":"function","functionTag":"indexBy","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the composed aggregate object.","source":"*  {Object} - Returns the composed aggregate object.\n\t *"}},"invoke":{"category":"collection","description":"Invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","optional":false,"description":"invoke([{lucy(item, index) { return [item, index];}}, {lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); // => [['EXAMPLE', 0], ['EXAMPLE', 1]]","source":"invoke(\n  [\n    {\n      lucy(item, index) {\n        return [item, index];\n      },\n    },\n    {\n      lucy(item, index) {\n        return [item, index];\n      },\n    },\n  ],\n  \"lucy\",\n  \"EXAMPLE\"\n);\n// => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n"}],"name":"invoke","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection from which method will be taken.","source":"*  {Array} collection - Collection from which method will be taken."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- Value used to pluck method from object.","source":"*  {String} property - Value used to pluck method from object."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- Value to be passed to callable property.","source":"*  {*} value - Value to be passed to callable property."}],"type":"function","functionTag":"invoke","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the results of the invoked method.","source":"*  {Array} - Returns the results of the invoked method.\n\t *"}},"invokeAsync":{"category":"collection","description":"Asynchronously awaits & invokes a function on the provided property name in each object in the collection.","examples":[{"tag":"example","optional":false,"description":"invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); // => [['EXAMPLE', 0], ['EXAMPLE', 1]]","source":"invokeAsync(\n  [\n    {\n      async lucy(item, index) {\n        return [item, index];\n      },\n    },\n    {\n      async lucy(item, index) {\n        return [item, index];\n      },\n    },\n  ],\n  \"lucy\",\n  \"EXAMPLE\"\n);\n// => [['EXAMPLE', 0], ['EXAMPLE', 1]]\n"}],"name":"invokeAsync","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection from which method will be taken.","source":"*  {Array} collection - Collection from which method will be taken."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- Value used to pluck method from object.","source":"*  {String} property - Value used to pluck method from object."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- Value to be passed to callable property.","source":"*  {*} value - Value to be passed to callable property."}],"type":"function","isAsync":true,"functionTag":"invokeAsync","test":{"tag":"test","optional":false,"description":"(async () => { const result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE'); return assert(result, [['EXAMPLE', 0], ['EXAMPLE', 1]]); });","source":"* \t * (async () => {\n\t *   const result = await invokeAsync([{async lucy(item, index) { return [item, index];}}, {async lucy(item, index) { return [item, index];}}], 'lucy', 'EXAMPLE');\n\t *   return assert(result, [['EXAMPLE', 0], ['EXAMPLE', 1]]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the results of the invoked method.","source":"*  {Array} - Returns the results of the invoked method.\n\t *"}},"pluck":{"category":"collection","description":"Returns an array of the plucked values from the collection.","examples":[{"tag":"example","optional":false,"description":"pluck([{lucy: 'Ants moving around on the walls.'}, {lucy: 'In the sky with diamonds.'}], 'lucy'); // => ['Ants moving around on the walls.', 'In the sky with diamonds.']","source":"pluck(\n  [\n    { lucy: \"Ants moving around on the walls.\" },\n    { lucy: \"In the sky with diamonds.\" },\n  ],\n  \"lucy\"\n);\n// => ['Ants moving around on the walls.', 'In the sky with diamonds.']\n"}],"name":"pluck","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array used to determine what value to be plucked.","source":"*  {Array} collection - Array used to determine what value to be plucked."},{"tag":"param","name":"pluckThis","type":"String","optional":false,"description":"- Property name.","source":"*  {String} pluckThis - Property name."}],"type":"function","functionTag":"pluck","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of plucked values.","source":"*  {Array} - An array of plucked values.\n\t *"}},"pluckObject":{"category":"object","description":"Returns an array of the plucked sources from the object. Sources are plucked in the order given by the array.","examples":[{"tag":"example","optional":false,"description":"pluckObject({a: 1, b:3}, ['a','b']); // => [1, 3]","source":"pluckObject({ a: 1, b: 3 }, [\"a\", \"b\"]);\n// => [1, 3]\n"}],"name":"pluckObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Array used to determine what sources to be plucked.","source":"*  {Object} source - Array used to determine what sources to be plucked."},{"tag":"param","name":"pluckThese","type":"String|Array","optional":false,"description":"- Property name.","source":"*  {String|Array} pluckThese - Property name."}],"type":"function","functionTag":"pluckObject","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of plucked sources.","source":"*  {Array} - An array of plucked sources.\n\t *"}},"pluckValues":{"category":"collection","description":"Returns an array of the arrays of plucked values from the collection.","examples":[{"tag":"example","optional":false,"description":"pluckValues([{a: 1, b:3}, {a: 1, b:3}], ['a','b']); // => [[1, 3], [1, 3]]","source":"pluckValues(\n  [\n    { a: 1, b: 3 },\n    { a: 1, b: 3 },\n  ],\n  [\"a\", \"b\"]\n);\n// => [[1, 3], [1, 3]]\n"}],"name":"pluckValues","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Array used to determine what values to be plucked.","source":"*  {Array} collection - Array used to determine what values to be plucked."},{"tag":"param","name":"pluckThese","type":"Array","optional":false,"description":"- Property names.","source":"*  {Array} pluckThese - Property names."}],"type":"function","functionTag":"pluckValues","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array of arrays of plucked values.","source":"*  {Array} - An array of arrays of plucked values.\n\t *"}},"indexedAlphabetically":{"category":"collection","description":"Perform alphabetical sort on a collection with the provided key name. Mutates the array.","examples":[{"tag":"example","optional":false,"description":"indexedAlphabetically([{letter:'a'}, {letter:'f'}, {letter:'c'}], 'letter'); // => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]","source":"indexedAlphabetically(\n  [{ letter: \"a\" }, { letter: \"f\" }, { letter: \"c\" }],\n  \"letter\"\n);\n// => [{\"letter\":\"a\"},{\"letter\":\"c\"},{\"letter\":\"f\"}]\n"}],"name":"indexedAlphabetically","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Collection to be sorted.","source":"*  {Array} collection - Collection to be sorted."},{"tag":"param","name":"propertyName","type":"String","optional":false,"description":"- Name of property to compare.","source":"*  {String} propertyName - Name of property to compare."}],"type":"function","functionTag":"indexedAlphabetically","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The sorted array.","source":"*  {Array} - The sorted array.\n\t *"}},"getFileExtension":{"category":"file","description":"Return the file extension.","examples":[{"tag":"example","optional":false,"description":"getFileExtension('test.js'); // => 'js'","source":"getFileExtension(\"test.js\");\n// => 'js'\n"}],"name":"getFileExtension","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"getFileExtension","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Returns the extension.","source":"*  {String} - Returns the extension.\n\t *"}},"isFileCSS":{"category":"file","description":"Checks if the string has a .css extension.","examples":[{"tag":"example","optional":false,"description":"isFileCSS('test.css'); // => true","source":"isFileCSS(\"test.css\");\n// => true\n"}],"name":"isFileCSS","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- Object to be checked.","source":"*  {String} source - Object to be checked."}],"type":"function","functionTag":"isFileCSS","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isFileHTML":{"category":"file","description":"Checks if the string has a .html extension.","examples":[{"tag":"example","optional":false,"description":"isFileHTML('test.html'); // => true","source":"isFileHTML(\"test.html\");\n// => true\n"}],"name":"isFileHTML","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- Object to be checked.","source":"*  {String} source - Object to be checked."}],"type":"function","functionTag":"isFileHTML","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isFileJS":{"category":"file","description":"Checks if the string has a .js extension.","examples":[{"tag":"example","optional":false,"description":"isFileJS('test.js'); // => true","source":"isFileJS(\"test.js\");\n// => true\n"}],"name":"isFileJS","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- Object to be checked.","source":"*  {String} source - Object to be checked."}],"type":"function","functionTag":"isFileJS","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isFileJSON":{"category":"file","description":"Checks if the string has a .json extension.","examples":[{"tag":"example","optional":false,"description":"isFileJSON('test.json'); // => true","source":"isFileJSON(\"test.json\");\n// => true\n"}],"name":"isFileJSON","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- Object to be checked.","source":"*  {String} source - Object to be checked."}],"type":"function","functionTag":"isFileJSON","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"after":{"category":"function","description":"Creates a function that executes callable, only after being called n times.","examples":[{"tag":"example","optional":false,"description":"const onlyAfter = after(1, (item) => { return item;}); onlyAfter(1); // => undefined onlyAfter(2); // => 2","source":"const onlyAfter = after(1, (item) => {\n  return item;\n});\nonlyAfter(1);\n// => undefined onlyAfter(2); // => 2\n"}],"name":"after","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The number of calls until method is invoked.","source":"*  {Number} amount - The number of calls until method is invoked."},{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"type":"function","functionTag":"after","test":{"tag":"test","optional":false,"description":"(async () => { const onlyAfter = after(2, (item) => { return item;}); return await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2); });","source":"* \t * (async () => {\n\t *   const onlyAfter = after(2, (item) => { return item;});\n\t *   return await assert(onlyAfter(1), undefined) && await assert(onlyAfter(2), 2);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"}},"ary":{"category":"function","description":"Creates a function that invokes callable, with up to n arguments, ignoring any additional arguments.","examples":[{"tag":"example","optional":false,"description":"ary((...args) => { return args;}, 2)(1, 2, 3); // => [1, 2]","source":"ary((...args) => {\n  return args;\n}, 2)(1, 2, 3);\n// => [1, 2]\n"}],"name":"ary","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to cap arguments for.","source":"*  {Function} callable - The function to cap arguments for."},{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The arity cap.","source":"*  {Number} amount - The arity cap."}],"type":"function","functionTag":"ary","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new capped function.","source":"*  {Object} - Returns the new capped function.\n\t *"}},"before":{"category":"function","description":"Creates a function that executes callable, only before n times.","examples":[{"tag":"example","optional":false,"description":"const onlyBefore = before(3, () => { return 1;}); onlyBefore(1); // => 1 onlyBefore(2); // => 2 onlyBefore(3); // => 2","source":"const onlyBefore = before(3, () => {\n  return 1;\n});\nonlyBefore(1);\n// => 1 onlyBefore(2); // => 2 onlyBefore(3); // => 2\n"}],"name":"before","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The number of calls before n.","source":"*  {Number} amount - The number of calls before n."},{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"type":"function","functionTag":"before","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"}},"assign":{"category":"object","description":"Copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.","examples":[{"tag":"example","optional":false,"description":"import { assign, assert } from 'Acid'; assert(assign({b: 2}, {a: 1}), {b: 2, a: 1});","source":"import { assign, assert } from \"Acid\";\nassert(assign({ b: 2 }, { a: 1 }), { b: 2, a: 1 });\n"}],"name":"assign","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The target object.","source":"*  {Object} target - The target object."},{"tag":"param","name":"sources","type":"...Object","optional":false,"description":"- The source object(s).","source":"*  {...Object} sources - The source object(s)."}],"type":"function","functionTag":"assign","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the target object.","source":"*  {Object} - Returns the target object.\n\t *"}},"eachAsyncObject":{"category":"object","description":"Asynchronously iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"import { eachAsyncObject, assert } from 'Acid'; const tempList = []; await eachAsyncObject({a: 1, b: 2, c: 3}, async (item, key) => { tempList[key] = item; }); assert(tempList, {a: 1, b: 2, c: 3});","source":"import { eachAsyncObject, assert } from \"Acid\";\nconst tempList = [];\nawait eachAsyncObject({ a: 1, b: 2, c: 3 }, async (item, key) => {\n  tempList[key] = item;\n});\nassert(tempList, { a: 1, b: 2, c: 3 });\n"}],"name":"eachAsyncObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"type":"function","functionTag":"eachAsyncObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"Returns source.","source":"*  {Object|Function} - Returns source.\n\t *"}},"eachObject":{"category":"object","description":"Iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"import { eachObject, assert } from 'Acid'; assert(eachObject({a: 1, b: 2, c: 3}, (item) => { console.log(item); }), {a: 1, b: 2, c: 3});","source":"import { eachObject, assert } from \"Acid\";\nassert(\n  eachObject({ a: 1, b: 2, c: 3 }, (item) => {\n    console.log(item);\n  }),\n  { a: 1, b: 2, c: 3 }\n);\n"}],"name":"eachObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling object, key count, and array of keys."}],"type":"function","functionTag":"eachObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"Returns the calling object.","source":"*  {Object|Function} - Returns the calling object.\n\t *"}},"isSet":{"category":"type","description":"Checks if an object(s) is a Set.","examples":[{"tag":"example","optional":false,"description":"import { isSet, assert } from 'Acid'; assert(isSet(new Set()), true);","source":"import { isSet, assert } from \"Acid\";\nassert(isSet(new Set()), true);\n"}],"name":"isSet","params":[{"tag":"param","name":"sources","type":"...*","optional":false,"description":"- Objects to be checked.","source":"*  {...*} sources - Objects to be checked."}],"type":"function","functionTag":"isSet","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isGenerator":{"category":"type","description":"Checks if an object or objects are a Int16Array.","examples":[{"tag":"example","optional":false,"description":"import { isGenerator } from 'Acid'; isGenerator(function* (){}); // => true","source":"import { isGenerator } from \"Acid\";\nisGenerator(function* () {});\n// => true\n"}],"name":"isGenerator","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isGenerator","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isFunction":{"category":"type","description":"Checks if an object or objects are a plain object.","examples":[{"tag":"example","optional":false,"description":"import { isFunction } from 'Acid'; isFunction(() => {}); // => true","source":"import { isFunction } from \"Acid\";\nisFunction(() => {});\n// => true\n"}],"name":"isFunction","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isFunction","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isAsync":{"category":"type","description":"Checks if an object is an async function.","examples":[{"tag":"example","optional":false,"description":"import { isAsync, assert } from 'Acid'; assert(isAsync(async() => {}), true);","source":"import { isAsync, assert } from \"Acid\";\nassert(\n  isAsync(async () => {}),\n  true\n);\n"}],"name":"isAsync","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isAsync","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"True or false.","source":"*  {Boolean} - True or false.\n\t *"}},"each":{"category":"utility","description":"Iterates through the given object.","examples":[{"tag":"example","optional":false,"description":"import { each, assert } from 'Acid'; const list = {}; each({a: 1, b: 2, c: 3}, (item, key) => { list[key] = item; }); assert(list, {a: 1, b: 2, c: 3});","source":"import { each, assert } from \"Acid\";\nconst list = {};\neach({ a: 1, b: 2, c: 3 }, (item, key) => {\n  list[key] = item;\n});\nassert(list, { a: 1, b: 2, c: 3 });\n"}],"name":"each","params":[{"tag":"param","name":"source","type":"Array | object | Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array | object | Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."}],"type":"function","functionTag":"each","returns":{"tag":"returns","name":"-","type":"Array | object | Function","optional":false,"description":"The originally given object.","source":"*  {Array | object | Function} - The originally given object.\n\t *"}},"chain":{"category":"function","description":"Creates a chainable set of functions.","examples":[{"tag":"example","optional":false,"description":"const chained = chain({a(item) { return item;}}); chained('Acid').a(); chained.done(); // => 'Acid'","source":"const chained = chain({\n  a(item) {\n    return item;\n  },\n});\nchained(\"Acid\").a();\nchained.done();\n// => 'Acid'\n"}],"name":"chain","params":[{"tag":"param","name":"methods","type":"Array|Object","optional":false,"description":"- The object to take methods from.","source":"*  {Array|Object} methods - The object to take methods from."}],"type":"function","functionTag":"chain","test":{"tag":"test","optional":false,"description":"(async () => { const chained = chain({a(item) { return item;}}); chained('Acid').a(); return assert(chained.done(), 'Acid'); });","source":"* \t * (async () => {\n\t *   const chained = chain({a(item) { return item;}});\n\t *   chained('Acid').a();\n\t *   return assert(chained.done(), 'Acid');\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.","source":"*  {*} - Returns a function which has value, methods, add, and done. When invoking the function the argument is saved as the value property for further chaining.\n\t *"}},"curry":{"category":"function","description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method length is not sufficient.","examples":[{"tag":"example","optional":false,"description":"curry((a, b, c) => { return [a, b, c]; })(1)(2)(3); // => [1, 2, 3]","source":"curry((a, b, c) => {\n  return [a, b, c];\n})(1)(2)(3);\n// => [1, 2, 3]\n"}],"name":"curry","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to curry.","source":"*  {Function} callable - The function to curry."},{"tag":"param","name":"arity","type":"Number","optional":false,"description":"- The arity of method.","source":"*  {Number} arity - The arity of method."}],"type":"function","functionTag":"curry","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the new curried function.","source":"*  {*} - Returns the new curried function.\n\t *"}},"curryRight":{"description":"Creates a function that accepts arguments of method and either invokes method returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining method arguments, and so on. The arity of method may be specified if method.length is not sufficient. The arguments are given in reverse order.","examples":[{"tag":"example","optional":false,"description":"curryRight((a, b, c) => { return [a, b, c]; })(1)(2)(3); // => [3, 2, 1]","source":"curryRight((a, b, c) => {\n  return [a, b, c];\n})(1)(2)(3);\n// => [3, 2, 1]\n"}],"name":"curryRight","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to curry.","source":"*  {Function} callable - The function to curry."},{"tag":"param","name":"arity","type":"Number","optional":false,"description":"- The arity of method.","source":"*  {Number} arity - The arity of method."}],"type":"function","functionTag":"curryRight","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the new curried function.","source":"*  {*} - Returns the new curried function.\n\t *"}},"stubTrue":{"category":"utility","description":"This method returns true.","examples":[{"tag":"example","optional":false,"description":"import { stubTrue } from 'Acid'; stubTrue(); // => true","source":"import { stubTrue } from \"Acid\";\nstubTrue();\n// => true\n"}],"name":"stubTrue","type":"function","functionTag":"stubTrue","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true.","source":"*  {Boolean} - Returns true.\n\t *"}},"stubFalse":{"category":"utility","description":"This method returns false.","examples":[{"tag":"example","optional":false,"description":"import { stubFalse } from 'Acid'; stubFalse(); // => false","source":"import { stubFalse } from \"Acid\";\nstubFalse();\n// => false\n"}],"name":"stubFalse","type":"function","functionTag":"stubFalse","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns false.","source":"*  {Boolean} - Returns false.\n\t *"}},"noop":{"category":"function","description":"This method returns undefined.","examples":[{"tag":"example","optional":false,"description":"noop(); // => undefined","source":"noop();\n// => undefined\n"}],"name":"noop","type":"function","functionTag":"noop","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined."}},"times":{"category":"utility","description":"Iterates based on the amount given invoking the iteratee with the current index as an argument.","examples":[{"tag":"example","optional":false,"description":"import { times } from 'Acid'; times(3, (item) => { console.log(item); }); // 0 // 1 // 2 // => undefined","source":"import { times } from \"Acid\";\ntimes(3, (item) => {\n  console.log(item);\n}); // 0 // 1 // 2\n// => undefined\n"}],"name":"times","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of times to loop invoking the iteratee.","source":"*  {Number} amount - The amount of times to loop invoking the iteratee."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed index and amount.","source":"*  {Function} iteratee - Transformation function which is passed index and amount."}],"type":"function","functionTag":"times","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Nothing.","source":"*  {undefined} - Nothing.\n\t *"}},"timesMap":{"category":"utility","description":"Iterates based on the amount given and maps the results returned by the iteratee each time to an array.","examples":[{"tag":"example","optional":false,"description":"import { timesMap } from 'Acid'; timesMap(3, (item) => { return item; }); // => [0, 1, 2]","source":"import { timesMap } from \"Acid\";\ntimesMap(3, (item) => {\n  return item;\n});\n// => [0, 1, 2]\n"}],"name":"timesMap","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of times to loop invoking the iteratee.","source":"*  {Number} amount - The amount of times to loop invoking the iteratee."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed index and amount.","source":"*  {Function} iteratee - Transformation function which is passed index and amount."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will have iteratee return pushed to.","source":"*  {Array} [results = []] - Array that will have iteratee return pushed to.","default":"[]"}],"type":"function","functionTag":"timesMap","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with iteratee's returned values.","source":"*  {Array} - An array with iteratee's returned values.\n\t *"}},"timer":{"category":"function","description":"Timer wrapper.","examples":[{"tag":"example","optional":false,"description":"import { timer, assert } from 'Acid'; timer(() => {}, 100); // => 0","source":"import { timer, assert } from \"Acid\";\ntimer(() => {}, 100);\n// => 0\n"}],"name":"timer","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"Number","optional":false,"description":"- The time in milliseconds.","source":"*  {Number} time - The time in milliseconds."}],"type":"function","functionTag":"timer","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns setTimeoutId ID.","source":"*  {Object} - Returns setTimeoutId ID.\n\t *"}},"clearTimers":{"category":"function","description":"Clear all active timers.","examples":[{"tag":"example","optional":false,"description":"import { clearTimers, assert } from 'Acid'; clearTimers(); // => undefined","source":"import { clearTimers, assert } from \"Acid\";\nclearTimers();\n// => undefined\n"}],"name":"clearTimers","type":"function","functionTag":"clearTimers","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"}},"apply":{"category":"function","description":"Calls a target function with arguments as specified.","examples":[{"tag":"example","optional":false,"description":"apply(function (a) {return a;}, undefined, [2]); // => 2","source":"apply(\n  function (a) {\n    return a;\n  },\n  undefined,\n  [2]\n);\n// => 2\n"}],"name":"apply","params":[{"tag":"param","name":"target","type":"Function","optional":false,"description":"- The target function to call.","source":"*  {Function} target - The target function to call."},{"tag":"param","name":"thisArgument","type":"*","optional":false,"description":"- Array like object.","source":"*  {*} thisArgument - Array like object."},{"tag":"param","name":"argumentsList","type":"Array","optional":false,"description":"- An array-like object specifying the arguments with which target should be called.","source":"*  {Array} argumentsList - An array-like object specifying the arguments with which target should be called."}],"type":"function","functionTag":"apply","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"The result of calling the given target function with the specified this value and arguments.","source":"*  {*} - The result of calling the given target function with the specified this value and arguments.\n\t *"}},"debounce":{"category":"function","description":"Creates a debounced function that delays invoking callable until after milliseconds have elapsed since the last time the debounced function was invoked. The debounce function has a clear method to cancel the timer.","examples":[{"tag":"example","optional":false,"description":"const debounced = debounce(() => { console.log('debounced'); }, 0); debounced(); // 'debounced'","source":"const debounced = debounce(() => {\n  console.log(\"debounced\");\n}, 0);\ndebounced(); // 'debounced'\n"}],"name":"debounce","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"Number","optional":false,"description":"- The time in milliseconds.","source":"*  {Number} time - The time in milliseconds."}],"type":"function","functionTag":"debounce","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The debounced function.","source":"*  {Function} - The debounced function.\n\t *"}},"ifInvoke":{"category":"function","description":"Checks if the given method is a function. If it is then it invokes it with the given arguments.","examples":[{"tag":"example","optional":false,"description":"import { ifInvoke, assert } from 'Acid'; assert(ifInvoke((...args) => { return args;}, 1, 2), [1, 2]);","source":"import { ifInvoke, assert } from \"Acid\";\nassert(\n  ifInvoke(\n    (...args) => {\n      return args;\n    },\n    1,\n    2\n  ),\n  [1, 2]\n);\n"}],"name":"ifInvoke","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked if possible.","source":"*  {Function} callable - The function to be invoked if possible."},{"tag":"param","name":"args","type":"...Array","optional":false,"description":"- Arguments to pass to the method.","source":"*  {...Array} args - Arguments to pass to the method."}],"type":"function","functionTag":"ifInvoke","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the method invoked or undefined.","source":"*  {*} - Returns the method invoked or undefined.\n\t *"}},"inAsync":{"category":"array","description":"Iterates through the given array of async function(s). Each async function is awaited as to ensure synchronous order and is given the supplied object.","examples":[{"tag":"example","optional":false,"description":"import { inAsync, assert } from 'Acid'; const list = []; await inAsync([async (firstArgument, item, index) => { list.push(index + firstArgument.a); }, async (firstArgument, item, index) => { list.push(index); }], {a:1}); assert(list, [1, 1]);","source":"import { inAsync, assert } from \"Acid\";\nconst list = [];\nawait inAsync(\n  [\n    async (firstArgument, item, index) => {\n      list.push(index + firstArgument.a);\n    },\n    async (firstArgument, item, index) => {\n      list.push(index);\n    },\n  ],\n  { a: 1 }\n);\nassert(list, [1, 1]);\n"}],"name":"inAsync","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array of async functions that will be looped through. Functions are given the supplied object, index, the calling array, and the array length.","source":"*  {Array} source - Array of async functions that will be looped through.\n\t * Functions are given the supplied object, index, the calling array, and the array length."},{"tag":"param","name":"firstArgument","type":"*","optional":false,"description":"- The first argument given to each function.","source":"*  {*} firstArgument - The first argument given to each function."}],"type":"function","isAsync":true,"functionTag":"inAsync","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The originally given array.","source":"*  {Object} - The originally given array.\n\t *"}},"inSync":{"category":"function","description":"Invoke an array of functions.","examples":[{"tag":"example","optional":false,"description":"inSync([() => {console.log(1);}, () => {console.log(2);}]); // 1 // 2 // => undefined","source":"inSync([\n  () => {\n    console.log(1);\n  },\n  () => {\n    console.log(2);\n  },\n]); // 1 // 2\n// => undefined\n"}],"name":"inSync","params":[{"tag":"param","name":"collection","type":"Array|Object|Function","optional":false,"description":"- The functions to be invoked.","source":"*  {Array|Object|Function} collection - The functions to be invoked."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- The object passed as an argument to each method.","source":"*  {*} value - The object passed as an argument to each method."}],"type":"function","functionTag":"inSync","test":{"tag":"test","optional":false,"description":"(() => { const tempList = []; inSync([() => {tempList.push(1);}, () => {tempList.push(2);}]); return assert(tempList, [1, 2]); });","source":"* \t * (() => {\n\t *   const tempList = [];\n\t *   inSync([() => {tempList.push(1);}, () => {tempList.push(2);}]);\n\t *   return assert(tempList, [1, 2]);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"}},"negate":{"category":"function","description":"Creates a function that negates the result of the predicate callable.","examples":[{"tag":"example","optional":false,"description":"negate(() => { return false;})(); // => true","source":"negate(() => {\n  return false;\n})();\n// => true\n"}],"name":"negate","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."}],"type":"function","functionTag":"negate","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the given methods result.","source":"*  {*} - Returns the given methods result.\n\t *"}},"nthArg":{"category":"function","description":"Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.","examples":[{"tag":"example","optional":false,"description":"nthArg(1)('a', 'b'); // => 'b'","source":"nthArg(1)(\"a\", \"b\");\n// => 'b'\n"}],"name":"nthArg","params":[{"tag":"param","name":"index","type":"Number","optional":true,"description":"- The index of the argument to return.","source":"*  {Number} [index = 0] - The index of the argument to return.","default":"0"}],"type":"function","functionTag":"nthArg","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"}},"once":{"category":"function","description":"Creates a function that is restricted to execute method once. Repeat calls to the function will return the value of the first call. The method is executed with the this binding of the created function.","examples":[{"tag":"example","optional":false,"description":"const onceOnly = once((item) => { return item;}); onceOnly(5); onceOnly(3); // => 5","source":"const onceOnly = once((item) => {\n  return item;\n});\nonceOnly(5);\nonceOnly(3);\n// => 5\n"}],"name":"once","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be called.","source":"*  {Function} callable - The function to be called."}],"type":"function","functionTag":"once","test":{"tag":"test","optional":false,"description":"(async () => { const onceOnly = once((item) => { return item;}); return await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5); });","source":"* \t * (async () => {\n\t *   const onceOnly = once((item) => { return item;});\n\t *   return await assert(onceOnly(5), 5) && await assert(onceOnly(2), 5);\n\t * });\n\t *"},"returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new pass-thru function.","source":"*  {Function} - Returns the new pass-thru function.\n\t *"}},"mapObjectAsync":{"category":"object","description":"Asynchronously iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { mapAsyncObject, assert } from 'Acid'; assert(await mapAsyncObject({a: 1, b: undefined, c: 3}, (item) => { return item; }), {a: 1, b: undefined, c: 3});","source":"import { mapAsyncObject, assert } from \"Acid\";\nassert(\n  await mapAsyncObject({ a: 1, b: undefined, c: 3 }, (item) => {\n    return item;\n  }),\n  { a: 1, b: undefined, c: 3 }\n);\n"}],"name":"mapObjectAsync","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"mapObjectAsync","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object of the same calling object's type.","source":"*  {Object|Function} - An object of the same calling object's type.\n\t *"}},"mapObject":{"category":"object","description":"Iterates through the calling object and creates an object with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { mapObject, assert } from 'Acid'; assert(mapObject({a: 1, b: undefined, c: 3}, (item) => { return item; }), {a: 1, b: undefined, c: 3});","source":"import { mapObject, assert } from \"Acid\";\nassert(\n  mapObject({ a: 1, b: undefined, c: 3 }, (item) => {\n    return item;\n  }),\n  { a: 1, b: undefined, c: 3 }\n);\n"}],"name":"mapObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"mapObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object of the same calling object's type.","source":"*  {Object|Function} - An object of the same calling object's type.\n\t *"}},"getType":{"category":"type","description":"Returns the constructor of an object.","examples":[{"tag":"example","optional":false,"description":"import { getType, assert } from 'Acid'; assert(getType(1), true);","source":"import { getType, assert } from \"Acid\";\nassert(getType(1), true);\n"}],"name":"getType","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"getType","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"cloneType":{"category":"type","description":"Returns a new empty object of the same type.","examples":[{"tag":"example","optional":false,"description":"import { cloneType, assert } from 'Acid'; assert(cloneType([1]), []);","source":"import { cloneType, assert } from \"Acid\";\nassert(cloneType([1]), []);\n"}],"name":"cloneType","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"cloneType","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"forOfCompactMap":{"category":"utility","description":"Iterates (for of) through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { assert,forOfCompactMap } from 'Acid'; const source = {a: undefined, b: 2, c: 3}; const temp = forOfCompactMap(source, (item) => { return item; }); assert(temp, {b: 2, c: 3});","source":"import { assert, forOfCompactMap } from \"Acid\";\nconst source = { a: undefined, b: 2, c: 3 };\nconst temp = forOfCompactMap(source, (item) => {\n  return item;\n});\nassert(temp, { b: 2, c: 3 });\n"}],"name":"forOfCompactMap","params":[{"tag":"param","name":"source","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function|Class|Map|Set|Array} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"resultsObject","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be used to assign results else source is type cloned.","source":"*  {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned."}],"type":"function","functionTag":"forOfCompactMap","returns":{"tag":"returns","name":"-","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n\t *"}},"forOfCompactMapAsync":{"category":"utility","description":"Asynchronously iterates (for of) through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { assert,forOfCompactMapAsync } from 'Acid'; const source = {a: undefined, b: 2, c: 3}; const temp = await forOfCompactMapAsync(source, async (item) => { return item; }); assert(temp, {b: 2, c: 3});","source":"import { assert, forOfCompactMapAsync } from \"Acid\";\nconst source = { a: undefined, b: 2, c: 3 };\nconst temp = await forOfCompactMapAsync(source, async (item) => {\n  return item;\n});\nassert(temp, { b: 2, c: 3 });\n"}],"name":"forOfCompactMapAsync","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"resultsObject","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be used to assign results else source is type cloned.","source":"*  {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned."}],"type":"function","functionTag":"forOfCompactMapAsync","returns":{"tag":"returns","name":"-","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function|Class|Map|Set|Array} - An object with mapped properties that are not null or undefined.\n\t *"}},"map":{"category":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { map, assert } from 'Acid'; assert(map({a: 1, b: 2, c: 3}, (item) => { return item * 2; }), {a: 2, b: 4, c: 6});","source":"import { map, assert } from \"Acid\";\nassert(\n  map({ a: 1, b: 2, c: 3 }, (item) => {\n    return item * 2;\n  }),\n  { a: 2, b: 4, c: 6 }\n);\n"}],"name":"map","params":[{"tag":"param","name":"source","type":"Array | object | Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array | object | Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object | Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object | Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"map","returns":{"tag":"returns","name":"-","type":"Array | object | Function","optional":false,"description":"A new object of the same calling object's type.'.","source":"*  {Array | object | Function} - A new object of the same calling object's type.'.\n\t *"}},"over":{"category":"function","description":"Creates a function that invokes iteratee with the arguments it receives and returns their results.","examples":[{"tag":"example","optional":false,"description":"import { overEvery, assert } from 'Acid'; assert(over([Math.max, Math.min])(1, 2, 3, 4), [4, 1]);","source":"import { overEvery, assert } from \"Acid\";\nassert(over([Math.max, Math.min])(1, 2, 3, 4), [4, 1]);\n"}],"name":"over","params":[{"tag":"param","name":"iteratees","type":"(Array.<function>|Object.<function>)","optional":false,"description":"- The list of functions to loop through.","source":"*  {(Array.<function>|Object.<function>)} iteratees - The list of functions to loop through."}],"type":"function","functionTag":"over","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new over wrapped function.","source":"*  {Function} - Returns the new over wrapped function.\n\t *"}},"everyAsyncObject":{"category":"object","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"import { everyAsyncObject, assert } from 'Acid'; const result =  await everyAsyncObject({a: true, b: true, c: true}, (item) => { return item; }); assert(result, true);","source":"import { everyAsyncObject, assert } from \"Acid\";\nconst result = await everyAsyncObject({ a: true, b: true, c: true }, (item) => {\n  return item;\n});\nassert(result, true);\n"}],"name":"everyAsyncObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object that will be looped through.","source":"*  {Object} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"type":"function","functionTag":"everyAsyncObject","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {Boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"}},"everyObject":{"category":"object","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"import { everyObject, assert } from 'Acid'; const result =  everyObject({a: true, b: true, c: true}, (item) => { return item; }); assert(result, true);","source":"import { everyObject, assert } from \"Acid\";\nconst result = everyObject({ a: true, b: true, c: true }, (item) => {\n  return item;\n});\nassert(result, true);\n"}],"name":"everyObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object that will be looped through.","source":"*  {Object} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"type":"function","functionTag":"everyObject","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {Boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"}},"forOfEvery":{"category":"utility","description":"Iterates (for of) through the given object while the iteratee returns true using a for of loop.","examples":[{"tag":"example","optional":false,"description":"import { every, assert } from 'Acid'; assert(forOfEvery({a: false, b: true, c: true}, (item) => { return item; }), false);","source":"import { every, assert } from \"Acid\";\nassert(\n  forOfEvery({ a: false, b: true, c: true }, (item) => {\n    return item;\n  }),\n  false\n);\n"}],"name":"forOfEvery","params":[{"tag":"param","name":"source","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function|Class|Map|Set|Array} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."}],"type":"function","functionTag":"forOfEvery","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {Boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"}},"forOfEveryAsync":{"category":"utility","description":"Asynchronously iterates (for of) through the given object while the iteratee returns true using a for of loop.","examples":[{"tag":"example","optional":false,"description":"import { every, assert } from 'Acid'; assert(forOfEveryAsync({a: false, b: true, c: true}, (item) => { return item; }), false);","source":"import { every, assert } from \"Acid\";\nassert(\n  forOfEveryAsync({ a: false, b: true, c: true }, (item) => {\n    return item;\n  }),\n  false\n);\n"}],"name":"forOfEveryAsync","params":[{"tag":"param","name":"source","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function|Class|Map|Set|Array} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."}],"type":"function","functionTag":"forOfEveryAsync","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {Boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"}},"every":{"category":"utility","description":"Iterates through the given object while the iteratee returns true.","examples":[{"tag":"example","optional":false,"description":"import { every, assert } from 'Acid'; assert(every({a: false, b: true, c: true}, (item) => { return item; }), false);","source":"import { every, assert } from \"Acid\";\nassert(\n  every({ a: false, b: true, c: true }, (item) => {\n    return item;\n  }),\n  false\n);\n"}],"name":"every","params":[{"tag":"param","name":"source","type":"Object | Array | Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object | Array | Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, key, calling array, and array length."}],"type":"function","functionTag":"every","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if all values returned are true or false if one value returns false.","source":"*  {Boolean} - Returns true if all values returned are true or false if one value returns false.\n\t *"}},"overEvery":{"category":"function","description":"Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.","examples":[{"tag":"example","optional":false,"description":"import { overEvery, assert } from 'Acid'; assert(overEvery([Boolean, isFinite])('1'), true);","source":"import { overEvery, assert } from \"Acid\";\nassert(overEvery([Boolean, isFinite])(\"1\"), true);\n"}],"name":"overEvery","params":[{"tag":"param","name":"predicates","type":"(Array.<function>|Object.<function>)","optional":false,"description":"- The list of functions to loop through.","source":"*  {(Array.<function>|Object.<function>)} predicates - The list of functions to loop through."}],"type":"function","functionTag":"overEvery","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new overEvery wrapped function.","source":"*  {Function} - Returns the new overEvery wrapped function.\n\t *"}},"reArg":{"category":"function","description":"Creates a function that invokes method with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.","examples":[{"tag":"example","optional":false,"description":"reArg((a, b, c) => { return [a, b, c]; }, [1,2,0])(1,2,3); // => [2, 3, 1]","source":"reArg(\n  (a, b, c) => {\n    return [a, b, c];\n  },\n  [1, 2, 0]\n)(1, 2, 3);\n// => [2, 3, 1]\n"}],"name":"reArg","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"indexes","type":"Array","optional":false,"description":"- The arranged argument indexes.","source":"*  {Array} indexes - The arranged argument indexes."}],"type":"function","functionTag":"reArg","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new function.","source":"*  {Function} - Returns the new function.\n\t *"}},"throttle":{"category":"function","description":"Creates a throttled function that only invokes callable at most once per every milliseconds. The throttle function has a clear method to cancel the timer.","examples":[{"tag":"example","optional":false,"description":"const throttled = throttle(() => { console.log('throttle'); }, 0)(); throttled(); // 'throttle'","source":"const throttled = throttle(() => {\n  console.log(\"throttle\");\n}, 0)();\nthrottled(); // 'throttle'\n"}],"name":"throttle","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"Number","optional":false,"description":"- The time in milliseconds.","source":"*  {Number} time - The time in milliseconds."}],"type":"function","functionTag":"throttle","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The throttled function.","source":"*  {Function} - The throttled function.\n\t *"}},"wrap":{"category":"function","description":"Creates a function that provides value to wrapper as its first argument. The wrapper function is given two arguments the value and the provided argument from the newly created function.","examples":[{"tag":"example","optional":false,"description":"wrap('Lucy', (firstName, lastName) => { return `My name is ${firstName} ${lastName}.`; })('Diamonds'); // => 'My name is Lucy Diamonds.'","source":"wrap(\"Lucy\", (firstName, lastName) => {\n  return `My name is ${firstName} ${lastName}.`;\n})(\"Diamonds\");\n// => 'My name is Lucy Diamonds.'\n"}],"name":"wrap","params":[{"tag":"param","name":"value","type":"*","optional":false,"description":"- The value to wrap.","source":"*  {*} value - The value to wrap."},{"tag":"param","name":"wrapper","type":"Function","optional":false,"description":"- The wrapper function.","source":"*  {Function} wrapper - The wrapper function."}],"type":"function","functionTag":"wrap","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"The new function.","source":"*  {Function} - The new function.\n\t *"}},"isSame":{"category":"object","description":"Determines whether two values are the same value.","examples":[{"tag":"example","optional":false,"description":"isSame('foo', 'foo'); // => true","source":"isSame(\"foo\", \"foo\");\n// => true\n"}],"name":"isSame","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Value to compare to.","source":"*  {*} source - Value to compare to."},{"tag":"param","name":"target","type":"*","optional":false,"description":"- A value to compare.","source":"*  {*} target - A value to compare."}],"type":"function","functionTag":"isSame","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"A Boolean indicating whether or not the two arguments are the same value.","source":"*  {Boolean} - A Boolean indicating whether or not the two arguments are the same value.\n\t *"}},"cacheNativeMethod":{"category":"utility","description":"Caches a prototype method.","examples":[{"tag":"example","optional":false,"description":"import { cacheNativeMethod, assert } from 'Acid'; assert(cacheNativeMethod(Array.prototype.push)([], 1), 1);","source":"import { cacheNativeMethod, assert } from \"Acid\";\nassert(cacheNativeMethod(Array.prototype.push)([], 1), 1);\n"}],"name":"cacheNativeMethod","params":[{"tag":"param","name":"method","type":"Function","optional":false,"description":"- Prototype method.","source":"*  {Function} method - Prototype method."}],"type":"function","functionTag":"cacheNativeMethod","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Cached method.","source":"*  {Function} - Cached method.\n\t *"}},"getPropNames":{"category":"object","description":"Returns an array of all properties (enumerable or not) found directly upon a given object.","examples":[{"tag":"example","optional":false,"description":"import { getPropNames, assert } from 'Acid'; assert(getPropNames({ 0: 'a', 1: 'b', 2: 'c' }), ['0', '1', '2']);","source":"import { getPropNames, assert } from \"Acid\";\nassert(getPropNames({ 0: \"a\", 1: \"b\", 2: \"c\" }), [\"0\", \"1\", \"2\"]);\n"}],"name":"getPropNames","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The object whose enumerable and non-enumerable own properties are to be returned.","source":"*  {Object} source - The object whose enumerable and non-enumerable own properties are to be returned."}],"type":"function","functionTag":"getPropNames","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"An array of strings that correspond to the properties found directly upon the given object.","source":"*  {Object} - An array of strings that correspond to the properties found directly upon the given object.\n\t *"}},"getPropDesc":{"category":"object","description":"Returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.","examples":[{"tag":"example","optional":false,"description":"getPropDesc({ bar: 42 }, 'bar'); // => { configurable: true, enumerable: true, value: 42, writable: true }","source":"getPropDesc({ bar: 42 }, \"bar\");\n// => { configurable: true, enumerable: true, value: 42, writable: true }\n"}],"name":"getPropDesc","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The target object.","source":"*  {Object} target - The target object."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"*  {String} property - The name of the property whose description is to be retrieved."}],"type":"function","functionTag":"getPropDesc","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A property descriptor of the given property if it exists on the object, undefined otherwise.","source":"*  {Object} - A property descriptor of the given property if it exists on the object, undefined otherwise.\n\t *"}},"defProp":{"category":"object","description":"Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.","examples":[{"tag":"example","optional":false,"description":"defProp({}, 'key', { enumerable: false, configurable: false, writable: false, value: 'static' }).key; // => 'static'","source":"defProp({}, \"key\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n}).key;\n// => 'static'\n"}],"name":"defProp","params":[{"tag":"param","name":"target","type":"Object","optional":false,"description":"- The object on which to define the property.","source":"*  {Object} target - The object on which to define the property."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- The name of the property whose description is to be retrieved.","source":"*  {String} property - The name of the property whose description is to be retrieved."},{"tag":"param","name":"descriptor","type":"Object","optional":false,"description":"- The descriptor for the property being defined or modified.","source":"*  {Object} descriptor - The descriptor for the property being defined or modified."}],"type":"function","functionTag":"defProp","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"The object that was passed to the function.","source":"*  {Object} - The object that was passed to the function.\n\t *"}},"add":{"category":"math","description":"Adds two numbers.","examples":[{"tag":"example","optional":false,"description":"import { add, assert } from 'Acid'; assert(add(1, 1), 2);","source":"import { add, assert } from \"Acid\";\nassert(add(1, 1), 2);\n"}],"name":"add","params":[{"tag":"param","name":"augend","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} augend - First number."},{"tag":"param","name":"addend","type":"Number","optional":false,"description":"- Second number which is being added to another (augend).","source":"*  {Number} addend - Second number which is being added to another (augend)."}],"type":"function","functionTag":"add","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the sum of the arguments.","source":"*  {Number} - Returns the sum of the arguments.\n\t *"}},"deduct":{"category":"math","description":"Decrements a number.","examples":[{"tag":"example","optional":false,"description":"import { multiply, assert } from 'Acid'; assert(multiply(10, 5), 50); deduct(10); // => 9","source":"import { multiply, assert } from \"Acid\";\nassert(multiply(10, 5), 50);\ndeduct(10);\n// => 9\n"}],"name":"deduct","params":[{"tag":"param","name":"number","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} number - First number."}],"type":"function","functionTag":"deduct","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns a decremented version of the number.","source":"*  {Number} - Returns a decremented version of the number.\n\t *"}},"divide":{"category":"math","description":"Divides two numbers.","examples":[{"tag":"example","optional":false,"description":"import { divide, assert } from 'Acid'; assert(divide(10, 5), 2);","source":"import { divide, assert } from \"Acid\";\nassert(divide(10, 5), 2);\n"}],"name":"divide","params":[{"tag":"param","name":"number","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} number - First number."},{"tag":"param","name":"value","type":"Number","optional":false,"description":"- Second number.","source":"*  {Number} value - Second number."}],"type":"function","functionTag":"divide","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the quotient of the arguments.","source":"*  {Number} - Returns the quotient of the arguments.\n\t *"}},"increment":{"category":"math","description":"Increments a number.","examples":[{"tag":"example","optional":false,"description":"import { multiply, assert } from 'Acid'; assert(multiply(10, 5), 50); increment(10); // => 11","source":"import { multiply, assert } from \"Acid\";\nassert(multiply(10, 5), 50);\nincrement(10);\n// => 11\n"}],"name":"increment","params":[{"tag":"param","name":"number","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} number - First number."}],"type":"function","functionTag":"increment","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns an incremented version of the number.","source":"*  {Number} - Returns an incremented version of the number.\n\t *"}},"minus":{"category":"math","description":"Subtracts two numbers.","examples":[{"tag":"example","optional":false,"description":"import { minus, assert } from 'Acid'; assert(minus(3, 1), 2);","source":"import { minus, assert } from \"Acid\";\nassert(minus(3, 1), 2);\n"}],"name":"minus","params":[{"tag":"param","name":"minuend","type":"Number","optional":false,"description":"- The minuend.","source":"*  {Number} minuend - The minuend."},{"tag":"param","name":"subtrahend","type":"Number","optional":false,"description":"- The subtrahend.","source":"*  {Number} subtrahend - The subtrahend."}],"type":"function","functionTag":"minus","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the difference.","source":"*  {Number} - Returns the difference.\n\t *"}},"multiply":{"category":"math","description":"Multiplies two numbers.","examples":[{"tag":"example","optional":false,"description":"import { multiply, assert } from 'Acid'; assert(multiply(10, 5), 50);","source":"import { multiply, assert } from \"Acid\";\nassert(multiply(10, 5), 50);\n"}],"name":"multiply","params":[{"tag":"param","name":"number","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} number - First number."},{"tag":"param","name":"value","type":"Number","optional":false,"description":"- Second number.","source":"*  {Number} value - Second number."}],"type":"function","functionTag":"multiply","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the product of the arguments.","source":"*  {Number} - Returns the product of the arguments.\n\t *"}},"randomFloat":{"category":"math","description":"Produces a random floating-point number between min (included) and max (excluded). Do not use for security or encryption.","examples":[{"tag":"example","optional":false,"description":"import { randomFloat, assert } from 'Acid'; assert(randomFloat(10, 0), (value) => { return value > 0 && value < 10;}); // => 9.1","source":"import { randomFloat, assert } from \"Acid\";\nassert(randomFloat(10, 0), (value) => {\n  return value > 0 && value < 10;\n});\n// => 9.1\n"}],"name":"randomFloat","params":[{"tag":"param","name":"max","type":"Number","optional":false,"description":"- Establishes highest possible value for the random number.","source":"*  {Number} max - Establishes highest possible value for the random number."},{"tag":"param","name":"min","type":"Number","optional":true,"description":"- Establishes lowest possible value for the random number.","source":"*  {Number} [min = 0] - Establishes lowest possible value for the random number.","default":"0"}],"type":"function","functionTag":"randomFloat","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns random integer between the max and min range.","source":"*  {Number} - Returns random integer between the max and min range.\n\t *"}},"remainder":{"category":"math","description":"Extracts the remainder between two numbers.","examples":[{"tag":"example","optional":false,"description":"import { multiply, assert } from 'Acid'; assert(multiply(10, 5), 50); remainder(10, 6); // => 4","source":"import { multiply, assert } from \"Acid\";\nassert(multiply(10, 5), 50);\nremainder(10, 6);\n// => 4\n"}],"name":"remainder","params":[{"tag":"param","name":"number","type":"Number","optional":false,"description":"- First number.","source":"*  {Number} number - First number."},{"tag":"param","name":"value","type":"Number","optional":false,"description":"- Second number.","source":"*  {Number} value - Second number."}],"type":"function","functionTag":"remainder","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the remainder of the arguments.","source":"*  {Number} - Returns the remainder of the arguments.\n\t *"}},"sub":{"category":"math","description":"Subtract all numbers in the array starting from left to right & return the difference.","examples":[{"tag":"example","optional":false,"description":"import { sub, assert } from 'Acid'; assert(sub([10, 1, 2, 3]), 5);","source":"import { sub, assert } from \"Acid\";\nassert(sub([10, 1, 2, 3]), 5);\n"}],"name":"sub","params":[{"tag":"param","name":"source","type":"Number[]","optional":false,"description":"- Array of numbers.","source":"*  {Number[]} source - Array of numbers."}],"type":"function","functionTag":"sub","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns the final difference.","source":"*  {Number} - Returns the final difference.\n\t *"}},"sum":{"category":"math","description":"Sum all numbers in a given array.","examples":[{"tag":"example","optional":false,"description":"import { sum, assert } from 'Acid'; assert(sum([10, 1, 2, 3]), 5);","source":"import { sum, assert } from \"Acid\";\nassert(sum([10, 1, 2, 3]), 5);\n"}],"name":"sum","params":[{"tag":"param","name":"source","type":"Number[]","optional":false,"description":"- Array of numbers.","source":"*  {Number[]} source - Array of numbers."}],"type":"function","functionTag":"sum","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns a single number.","source":"*  {Number} - Returns a single number.\n\t *"}},"isNumberInRange":{"category":"number","description":"Checks if a number is within a range.","examples":[{"tag":"example","optional":false,"description":"import { isNumberInRange, assert } from 'Acid'; assert(isNumberInRange(1, 0, 2), true); assert(isNumberInRange(1, 2, 5), false);","source":"import { isNumberInRange, assert } from \"Acid\";\nassert(isNumberInRange(1, 0, 2), true);\nassert(isNumberInRange(1, 2, 5), false);\n"}],"name":"isNumberInRange","params":[{"tag":"param","name":"source","type":"Number","optional":false,"description":"- Number to be checked.","source":"*  {Number} source - Number to be checked."},{"tag":"param","name":"start","type":"Number","optional":false,"description":"- Beginning of range.","source":"*  {Number} start - Beginning of range."},{"tag":"param","name":"end","type":"Number","optional":false,"description":"- End of range.","source":"*  {Number} end - End of range."}],"type":"function","functionTag":"isNumberInRange","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isNumberNotInRange":{"category":"number","description":"Checks if a number is within a range.","examples":[{"tag":"example","optional":false,"description":"import { isNumberNotInRange, assert } from 'Acid'; assert(isNumberNotInRange(1, 0, 2), false); assert(isNumberNotInRange(1, 2, 5), true);","source":"import { isNumberNotInRange, assert } from \"Acid\";\nassert(isNumberNotInRange(1, 0, 2), false);\nassert(isNumberNotInRange(1, 2, 5), true);\n"}],"name":"isNumberNotInRange","params":[{"tag":"param","name":"source","type":"Number","optional":false,"description":"- Number to be checked.","source":"*  {Number} source - Number to be checked."},{"tag":"param","name":"start","type":"Number","optional":false,"description":"- Beginning of range.","source":"*  {Number} start - Beginning of range."},{"tag":"param","name":"end","type":"Number","optional":false,"description":"- End of range.","source":"*  {Number} end - End of range."}],"type":"function","functionTag":"isNumberNotInRange","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isZero":{"category":"number","description":"Strictly checks if a number is zero.","examples":[{"tag":"example","optional":false,"description":"import { isZero, assert } from 'Acid'; assert(isZero(0), true);","source":"import { isZero, assert } from \"Acid\";\nassert(isZero(0), true);\n"}],"name":"isZero","params":[{"tag":"param","name":"source","type":"Number","optional":false,"description":"- Number to be checked.","source":"*  {Number} source - Number to be checked."}],"type":"function","functionTag":"isZero","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"compactKeys":{"category":"object","description":"Extracts all keys from an object whose values are not null or undefined.","examples":[{"tag":"example","optional":false,"description":"import { compactKeys, assert } from 'Acid'; assert(compactKeys({a: 1, b: 0, c: undefined, d: false, e: null}), {a:1, b:0, d: false});","source":"import { compactKeys, assert } from \"Acid\";\nassert(compactKeys({ a: 1, b: 0, c: undefined, d: false, e: null }), {\n  a: 1,\n  b: 0,\n  d: false,\n});\n"}],"name":"compactKeys","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} object - Object from which keys are extracted."}],"type":"function","functionTag":"compactKeys","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array of key values.","source":"*  {Array} - Returns an array of key values.\n\t *"}},"compactMapAsyncObject":{"category":"object","description":"Asynchronously iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { compactMapAsyncObject, assert } from 'Acid'; assert(await compactMapAsyncObject({a: 1, b: undefined, c: 3}, (item) => { return item; }), {a: 1, c: 3});","source":"import { compactMapAsyncObject, assert } from \"Acid\";\nassert(\n  await compactMapAsyncObject({ a: 1, b: undefined, c: 3 }, (item) => {\n    return item;\n  }),\n  { a: 1, c: 3 }\n);\n"}],"name":"compactMapAsyncObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"compactMapAsyncObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function} - An object with mapped properties that are not null or undefined.\n\t *"}},"compactMapObject":{"category":"object","description":"Iterates through the calling object and creates an object with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { compactMapObject, assert } from 'Acid'; assert(compactMapObject({a: 1, b: undefined, c: 3}, (item) => { return item; }), {a: 1, c: 3});","source":"import { compactMapObject, assert } from \"Acid\";\nassert(\n  compactMapObject({ a: 1, b: undefined, c: 3 }, (item) => {\n    return item;\n  }),\n  { a: 1, c: 3 }\n);\n"}],"name":"compactMapObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"compactMapObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with mapped properties that are not null or undefined.","source":"*  {Object|Function} - An object with mapped properties that are not null or undefined.\n\t *"}},"filterObject":{"category":"object","description":"Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"filterObject({a: false, b: true, c: true}, (item) => { return item; }); // => {b: true, c: true}","source":"filterObject({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => {b: true, c: true}\n"}],"name":"filterObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"filterObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with properties that passed the test.","source":"*  {Object|Function} - An object with properties that passed the test.\n\t *"}},"filterAsyncObject":{"category":"object","description":"Iterates through the calling object and creates an object with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"filterAsyncObject({a: false, b: true, c: true}, (item) => { return item; }); // => {b: true, c: true}","source":"filterAsyncObject({ a: false, b: true, c: true }, (item) => {\n  return item;\n});\n// => {b: true, c: true}\n"}],"name":"filterAsyncObject","params":[{"tag":"param","name":"source","type":"Object|Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"results","type":"Object|Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object|Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"filterAsyncObject","returns":{"tag":"returns","name":"-","type":"Object|Function","optional":false,"description":"An object with properties that passed the test.","source":"*  {Object|Function} - An object with properties that passed the test.\n\t *"}},"invert":{"category":"object","description":"Creates an inverted version of a given object by switching it's keys and values.","examples":[{"tag":"example","optional":false,"description":"import { invert, assert } from 'Acid'; assert(invert({a:1}), {1:'a'});","source":"import { invert, assert } from \"Acid\";\nassert(invert({ a: 1 }), { 1: \"a\" });\n"}],"name":"invert","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object to be inverted.","source":"*  {Object} source - Object to be inverted."},{"tag":"param","name":"target","type":"Array","optional":true,"description":"- Empty object to be populated with inverted values from source.","source":"*  {Array} [target = {}] - Empty object to be populated with inverted values from source.","default":"{}"}],"type":"function","functionTag":"invert","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns object with keys and values switched.","source":"*  {Object} - Returns object with keys and values switched.\n\t *"}},"isMatchObject":{"category":"object","description":"Performs a shallow strict comparison between two objects.","examples":[{"tag":"example","optional":false,"description":"import { assert, isMatchObject } from 'Acid'; assert(isMatchObject({a: 1}, {a: 1}), true);","source":"import { assert, isMatchObject } from \"Acid\";\nassert(isMatchObject({ a: 1 }, { a: 1 }), true);\n"}],"name":"isMatchObject","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Source object.","source":"*  {Object} source - Source object."},{"tag":"param","name":"target","type":"Object","optional":false,"description":"- Object to compare to source.","source":"*  {Object} target - Object to compare to source."}],"type":"function","functionTag":"isMatchObject","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"omit":{"category":"object","description":"Returns a clone of the given object without the given properties.","examples":[{"tag":"example","optional":false,"description":"import { omit, assert } from 'Acid'; assert(omit({a:1, b:2}, ['a']), {b:2});","source":"import { omit, assert } from \"Acid\";\nassert(omit({ a: 1, b: 2 }, [\"a\"]), { b: 2 });\n"}],"name":"omit","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object from which keys are extracted.","source":"*  {Object} source - Object from which keys are extracted."},{"tag":"param","name":"blacklist","type":"Array|RegExp|String","optional":false,"description":"- List of property keys to omit from the returned object.","source":"*  {Array|RegExp|String} blacklist - List of property keys to omit from the returned object."}],"type":"function","functionTag":"omit","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A new object with the removed.","source":"*  {Object} - A new object with the removed.\n\t *"}},"pick":{"category":"object","description":"Returns a clone of the source object with the plucked properties.","examples":[{"tag":"example","optional":false,"description":"pick({a:1, b:2, c:3}, ['a','b']); // => {a:1, b:2}","source":"pick({ a: 1, b: 2, c: 3 }, [\"a\", \"b\"]);\n// => {a:1, b:2}\n"}],"name":"pick","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Object to be cloned.","source":"*  {Object} source - Object to be cloned."},{"tag":"param","name":"whitelist","type":"Array","optional":false,"description":"- Array of property names used to determine what values to pluck.","source":"*  {Array} whitelist - Array of property names used to determine what values to pluck."},{"tag":"param","name":"target","type":"Object","optional":true,"description":"- Object to be populated with plucked values.","source":"*  {Object} [target = {}] - Object to be populated with plucked values.","default":"{}"}],"type":"function","functionTag":"pick","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"A new object with plucked properties.","source":"*  {Object} - A new object with plucked properties.\n\t *"}},"objectSize":{"category":"object","description":"Returns the amount of keys on the object.","examples":[{"tag":"example","optional":false,"description":"objectSize({ 0: 'a', 1: 'b', 2: 'c' }); // => 3","source":"objectSize({ 0: \"a\", 1: \"b\", 2: \"c\" });\n// => 3\n"}],"name":"objectSize","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The source object.","source":"*  {Object} source - The source object."}],"type":"function","functionTag":"objectSize","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"The amount of keys.","source":"*  {Number} - The amount of keys.\n\t *"}},"zipObject":{"category":"object","description":"Creates an object from two arrays, one of property identifiers and one of corresponding values.","examples":[{"tag":"example","optional":false,"description":"zipObject(['a', 'b'], [1, 2]); // => { 'a': 1, 'b': 2 }","source":"zipObject([\"a\", \"b\"], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n"}],"name":"zipObject","params":[{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- The property identifiers.","source":"*  {Array} properties - The property identifiers."},{"tag":"param","name":"values","type":"Array","optional":false,"description":"- The property values.","source":"*  {Array} values - The property values."}],"type":"function","functionTag":"zipObject","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new object.","source":"*  {Object} - Returns the new object.\n\t *"}},"unZipObject":{"category":"object","description":"Takes an array of grouped elements and creates an array regrouping the elements to their pre-zip object configuration.","examples":[{"tag":"example","optional":false,"description":"unZipObject({ 'a': 1, 'b': 2 }); // => [['a', 'b'], [1, 2]]","source":"unZipObject({ a: 1, b: 2 });\n// => [['a', 'b'], [1, 2]]\n"}],"name":"unZipObject","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- The object to process.","source":"*  {Object} object - The object to process."}],"type":"function","functionTag":"unZipObject","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns two arrays one of keys and the other of values inside a single array.","source":"*  {Array} - Returns two arrays one of keys and the other of values inside a single array.\n\t *"}},"upperCase":{"category":"string","description":"Converts a string and converts it entirely into uppercase.","examples":[{"tag":"example","optional":false,"description":"import { upperCase, assert } from 'Acid'; upperCase('upper case'); // => 'UPPER CASE'","source":"import { upperCase, assert } from \"Acid\";\nupperCase(\"upper case\");\n// => 'UPPER CASE'\n"}],"name":"upperCase","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be converted into upper case.","source":"*  {String} source - String to be converted into upper case."}],"type":"function","functionTag":"upperCase","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Converted string in upper case.","source":"*  {String} - Converted string in upper case.\n\t *"}},"camelCase":{"category":"string","description":"Converts a string into Camel case format.","examples":[{"tag":"example","optional":false,"description":"import { camelCase, assert } from 'Acid'; camelCase('camel case'); // => 'camelCase'","source":"import { camelCase, assert } from \"Acid\";\ncamelCase(\"camel case\");\n// => 'camelCase'\n"}],"name":"camelCase","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be converted into Camel case.","source":"*  {String} source - String to be converted into Camel case."}],"type":"function","functionTag":"camelCase","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Converted string in Camel case.","source":"*  {String} - Converted string in Camel case.\n\t *"}},"kebabCase":{"category":"string","description":"Converts a string into Kebab case format.","examples":[{"tag":"example","optional":false,"description":"import { kebabCase, assert } from 'Acid'; kebabCase('kebab case'); // => 'kebab-case'","source":"import { kebabCase, assert } from \"Acid\";\nkebabCase(\"kebab case\");\n// => 'kebab-case'\n"}],"name":"kebabCase","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be converted into Kebab case.","source":"*  {String} source - String to be converted into Kebab case."}],"type":"function","functionTag":"kebabCase","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Converted string in Kebab case.","source":"*  {String} - Converted string in Kebab case.\n\t *"}},"snakeCase":{"category":"string","description":"Converts a string into snake case format.","examples":[{"tag":"example","optional":false,"description":"import { snakeCase, assert } from 'Acid'; snakeCase('snake case'); // => 'snake_case'","source":"import { snakeCase, assert } from \"Acid\";\nsnakeCase(\"snake case\");\n// => 'snake_case'\n"}],"name":"snakeCase","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be converted into snake case.","source":"*  {String} source - String to be converted into snake case."}],"type":"function","functionTag":"snakeCase","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Converted string in Snake case.","source":"*  {String} - Converted string in Snake case.\n\t *"}},"insertInRange":{"category":"string","description":"Inserts text into a string at a given position.","examples":[{"tag":"example","optional":false,"description":"import { insertInRange, assert } from 'Acid'; insertInRange('A from Lucy.', 1, ' tab'); // => 'A tab from Lucy.'","source":"import { insertInRange, assert } from \"Acid\";\ninsertInRange(\"A from Lucy.\", 1, \" tab\");\n// => 'A tab from Lucy.'\n"}],"name":"insertInRange","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to insert the text into.","source":"*  {String} string - String to insert the text into."},{"tag":"param","name":"index","type":"Number","optional":false,"description":"- Point of insertion.","source":"*  {Number} index - Point of insertion."},{"tag":"param","name":"text","type":"String","optional":false,"description":"- The string to be inserted.","source":"*  {String} text - The string to be inserted."}],"type":"function","functionTag":"insertInRange","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"The string with the text inserted at the given point.","source":"*  {String} - The string with the text inserted at the given point.\n\t *"}},"rightString":{"category":"string","description":"Plucks a letter using the index starting from the right.","examples":[{"tag":"example","optional":false,"description":"import { rightString, assert } from 'Acid'; rightString('rightString'); // => 'g' rightString('rightString', 2); // => 'n'","source":"import { rightString, assert } from \"Acid\";\nrightString(\"rightString\");\n// => 'g' rightString('rightString', 2); // => 'n'\n"}],"name":"rightString","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to extract the letter from.","source":"*  {String} string - String to extract the letter from."},{"tag":"param","name":"index","type":"Number","optional":true,"description":"- The starting position.","source":"*  {Number} [index=1] - The starting position.","default":"1"}],"type":"function","functionTag":"rightString","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"A letter at the given index.","source":"*  {String} - A letter at the given index.\n\t *"}},"chunkString":{"category":"string","description":"Splits up a string into chunks.","examples":[{"tag":"example","optional":false,"description":"import { chunkString, assert } from 'Acid'; chunkString('chunk', 2); // => ['ch', 'un', 'k']","source":"import { chunkString, assert } from \"Acid\";\nchunkString(\"chunk\", 2);\n// => ['ch', 'un', 'k']\n"}],"name":"chunkString","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to chunked.","source":"*  {String} string - String to chunked."},{"tag":"param","name":"size","type":"Number","optional":true,"description":"- The max string length per chunk.","source":"*  {Number} [size] - The max string length per chunk."}],"type":"function","functionTag":"chunkString","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with strings that are <= size parameter.","source":"*  {Array} - An array with strings that are <= size parameter.\n\t *"}},"initialString":{"category":"string","description":"Truncates everything before the index starting from the right.","examples":[{"tag":"example","optional":false,"description":"import { initialString, assert } from 'Acid'; initialString('initialString'); // => 'initialStrin' initialString('initialString', 2); // => 'initialStri'","source":"import { initialString, assert } from \"Acid\";\ninitialString(\"initialString\");\n// => 'initialStrin' initialString('initialString', 2); // => 'initialStri'\n"}],"name":"initialString","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to extract the initial letters from.","source":"*  {String} string - String to extract the initial letters from."},{"tag":"param","name":"index","type":"Number","optional":true,"description":"- Starting point from the right.","source":"*  {Number} [index=1] - Starting point from the right.","default":"1"}],"type":"function","functionTag":"initialString","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"A string with the characters before the index starting from the right.","source":"*  {String} - A string with the characters before the index starting from the right.\n\t *"}},"restString":{"category":"string","description":"Truncates everything after a index.","examples":[{"tag":"example","optional":false,"description":"import { restString, assert } from 'Acid'; restString('restString'); // => 'estString' restString('restString', 2); // => 'stString'","source":"import { restString, assert } from \"Acid\";\nrestString(\"restString\");\n// => 'estString' restString('restString', 2); // => 'stString'\n"}],"name":"restString","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to extract the rest of the letters from.","source":"*  {String} string - String to extract the rest of the letters from."},{"tag":"param","name":"index","type":"Number","optional":true,"description":"- Starting point.","source":"*  {Number} [index=1] - Starting point.","default":"1"}],"type":"function","functionTag":"restString","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"A string without the characters up-to to the index.","source":"*  {String} - A string without the characters up-to to the index.\n\t *"}},"replaceList":{"category":"string","description":"Replaces all occurrences of strings in an array with a value.","examples":[{"tag":"example","optional":false,"description":"import { replaceList, assert } from 'Acid'; replaceList('Her name was user.', ['user'], 'Lucy'); // => 'Her name was Lucy.'","source":"import { replaceList, assert } from \"Acid\";\nreplaceList(\"Her name was user.\", [\"user\"], \"Lucy\");\n// => 'Her name was Lucy.'\n"}],"name":"replaceList","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be replaced.","source":"*  {String} string - String to be replaced."},{"tag":"param","name":"words","type":"Array","optional":false,"description":"- Strings to replace.","source":"*  {Array} words - Strings to replace."},{"tag":"param","name":"value","type":"String","optional":false,"description":"- The match replacement.","source":"*  {String} value - The match replacement."}],"type":"function","functionTag":"replaceList","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"The string with the replacement.","source":"*  {String} - The string with the replacement.\n\t *"}},"rawURLDecode":{"category":"string","description":"Raw URL decoder.","examples":[{"tag":"example","optional":false,"description":"import { rawURLDecode, assert } from 'Acid'; rawURLDecode('Lucy%20saw%20diamonds%20in%20the%20sky.'); // => 'Lucy saw diamonds in the sky.'","source":"import { rawURLDecode, assert } from \"Acid\";\nrawURLDecode(\"Lucy%20saw%20diamonds%20in%20the%20sky.\");\n// => 'Lucy saw diamonds in the sky.'\n"}],"name":"rawURLDecode","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be replaced.","source":"*  {String} string - String to be replaced."}],"type":"function","functionTag":"rawURLDecode","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Converted string into the decoded URI Component .","source":"*  {String} - Converted string into the decoded URI Component .\n\t *"}},"htmlEntities":{"category":"string","description":"Replaced sensitive characters with their matching html entity.","examples":[{"tag":"example","optional":false,"description":"import { htmlEntities, assert } from 'Acid'; htmlEntities(`<script>console.log('Lucy & diamonds.')</script>`); // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"import { htmlEntities, assert } from \"Acid\";\nhtmlEntities(`<script>console.log('Lucy & diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n"}],"name":"htmlEntities","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be replaced.","source":"*  {String} string - String to be replaced."}],"type":"function","functionTag":"htmlEntities","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Replaced string.","source":"*  {String} - Replaced string.\n\t *"}},"sanitize":{"category":"string","description":"Executes rawURLDecode followd by htmlEntities methods on a string.","examples":[{"tag":"example","optional":false,"description":"import { sanitize, assert } from 'Acid'; sanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`); // => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`","source":"import { sanitize, assert } from \"Acid\";\nsanitize(`<script>console.log('Lucy%20&%20diamonds.')</script>`);\n// => `&lt;script&gt;console.log('Lucy &amp; diamonds.')&lt;/script&gt;`\n"}],"name":"sanitize","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be replaced.","source":"*  {String} string - String to be replaced."}],"type":"function","functionTag":"sanitize","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Replaced string.","source":"*  {String} - Replaced string.\n\t *"}},"tokenize":{"category":"string","description":"Break string by non-white space characters matches.","examples":[{"tag":"example","optional":false,"description":"import { tokenize, assert } from 'Acid'; tokenize('I am Lucy!'); // => [\"I\", \"am\", \"Lucy!\"]","source":"import { tokenize, assert } from \"Acid\";\ntokenize(\"I am Lucy!\");\n// => [\"I\", \"am\", \"Lucy!\"]\n"}],"name":"tokenize","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be broken up.","source":"*  {String} string - String to be broken up."}],"type":"function","functionTag":"tokenize","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of words without white space characters.","source":"*  {Array} - Array of words without white space characters.\n\t *"}},"words":{"description":"Break string into word matches.","examples":[{"tag":"example","optional":false,"description":"import { words, assert } from 'Acid'; words('I am Lucy!'); // => [\"I\", \"am\", \"Lucy\"]","source":"import { words, assert } from \"Acid\";\nwords(\"I am Lucy!\");\n// => [\"I\", \"am\", \"Lucy\"]\n"}],"name":"words","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be broken up.","source":"*  {String} string - String to be broken up."}],"type":"function","functionTag":"words","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Array of words with word characters only.","source":"*  {Array} - Array of words with word characters only.\n\t *"}},"truncate":{"category":"string","description":"Truncates the string, accounting for word placement and character count.","examples":[{"tag":"example","optional":false,"description":"import { truncate, assert } from 'Acid'; truncate('Where is Lucy?', 2); // => 'Where is'","source":"import { truncate, assert } from \"Acid\";\ntruncate(\"Where is Lucy?\", 2);\n// => 'Where is'\n"}],"name":"truncate","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be truncated.","source":"*  {String} string - String to be truncated."},{"tag":"param","name":"maxLength","type":"Number","optional":false,"description":"- The desired max length of the string.","source":"*  {Number} maxLength - The desired max length of the string."}],"type":"function","functionTag":"truncate","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"The mutated string.","source":"*  {String} - The mutated string.\n\t *"}},"truncateRight":{"category":"string","description":"Truncates the string, accounting for word placement and character count from the right.","examples":[{"tag":"example","optional":false,"description":"import { truncateRight, assert } from 'Acid'; truncateRight('Where is Lucy?', 6); // => 'Lucy?'","source":"import { truncateRight, assert } from \"Acid\";\ntruncateRight(\"Where is Lucy?\", 6);\n// => 'Lucy?'\n"}],"name":"truncateRight","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be truncated.","source":"*  {String} string - String to be truncated."},{"tag":"param","name":"maxLength","type":"Number","optional":false,"description":"- The desired max length of the string.","source":"*  {Number} maxLength - The desired max length of the string."}],"type":"function","functionTag":"truncateRight","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"The mutated string.","source":"*  {String} - The mutated string.\n\t *"}},"upperFirstLetter":{"category":"string","description":"Returns the first letter capitalized.","examples":[{"tag":"example","optional":false,"description":"import { upperFirstLetter, assert } from 'Acid'; upperFirstLetter('upper'); // => \"U\"","source":"import { upperFirstLetter, assert } from \"Acid\";\nupperFirstLetter(\"upper\");\n// => \"U\"\n"}],"name":"upperFirstLetter","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to extract first letter from.","source":"*  {String} string - String to extract first letter from."}],"type":"function","functionTag":"upperFirstLetter","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"An upper case letter.","source":"*  {String} - An upper case letter.\n\t *"}},"upperFirst":{"category":"string","description":"Capitalizes the first letter.","examples":[{"tag":"example","optional":false,"description":"import { upperFirst, assert } from 'Acid'; upperFirst('upper'); // => 'Upper'","source":"import { upperFirst, assert } from \"Acid\";\nupperFirst(\"upper\");\n// => 'Upper'\n"}],"name":"upperFirst","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be mutated.","source":"*  {String} string - String to be mutated."}],"type":"function","functionTag":"upperFirst","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"String with first letter capitalized.","source":"*  {String} - String with first letter capitalized.\n\t *"}},"upperFirstAll":{"category":"string","description":"Capitalize all first letters.","examples":[{"tag":"example","optional":false,"description":"import { upperFirstAll, assert } from 'Acid'; upperFirstAll('Lucy is next up.'); // => 'Lucy Is Next Up.'","source":"import { upperFirstAll, assert } from \"Acid\";\nupperFirstAll(\"Lucy is next up.\");\n// => 'Lucy Is Next Up.'\n"}],"name":"upperFirstAll","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be mutated.","source":"*  {String} string - String to be mutated."}],"type":"function","functionTag":"upperFirstAll","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"String with all first letters capitalized.","source":"*  {String} - String with all first letters capitalized.\n\t *"}},"upperFirstOnly":{"category":"string","description":"Capitalize first letter and lower case the rest.","examples":[{"tag":"example","optional":false,"description":"import { upperFirstOnly, assert } from 'Acid'; upperFirstOnly('LYSERGIC ACID DIETHYLAMIDE'); // => 'Lysergic namespace diethylamide'","source":"import { upperFirstOnly, assert } from \"Acid\";\nupperFirstOnly(\"LYSERGIC ACID DIETHYLAMIDE\");\n// => 'Lysergic namespace diethylamide'\n"}],"name":"upperFirstOnly","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be mutated.","source":"*  {String} string - String to be mutated."}],"type":"function","functionTag":"upperFirstOnly","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"String with first letter capitalized.","source":"*  {String} - String with first letter capitalized.\n\t *"}},"upperFirstOnlyAll":{"category":"string","description":"Capitalize all first letters and lower case the rest.","examples":[{"tag":"example","optional":false,"description":"import { upperFirstOnlyAll, assert } from 'Acid'; upperFirstOnlyAll('LYSERGIC ACID DIETHYLAMIDE'); // => 'Lysergic Acid Diethylamide'","source":"import { upperFirstOnlyAll, assert } from \"Acid\";\nupperFirstOnlyAll(\"LYSERGIC ACID DIETHYLAMIDE\");\n// => 'Lysergic Acid Diethylamide'\n"}],"name":"upperFirstOnlyAll","params":[{"tag":"param","name":"string","type":"String","optional":false,"description":"- String to be mutated.","source":"*  {String} string - String to be mutated."}],"type":"function","functionTag":"upperFirstOnlyAll","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"String with all first letters capitalized.","source":"*  {String} - String with all first letters capitalized.\n\t *"}},"getTypeName":{"category":"type","description":"Returns the constructor name of an object.","examples":[{"tag":"example","optional":false,"description":"import { getTypeName, assert } from 'Acid'; assert(getTypeName(1), true);","source":"import { getTypeName, assert } from \"Acid\";\nassert(getTypeName(1), true);\n"}],"name":"getTypeName","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"getTypeName","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isArguments":{"category":"type","description":"Checks if the value is an Arguments object.","examples":[{"tag":"example","optional":false,"description":"import { isArguments, assert } from 'Acid'; assert(isArguments((function() { return arguments;})()), true); assert(isArguments([]), false);","source":"import { isArguments, assert } from \"Acid\";\nassert(\n  isArguments(\n    (function () {\n      return arguments;\n    })()\n  ),\n  true\n);\nassert(isArguments([]), false);\n"}],"name":"isArguments","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isArguments","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isNumber":{"category":"type","description":"Checks if the value is a number.","examples":[{"tag":"example","optional":false,"description":"import { isNumber, assert } from 'Acid'; assert(isNumber(1), true);","source":"import { isNumber, assert } from \"Acid\";\nassert(isNumber(1), true);\n"}],"name":"isNumber","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isNumber","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"noValue":{"category":"type","description":"Checks if an object is null or undefined.","examples":[{"tag":"example","optional":false,"description":"import { noValue, assert } from 'Acid'; assert(noValue(null), true); assert(noValue(undefined), true); assert(noValue(1), false); assert(noValue(0), false);","source":"import { noValue, assert } from \"Acid\";\nassert(noValue(null), true);\nassert(noValue(undefined), true);\nassert(noValue(1), false);\nassert(noValue(0), false);\n"}],"name":"noValue","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"noValue","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isMap":{"category":"type","description":"Checks if an object or objects are a Map.","examples":[{"tag":"example","optional":false,"description":"import { isMap } from 'Acid'; isMap(new Map()); // => true","source":"import { isMap } from \"Acid\";\nisMap(new Map());\n// => true\n"}],"name":"isMap","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isMap","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isTypedArray":{"category":"type","description":"Checks if an object is a TypedArray. A TypedArray object is an array-like view of an underlying binary data buffer.","examples":[{"tag":"example","optional":false,"description":"import { isTypedArray, assert } from 'Acid'; assert(isTypedArray([]), false); assert(isTypedArray(new Int8Array()), true);","source":"import { isTypedArray, assert } from \"Acid\";\nassert(isTypedArray([]), false);\nassert(isTypedArray(new Int8Array()), true);\n"}],"name":"isTypedArray","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isTypedArray","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isArrayLike":{"category":"type","description":"Checks if an object has a .length property that's greater than or equal to 0 & is not a function. If strict is enabled it will check to see if there is an item returned in range of the number returned bu the length property.","examples":[{"tag":"example","optional":false,"description":"import { isArrayLike, assert } from 'Acid'; assert(isArrayLike([]), true); assert(isArrayLike(2), false);","source":"import { isArrayLike, assert } from \"Acid\";\nassert(isArrayLike([]), true);\nassert(isArrayLike(2), false);\n"}],"name":"isArrayLike","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."},{"tag":"param","name":"strictFlag","type":"*","optional":false,"description":"- Strict flag to also check to see if keys are whole intigers greater than or equal to 0.","source":"*  {*} strictFlag - Strict flag to also check to see if keys are whole intigers greater than or equal to 0."}],"type":"function","functionTag":"isArrayLike","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isBigInt":{"category":"type","description":"Checks if an object or objects are a BigInt.","examples":[{"tag":"example","optional":false,"description":"import { isBigInt, assert } from 'Acid'; assert(isBigInt(BigInt(123)), true);","source":"import { isBigInt, assert } from \"Acid\";\nassert(isBigInt(BigInt(123)), true);\n"}],"name":"isBigInt","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isBigInt","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isBoolean":{"category":"type","description":"Checks if the value is a Boolean.","examples":[{"tag":"example","optional":false,"description":"import { isBoolean } from 'Acid'; isBoolean(true); // => true","source":"import { isBoolean } from \"Acid\";\nisBoolean(true);\n// => true\n"}],"name":"isBoolean","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isBoolean","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isArrayBuffer":{"category":"type","description":"Checks if an object or objects are a ArrayBuffer.","examples":[{"tag":"example","optional":false,"description":"import { isArrayBuffer, assert } from 'Acid'; assert(isArrayBuffer(new ArrayBuffer()), true);","source":"import { isArrayBuffer, assert } from \"Acid\";\nassert(isArrayBuffer(new ArrayBuffer()), true);\n"}],"name":"isArrayBuffer","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isArrayBuffer","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isChild":{"category":"type","description":"Checks if an object is the child of another. Typically used for classes.","examples":[{"tag":"example","optional":false,"description":"import { isChild, construct, assert } from 'Acid'; class Grandparent{} class Parent extends Grandparent{} class Child extends Parent{} const child = construct(Child); assert(isChild(Child, Grandparent), true); assert(isChild(Child, Parent), false); assert(isChild(Parent, Grandparent), false); assert(isChild(child1, child3), false);","source":"import { isChild, construct, assert } from \"Acid\";\nclass Grandparent {}\nclass Parent extends Grandparent {}\nclass Child extends Parent {}\nconst child = construct(Child);\nassert(isChild(Child, Grandparent), true);\nassert(isChild(Child, Parent), false);\nassert(isChild(Parent, Grandparent), false);\nassert(isChild(child1, child3), false);\n"}],"name":"isChild","params":[{"tag":"param","name":"sourceChild","type":"*","optional":false,"description":"- Object to be checked as the child.","source":"*  {*} sourceChild - Object to be checked as the child."},{"tag":"param","name":"targetParent","type":"*","optional":false,"description":"- Object to be checked as the parent.","source":"*  {*} targetParent - Object to be checked as the parent."}],"type":"function","functionTag":"isChild","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isCloneable":{"category":"type","description":"Checks if an object or objects are a structured-cloneable type.","examples":[{"tag":"example","optional":false,"description":"import { isCloneable, assert } from 'Acid'; assert(isCloneable(function (){}), false);","source":"import { isCloneable, assert } from \"Acid\";\nassert(\n  isCloneable(function () {}),\n  false\n);\n"}],"name":"isCloneable","params":[{"tag":"param","name":"source","type":"...*","optional":false,"description":"- Object to be checked.","source":"*  {...*} source - Object to be checked."}],"type":"function","functionTag":"isCloneable","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isDate":{"category":"type","description":"Checks if the value is a Date.","examples":[{"tag":"example","optional":false,"description":"import { isDate, assert } from 'Acid'; assert(isDate(new Date()), true);","source":"import { isDate, assert } from \"Acid\";\nassert(isDate(new Date()), true);\n"}],"name":"isDate","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isDate","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isString":{"category":"type","description":"Checks if the value is a string.","examples":[{"tag":"example","optional":false,"description":"import { isString } from 'Acid'; isString('Lucy'); // => true","source":"import { isString } from \"Acid\";\nisString(\"Lucy\");\n// => true\n"}],"name":"isString","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isString","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isEmpty":{"category":"type","description":"Checks if the value is empty.","examples":[{"tag":"example","optional":false,"description":"import { isEmpty } from 'Acid'; isEmpty([]); // => true","source":"import { isEmpty } from \"Acid\";\nisEmpty([]);\n// => true\n"}],"name":"isEmpty","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isEmpty","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isF32":{"category":"type","description":"Checks if an object or objects are a Float32Array.","examples":[{"tag":"example","optional":false,"description":"import { isF32, assert } from 'Acid'; assert(isF32(new Float32Array()), true);","source":"import { isF32, assert } from \"Acid\";\nassert(isF32(new Float32Array()), true);\n"}],"name":"isF32","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isF32","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isF64":{"category":"type","description":"Checks if an object or objects are a Float64Array.","examples":[{"tag":"example","optional":false,"description":"import { isF64 } from 'Acid'; isF64(new Float64Array()); // => true","source":"import { isF64 } from \"Acid\";\nisF64(new Float64Array());\n// => true\n"}],"name":"isF64","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isF64","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isFloat":{"category":"type","description":"Checks if the value (typically a number) as a string has a decimal point. Alias of Number.isInteger.","examples":[{"tag":"example","optional":false,"description":"import { isFloat } from 'Acid'; isFloat(1.01); // => true","source":"import { isFloat } from \"Acid\";\nisFloat(1.01);\n// => true\n"}],"name":"isFloat","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isFloat","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isI16":{"category":"type","description":"Checks if an object or objects are a Int16Array.","examples":[{"tag":"example","optional":false,"description":"import { isI16 } from 'Acid'; isI16(new Int16Array()); // => true","source":"import { isI16 } from \"Acid\";\nisI16(new Int16Array());\n// => true\n"}],"name":"isI16","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isI16","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isI32":{"category":"type","description":"Checks if an object or objects are a Int32Array.","name":"isI32","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isI32","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false. import { isI32, assert } from 'Acid'; assert(isI32(new Int32Array()), true);.","source":"*  {Boolean} - Returns true or false.\n\t *\n\t * import { isI32, assert } from 'Acid';\n\t * assert(isI32(new Int32Array()), true);.\n\t */"}},"isI8":{"category":"type","description":"Checks if an object or objects are a Int8Array.","examples":[{"tag":"example","optional":false,"description":"import { isInt8 } from 'Acid'; isInt8(new Int8Array()); // => true","source":"import { isInt8 } from \"Acid\";\nisInt8(new Int8Array());\n// => true\n"}],"name":"isI8","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isI8","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isIterable":{"category":"type","description":"Checks if the object has inherited properties from the built-in Iterator class and which implements the Symbol.iterator interface. Built-in Iterators: String, Array, TypedArray, Map, Set, and Segments.","examples":[{"tag":"example","optional":false,"description":"import { isIterable, assert } from 'Acid'; assert(isIterable([]), true); assert(isIterable(new Int8Array()), true); assert(isIterable('test'), false);","source":"import { isIterable, assert } from \"Acid\";\nassert(isIterable([]), true);\nassert(isIterable(new Int8Array()), true);\nassert(isIterable(\"test\"), false);\n"}],"name":"isIterable","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isIterable","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isPromise":{"category":"type","description":"Checks if an object is a promise.","examples":[{"tag":"example","optional":false,"description":"import { isPromise } from 'Acid'; isPromise(new Promise(() => {})); // => true","source":"import { isPromise } from \"Acid\";\nisPromise(new Promise(() => {}));\n// => true\n"}],"name":"isPromise","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isPromise","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"True or false.","source":"*  {Boolean} - True or false.\n\t *"}},"isKindAsync":{"category":"type","description":"Checks if an object is a kind of async object such as async function, promise, or generator.","examples":[{"tag":"example","optional":false,"description":"import { isKindAsync, assert } from 'Acid'; assert(isKindAsync(async() => {}), true);","source":"import { isKindAsync, assert } from \"Acid\";\nassert(\n  isKindAsync(async () => {}),\n  true\n);\n"}],"name":"isKindAsync","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isKindAsync","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"True or false.","source":"*  {Boolean} - True or false.\n\t *"}},"isParent":{"category":"type","description":"Checks if an object is the child of another. Typically used for classes.","examples":[{"tag":"example","optional":false,"description":"import { isParent, construct, assert } from 'Acid'; class parentClass{} class otherClass{} const child1 = construct(parentClass); const child2 = construct(otherClass); assert(isParent(child1, parentClass), true); assert(isParent(child3, parentClass), false); assert(isParent(parentClass, child1), false); assert(isParent(child1, child3), false);","source":"import { isParent, construct, assert } from \"Acid\";\nclass parentClass {}\nclass otherClass {}\nconst child1 = construct(parentClass);\nconst child2 = construct(otherClass);\nassert(isParent(child1, parentClass), true);\nassert(isParent(child3, parentClass), false);\nassert(isParent(parentClass, child1), false);\nassert(isParent(child1, child3), false);\n"}],"name":"isParent","params":[{"tag":"param","name":"sourceParent","type":"*","optional":false,"description":"- Object to be checked as the child.","source":"*  {*} sourceParent - Object to be checked as the child."},{"tag":"param","name":"targetChild","type":"*","optional":false,"description":"- Object to be checked as the parent.","source":"*  {*} targetChild - Object to be checked as the parent."}],"type":"function","functionTag":"isParent","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isPrimitive":{"category":"type","description":"Checks if an object is a primitive.","examples":[{"tag":"example","optional":false,"description":"import { isPrimitive, assert } from 'Acid'; assert(isPrimitive(1), true); assert(isPrimitive(() => {}), false);","source":"import { isPrimitive, assert } from \"Acid\";\nassert(isPrimitive(1), true);\nassert(\n  isPrimitive(() => {}),\n  false\n);\n"}],"name":"isPrimitive","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isPrimitive","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"True or false.","source":"*  {Boolean} - True or false.\n\t *"}},"isRegex":{"category":"type","description":"Checks if the value is a RegExp.","examples":[{"tag":"example","optional":false,"description":"import { isRegex, assert } from 'Acid'; assert(isRegex(/test/), true);","source":"import { isRegex, assert } from \"Acid\";\nassert(isRegex(/test/), true);\n"}],"name":"isRegex","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isRegex","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isRelated":{"category":"type","description":"Checks if objects are related to each other using instanceof. There is no required order for arguments given it will check all available ways.","examples":[{"tag":"example","optional":false,"description":"import { isRelated, construct, assert } from 'Acid'; class parentClass{} class otherClass{} const child1 = construct(parentClass); const child2 = construct(parentClass); const child3 = construct(otherClass); assert(isRelated(child1, child2), true); assert(isRelated(child1, parentClass), true); assert(isRelated(parentClass, child2), true); assert(isRelated(child1, child3), false);","source":"import { isRelated, construct, assert } from \"Acid\";\nclass parentClass {}\nclass otherClass {}\nconst child1 = construct(parentClass);\nconst child2 = construct(parentClass);\nconst child3 = construct(otherClass);\nassert(isRelated(child1, child2), true);\nassert(isRelated(child1, parentClass), true);\nassert(isRelated(parentClass, child2), true);\nassert(isRelated(child1, child3), false);\n"}],"name":"isRelated","params":[{"tag":"param","name":"targetOne","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} targetOne - Object to be checked."},{"tag":"param","name":"targetTwo","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} targetTwo - Object to be checked."}],"type":"function","functionTag":"isRelated","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isSafeInt":{"category":"type","description":"Checks if the value (typically a number) as a string has a decimal point. Alias of Number.isInteger.","examples":[{"tag":"example","optional":false,"description":"import { isSafeInt } from 'Acid'; isSafeInt(1.01); // => true","source":"import { isSafeInt } from \"Acid\";\nisSafeInt(1.01);\n// => true\n"}],"name":"isSafeInt","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isSafeInt","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isU16":{"category":"type","description":"Checks if an object or objects are a Uint16Array.","examples":[{"tag":"example","optional":false,"description":"import { isU16 } from 'Acid'; isU16(new Uint16Array()); // => true","source":"import { isU16 } from \"Acid\";\nisU16(new Uint16Array());\n// => true\n"}],"name":"isU16","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isU16","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isU32":{"category":"type","description":"Checks if an object or objects are a Uint32Array.","examples":[{"tag":"example","optional":false,"description":"import { isU32 } from 'Acid'; isU32(new Uint32Array()); // => true","source":"import { isU32 } from \"Acid\";\nisU32(new Uint32Array());\n// => true\n"}],"name":"isU32","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isU32","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isU8":{"category":"type","description":"Checks if an object or objects are a Uint8Array.","examples":[{"tag":"example","optional":false,"description":"import { isU8 } from 'Acid'; isU8(new Uint8Array()); // => true","source":"import { isU8 } from \"Acid\";\nisU8(new Uint8Array());\n// => true\n"}],"name":"isU8","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isU8","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isU8C":{"category":"type","description":"Checks if an object or objects are a Uint8ClampedArray.","examples":[{"tag":"example","optional":false,"description":"import { isU8C } from 'Acid'; isU8C(new Uint8ClampedArray()); // => true","source":"import { isU8C } from \"Acid\";\nisU8C(new Uint8ClampedArray());\n// => true\n"}],"name":"isU8C","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isU8C","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"isWeakMap":{"category":"type","description":"Checks if an object or objects are a WeakMap.","examples":[{"tag":"example","optional":false,"description":"import { isWeakMap } from 'Acid'; assert(isWeakMap(new WeakMap()), true);","source":"import { isWeakMap } from \"Acid\";\nassert(isWeakMap(new WeakMap()), true);\n"}],"name":"isWeakMap","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"isWeakMap","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"ifValue":{"category":"function","description":"If source has a value then return source or invoke a function (if present) with source as the argument.","name":"ifValue","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object to be hasValue checked.","source":"*  {*} source - The source object to be hasValue checked."}],"type":"function","functionTag":"ifValue","returns":{"tag":"returns","name":"The","type":"source","optional":false,"description":"source object if it passes the hasValue check.","source":"*  {source} The source object if it passes the hasValue check.\n\t */"}},"notEqual":{"category":"utility","description":"Performs a deep comparison between two objects & determines if they're different using strict comparison.","examples":[{"tag":"example","optional":false,"description":"import { notEqual, assert } from 'Acid'; assert(notEqual({a: [1,2,3]}, {a: [1,3,3]}), true);","source":"import { notEqual, assert } from \"Acid\";\nassert(notEqual({ a: [1, 2, 3] }, { a: [1, 3, 3] }), true);\n"}],"name":"notEqual","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Source object.","source":"*  {*} source - Source object."},{"tag":"param","name":"target","type":"*","optional":false,"description":"- Object to be compared.","source":"*  {*} target - Object to be compared."}],"type":"function","functionTag":"notEqual","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"jsonParse":{"category":"utility","description":"Parses JSON string with safety check for undefined.","examples":[{"tag":"example","optional":false,"description":"import { jsonParse, assert } from 'Acid'; assert(jsonParse('{a:1}'), {a:1});","source":"import { jsonParse, assert } from \"Acid\";\nassert(jsonParse(\"{a:1}\"), { a: 1 });\n"}],"name":"jsonParse","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- String to be parsed.","source":"*  {String} source - String to be parsed."},{"tag":"param","name":"reviver","type":"Function","optional":false,"description":"- A function that prescribes how each value originally produced by parsing is transformed before being returned.","source":"*  {Function} reviver - A function that prescribes how each value originally produced by parsing is transformed before being returned."}],"type":"function","functionTag":"jsonParse","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the parsed object.","source":"*  {Object} - Returns the parsed object.\n\t *"}},"stringify":{"category":"utility","description":"Stringify an object into a JSON string.","examples":[{"tag":"example","optional":false,"description":"import { stringify, assert } from 'Acid'; assert(stringify({a:1}), '{a:1}');","source":"import { stringify, assert } from \"Acid\";\nassert(stringify({ a: 1 }), \"{a:1}\");\n"}],"name":"stringify","params":[{"tag":"param","name":"object","type":"Object","optional":false,"description":"- Object to Stringify.","source":"*  {Object} object - Object to Stringify."}],"type":"function","functionTag":"stringify","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Returns the object as a valid JSON string.","source":"*  {String} - Returns the object as a valid JSON string.\n\t *"}},"assert":{"category":"utility","description":"Check if source value matches the expected value.","examples":[{"tag":"example","optional":false,"description":"import { assert } from 'Acid'; if (!assert(1,1)) { new Error('Assert Method Failed'); }","source":"import { assert } from \"Acid\";\nif (!assert(1, 1)) {\n  new Error(\"Assert Method Failed\");\n}\n"}],"name":"assert","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object to compare to.","source":"*  {*} source - The source object to compare to."},{"tag":"param","name":"expected","type":"*","optional":false,"description":"- The expected result that's compared to the source.","source":"*  {*} expected - The expected result that's compared to the source."},{"tag":"param","name":"options","type":"*","optional":false,"description":"- Additional options for the Error instance & unit test information.","source":"*  {*} options - Additional options for the Error instance & unit test information."}],"type":"function","functionTag":"assert","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns a deep clone of an object.","source":"*  {Object} - Returns a deep clone of an object.\n\t *"}},"bindAll":{"category":"utility","description":"Loops through an object or an array and binds the given object to all functions encountered. Optionally accepts an object which to assign the newly bound functions to.","examples":[{"tag":"example","optional":false,"description":"import { assert, bindAll } from 'Acid'; const bounded = bindAll([function () { return this;}], 'Bounded'); assert(bounded[0](), 'Bounded');","source":"import { assert, bindAll } from \"Acid\";\nconst bounded = bindAll(\n  [\n    function () {\n      return this;\n    },\n  ],\n  \"Bounded\"\n);\nassert(bounded[0](), \"Bounded\");\n"}],"name":"bindAll","params":[{"tag":"param","name":"collection","type":"Object|Function|Array","optional":false,"description":"- The functions to bind.","source":"*  {Object|Function|Array} collection - The functions to bind."},{"tag":"param","name":"bindThis","type":"*","optional":false,"description":"- Object to be bound to functions.","source":"*  {*} bindThis - Object to be bound to functions."},{"tag":"param","name":"targetAssign","type":"Object|Function|Array","optional":false,"description":"- Object to assign newly bound functions to.","source":"*  {Object|Function|Array} targetAssign - Object to assign newly bound functions to."}],"type":"function","functionTag":"bindAll","returns":{"tag":"returns","name":"-","type":"Object|Function|Array","optional":false,"description":"Returns the collection of bound functions or the assign target provided.","source":"*  {Object|Function|Array} - Returns the collection of bound functions or the assign target provided.\n\t *"}},"clone":{"category":"utility","description":"Creates a structured clone of an object which is a \"structured-cloneable type\".","examples":[{"tag":"example","optional":false,"description":"import { clone, assert } from 'Acid'; assert(clone({a:{b:[2]}}), {a:{b:[2]}});","source":"import { clone, assert } from \"Acid\";\nassert(clone({ a: { b: [2] } }), { a: { b: [2] } });\n"}],"name":"clone","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- Any structured-cloneable type object.","source":"*  {Object} source - Any structured-cloneable type object."}],"type":"function","functionTag":"clone","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns a deep clone of an object.","source":"*  {Object} - Returns a deep clone of an object.\n\t *"}},"truey":{"category":"utility","description":"Check if a value is truey which is anything but false, null, 0, \"\", undefined, and NaN.","examples":[{"tag":"example","optional":false,"description":"import { truey, assert } from 'Acid'; assert(truey(1), true); assert(truey(0), false);","source":"import { truey, assert } from \"Acid\";\nassert(truey(1), true);\nassert(truey(0), false);\n"}],"name":"truey","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Item to be truey checked.","source":"*  {*} source - Item to be truey checked."},{"tag":"param","name":"returnIfTrue","type":"*","optional":true,"description":"- Item to be returned if item is truey.","source":"*  {*} [returnIfTrue = true] - Item to be returned if item is truey.","default":"true"}],"type":"function","functionTag":"truey","returns":{"tag":"returns","name":"-","type":"Boolean|*","optional":false,"description":"Returns true if the item is truey or returnIfTrue if provided otherwise returns false.","source":"*  {Boolean|*} - Returns true if the item is truey or returnIfTrue if provided otherwise returns false.\n\t *"}},"compact":{"category":"utility","description":"Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey.","examples":[{"tag":"example","optional":false,"description":"import { compact, assert } from 'Acid'; assert(compact([1,'B', 'Cat', false, null, 0 , '', undefined, NaN]), [1, 'B', 'Cat']);","source":"import { compact, assert } from \"Acid\";\nassert(compact([1, \"B\", \"Cat\", false, null, 0, \"\", undefined, NaN]), [\n  1,\n  \"B\",\n  \"Cat\",\n]);\n"}],"name":"compact","params":[{"tag":"param","name":"source","type":"Array|Object","optional":false,"description":"- Array or Object to be compacted.","source":"*  {Array|Object} source - Array or Object to be compacted."}],"type":"function","functionTag":"compact","returns":{"tag":"returns","name":"-","type":"Array|Object","optional":false,"description":"A new object or array containing the filtered values.","source":"*  {Array|Object} - A new object or array containing the filtered values.\n\t *"}},"compactMap":{"category":"utility","description":"Iterates through the calling object and creates a new object based on the calling object's type with the results, (excludes results which are null or undefined), of the iteratee on every element in the calling object.","examples":[{"tag":"example","optional":false,"description":"import { compactMap, assert } from 'Acid'; assert(compactMap({a: null, b: 2, c: 3}, (item) => { return item; }), {b: 2, c: 3});","source":"import { compactMap, assert } from \"Acid\";\nassert(\n  compactMap({ a: null, b: 2, c: 3 }, (item) => {\n    return item;\n  }),\n  { b: 2, c: 3 }\n);\n"}],"name":"compactMap","params":[{"tag":"param","name":"source","type":"Array | object | Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array | object | Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object | Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object | Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"compactMap","returns":{"tag":"returns","name":"-","type":"Array | object | Function","optional":false,"description":"A new object of the same calling object's type.","source":"*  {Array | object | Function} - A new object of the same calling object's type.\n\t *"}},"falsey":{"category":"utility","description":"Check if a value is falsey which are false, null, 0, \"\", undefined, and NaN.","examples":[{"tag":"example","optional":false,"description":"import { falsey, assert } from 'Acid'; assert(falsey(0), true); assert(falsey(1), false);","source":"import { falsey, assert } from \"Acid\";\nassert(falsey(0), true);\nassert(falsey(1), false);\n"}],"name":"falsey","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Item to be falsey checked.","source":"*  {*} source - Item to be falsey checked."},{"tag":"param","name":"returnIfTrue","type":"*","optional":true,"description":"- Item to be returned if item is falsey.","source":"*  {*} [returnIfTrue = true] - Item to be returned if item is falsey.","default":"true"}],"type":"function","functionTag":"falsey","returns":{"tag":"returns","name":"-","type":"Boolean|*","optional":false,"description":"Returns true if the item is falsey or returnIfTrue if provided otherwise returns false.","source":"*  {Boolean|*} - Returns true if the item is falsey or returnIfTrue if provided otherwise returns false.\n\t *"}},"forOfFilter":{"category":"utility","description":"Iterates (for of) through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { assert, forOfFilter } from 'Acid'; const source = {a: undefined, b: 2, c: 3}; const temp = forOfFilter(source, (item) => { return Boolean(item); }); assert(temp, {b: 2, c: 3});","source":"import { assert, forOfFilter } from \"Acid\";\nconst source = { a: undefined, b: 2, c: 3 };\nconst temp = forOfFilter(source, (item) => {\n  return Boolean(item);\n});\nassert(temp, { b: 2, c: 3 });\n"}],"name":"forOfFilter","params":[{"tag":"param","name":"source","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function|Class|Map|Set|Array} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"resultsObject","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be used to assign results else source is type cloned.","source":"*  {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned."}],"type":"function","functionTag":"forOfFilter","returns":{"tag":"returns","name":"-","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"An object with mapped properties.","source":"*  {Object|Function|Class|Map|Set|Array} - An object with mapped properties.\n\t *"}},"forOfFilterAsync":{"category":"utility","description":"Asynchronously iterates (for of)through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { assert, forOfFilterAsync } from 'Acid'; const source = {a: undefined, b: 2, c: 3}; const temp = forOfFilterAsync(source, (item) => { return Boolean(item); }); assert(temp, {b: 2, c: 3});","source":"import { assert, forOfFilterAsync } from \"Acid\";\nconst source = { a: undefined, b: 2, c: 3 };\nconst temp = forOfFilterAsync(source, (item) => {\n  return Boolean(item);\n});\nassert(temp, { b: 2, c: 3 });\n"}],"name":"forOfFilterAsync","params":[{"tag":"param","name":"source","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be looped through.","source":"*  {Object|Function|Class|Map|Set|Array} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created object, calling object, key count, and array of keys."},{"tag":"param","name":"resultsObject","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"- Object that will be used to assign results else source is type cloned.","source":"*  {Object|Function|Class|Map|Set|Array} resultsObject - Object that will be used to assign results else source is type cloned."}],"type":"function","functionTag":"forOfFilterAsync","returns":{"tag":"returns","name":"-","type":"Object|Function|Class|Map|Set|Array","optional":false,"description":"An object with mapped properties.","source":"*  {Object|Function|Class|Map|Set|Array} - An object with mapped properties.\n\t *"}},"filter":{"category":"utility","description":"Iterates through the calling object and creates a new object of the same calling object's type with all elements that pass the test implemented by the iteratee.","examples":[{"tag":"example","optional":false,"description":"import { filter, assert } from 'Acid'; assert(filter({a: false, b: true, c: true}, (item) => { return item; }), {b: true, c: true});","source":"import { filter, assert } from \"Acid\";\nassert(\n  filter({ a: false, b: true, c: true }, (item) => {\n    return item;\n  }),\n  { b: true, c: true }\n);\n"}],"name":"filter","params":[{"tag":"param","name":"source","type":"Array | object | Function","optional":false,"description":"- Object that will be looped through.","source":"*  {Array | object | Function} source - Object that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type.","source":"*  {Function} iteratee - Transformation function which is passed item, key, the newly created map object and arguments unique to mapArray or mapObject depending on the object type."},{"tag":"param","name":"results","type":"Object | Function","optional":true,"description":"- Object that will be used to assign results.","source":"*  {Object | Function} [results = {}] - Object that will be used to assign results.","default":"{}"}],"type":"function","functionTag":"filter","returns":{"tag":"returns","name":"-","type":"Array | object | Function","optional":false,"description":"A new object of the same calling object's type.","source":"*  {Array | object | Function} - A new object of the same calling object's type.\n\t *"}},"flow":{"category":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","optional":false,"description":"flow(increment, increment, deduct)(0); // => 1","source":"flow(increment, increment, deduct)(0);\n// => 1\n"}],"name":"flow","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"type":"function","functionTag":"flow","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"}},"flowRight":{"category":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","optional":false,"description":"flowRight(increment, increment, deduct)(0); // => 1","source":"flowRight(increment, increment, deduct)(0);\n// => 1\n"}],"name":"flowRight","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"type":"function","functionTag":"flowRight","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"}},"flowAsync":{"category":"utility","description":"Creates a function that returns the result of invoking the given functions, where each successive invocation is supplied the return value of the previous.","examples":[{"tag":"example","optional":false,"description":"flowAsync(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0); // => 2","source":"flowAsync(\n  async (item) => {\n    return increment(item);\n  },\n  async (item) => {\n    return increment(item);\n  }\n)(0);\n// => 2\n"}],"name":"flowAsync","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"type":"function","isAsync":true,"functionTag":"flowAsync","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"}},"flowAsyncRight":{"category":"utility","description":"This method is like flow except that it creates a function that invokes the given functions from right to left.","examples":[{"tag":"example","optional":false,"description":"flowAsyncRight(async (item) => {return increment(item);}, async (item) => {return increment(item);})(0); // => 2","source":"flowAsyncRight(\n  async (item) => {\n    return increment(item);\n  },\n  async (item) => {\n    return increment(item);\n  }\n)(0);\n// => 2\n"}],"name":"flowAsyncRight","params":[{"tag":"param","name":"collection","type":"Array","optional":false,"description":"- Methods to invoke.","source":"*  {Array} collection - Methods to invoke."}],"type":"function","isAsync":true,"functionTag":"flowAsyncRight","returns":{"tag":"returns","name":"-","type":"Function","optional":false,"description":"Returns the new composite function.","source":"*  {Function} - Returns the new composite function.\n\t *"}},"has":{"category":"utility","description":"Checks if an object contains something.","examples":[{"tag":"example","optional":false,"description":"import { has, assert } from 'Acid'; assert(has('Hello World', 'Hello'), true); assert(has(['Hello', 'World'], 'hello'), true);","source":"import { has, assert } from \"Acid\";\nassert(has(\"Hello World\", \"Hello\"), true);\nassert(has([\"Hello\", \"World\"], \"hello\"), true);\n"}],"name":"has","params":[{"tag":"param","name":"source","type":"Array|String|Object","optional":false,"description":"- Object to be checked.","source":"*  {Array|String|Object} source - Object to be checked."},{"tag":"param","name":"search","type":"String|Array|Function|RegExp","optional":false,"description":"- Object that is being searched for.","source":"*  {String|Array|Function|RegExp} search - Object that is being searched for."},{"tag":"param","name":"fromIndex","type":"Number","optional":false,"description":"- Index at which to start searching.","source":"*  {Number} fromIndex - Index at which to start searching."}],"type":"function","functionTag":"has","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"hasDot":{"category":"utility","description":"Checks if the string has a '.'.","examples":[{"tag":"example","optional":false,"description":"hasDot('test.js'); // => true","source":"hasDot(\"test.js\");\n// => true\n"}],"name":"hasDot","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- Object to be checked.","source":"*  {*} source - Object to be checked."}],"type":"function","functionTag":"hasDot","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false.\n\t *"}},"ifNotAssign":{"category":"utility","description":"Checks if a property on an object has a value. If not, it will assign a value.","examples":[{"tag":"example","optional":false,"description":"ifNotAssign({}, 'a', 1); // => {a:1}","source":"ifNotAssign({}, \"a\", 1);\n// => {a:1}\n"}],"name":"ifNotAssign","params":[{"tag":"param","name":"rootObject","type":"Object","optional":false,"description":"- The object to check.","source":"*  {Object} rootObject - The object to check."},{"tag":"param","name":"property","type":"String","optional":false,"description":"- The property name which is to be checked.","source":"*  {String} property - The property name which is to be checked."},{"tag":"param","name":"equalThis","type":"*","optional":false,"description":"- The reassignment value for the property being checked.","source":"*  {*} equalThis - The reassignment value for the property being checked."}],"type":"function","functionTag":"ifNotAssign","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the provided rootObject.","source":"*  {Object} - Returns the provided rootObject.\n\t *"}},"interval":{"category":"function","description":"Create an interval timer.","examples":[{"tag":"example","optional":false,"description":"interval(() => {}, 100); // => 0","source":"interval(() => {}, 100);\n// => 0\n"}],"name":"interval","params":[{"tag":"param","name":"callable","type":"Function","optional":false,"description":"- The function to be invoked.","source":"*  {Function} callable - The function to be invoked."},{"tag":"param","name":"time","type":"Number","optional":false,"description":"- The time in milliseconds.","source":"*  {Number} time - The time in milliseconds."}],"type":"function","functionTag":"interval","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns setInterval ID.","source":"*  {Object} - Returns setInterval ID.\n\t *"}},"clearIntervals":{"category":"function","description":"Clear all active interval timers.","examples":[{"tag":"example","optional":false,"description":"clearIntervals(); // => undefined","source":"clearIntervals();\n// => undefined\n"}],"name":"clearIntervals","type":"function","functionTag":"clearIntervals","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t *"}},"model":{"category":"utility","description":"Set & Get a model.","examples":[{"tag":"example","optional":false,"description":"model('test', {a: 1}) && model('test'); // => {a: 1}","source":"model(\"test\", { a: 1 }) && model(\"test\");\n// => {a: 1}\n"}],"name":"model","params":[{"tag":"param","name":"modelName","type":"String","optional":false,"description":"- Name of the model.","source":"*  {String} modelName - Name of the model."},{"tag":"param","name":"modelValue","type":"Object","optional":false,"description":"- The model object.","source":"*  {Object} modelValue - The model object."}],"type":"function","functionTag":"model","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns the associated model.","source":"*  {*} - Returns the associated model."}},"pair":{"category":"utility","description":"Takes the first two arguments given and returns them inside a new array.","examples":[{"tag":"example","optional":false,"description":"import { pair, assert } from 'Acid'; assert(air(1, 2), [1, 2]);","source":"import { pair, assert } from \"Acid\";\nassert(air(1, 2), [1, 2]);\n"}],"name":"pair","params":[{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object.","source":"*  {*} source - The source object."},{"tag":"param","name":"source","type":"*","optional":false,"description":"- The source object.","source":"*  {*} source - The source object."}],"type":"function","functionTag":"pair","returns":{"tag":"returns","name":"The","type":"Array","optional":false,"description":"array which holds the pair.","source":"*  {Array} The array which holds the pair.\n\t *"}},"concurrent":{"category":"utility","description":"Iterates through an array, invokes the async iteratee, and adds the promises to a queue. Then uses & returns the Promise.all on the queue returning the values from each promise. Does not await on the async iteratee.","examples":[{"tag":"example","optional":false,"description":"import { concurrent, assert } from 'Acid'; const tempList = []; await concurrent([1, 2], async (item) => { return item; }); assert(tempList,  [1, 2]);","source":"import { concurrent, assert } from \"Acid\";\nconst tempList = [];\nawait concurrent([1, 2], async (item) => {\n  return item;\n});\nassert(tempList, [1, 2]);\n"}],"name":"concurrent","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"concurrent","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array from Promise.all.","source":"*  {Array} - The array from Promise.all.\n\t *"}},"concurrentStatus":{"category":"utility","description":"Iterates through an array, invokes the async iteratee, and adds the promises to a queue. Then uses & returns the Promise.allSettled on the queue returning the values from each promise. Does not await on the async iteratee.","examples":[{"tag":"example","optional":false,"description":"import { concurrentStatus, assert } from 'Acid'; const tempList = []; await concurrentStatus([1, 2], async (item) => { return item; }); assert(tempList,  [{status: 'fulfilled', value: 1}, {status: 'fulfilled', value: 2}]);","source":"import { concurrentStatus, assert } from \"Acid\";\nconst tempList = [];\nawait concurrentStatus([1, 2], async (item) => {\n  return item;\n});\nassert(tempList, [\n  { status: \"fulfilled\", value: 1 },\n  { status: \"fulfilled\", value: 2 },\n]);\n"}],"name":"concurrentStatus","params":[{"tag":"param","name":"source","type":"Array","optional":false,"description":"- Array that will be looped through.","source":"*  {Array} source - Array that will be looped through."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed item, index, calling array, and array length.","source":"*  {Function} iteratee - Transformation function which is passed item, index, calling array, and array length."},{"tag":"param","name":"thisBind","type":"*","optional":false,"description":"- An object to be given each time to the iteratee.","source":"*  {*} thisBind - An object to be given each time to the iteratee."}],"type":"function","functionTag":"concurrentStatus","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"The array from Promise.allSettled.","source":"*  {Array} - The array from Promise.allSettled.\n\t *"}},"promise":{"category":"utility","description":"A wrapper around the promise constructor.","examples":[{"tag":"example","optional":false,"description":"promise((a) => {}); // => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}","source":"promise((a) => {});\n// => Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}\n"}],"name":"promise","params":[{"tag":"param","name":"callback","type":"Function","optional":false,"description":"- Function to be called back.","source":"*  {Function} callback - Function to be called back."}],"type":"function","functionTag":"promise","test":{"tag":"test","optional":false,"description":"(async () => { const result = await promise((accept) => { accept(true); }); return assert(result, true); });","source":"* \t * (async () => {\n\t *   const result = await promise((accept) => {\n\t *     accept(true);\n\t *   });\n\t *   return assert(result, true);\n\t * });"},"returns":{"tag":"returns","name":"-","type":"Promise","optional":false,"description":"A constructor with a callback function.","source":"*  {Promise} - A constructor with a callback function."}},"propertyMatch":{"category":"utility","description":"Using a deep comparison it checks if properties of two objects using an array are equal.","examples":[{"tag":"example","optional":false,"description":"import { propertyMatch, assert } from 'Acid'; assert(propertyMatch({ a: 1, b: 2 }, { a: 1, b: 2 }, ['a', 'b']), true);","source":"import { propertyMatch, assert } from \"Acid\";\nassert(propertyMatch({ a: 1, b: 2 }, { a: 1, b: 2 }, [\"a\", \"b\"]), true);\n"}],"name":"propertyMatch","params":[{"tag":"param","name":"source","type":"Object","optional":false,"description":"- The source object to compare.","source":"*  {Object} source - The source object to compare."},{"tag":"param","name":"compared","type":"Object","optional":false,"description":"- Object to be compared to source.","source":"*  {Object} compared - Object to be compared to source."},{"tag":"param","name":"properties","type":"Array","optional":false,"description":"- List of properties to compare defaults to keys(source).","source":"*  {Array} properties - List of properties to compare defaults to keys(source)."}],"type":"function","functionTag":"propertyMatch","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns an array of properties.","source":"*  {Array} - Returns an array of properties.\n\t *"}},"stubArray":{"category":"utility","description":"This method returns a new empty array.","examples":[{"tag":"example","optional":false,"description":"import { stubArray } from 'Acid'; stubArray(); // => []","source":"import { stubArray } from \"Acid\";\nstubArray();\n// => []\n"}],"name":"stubArray","type":"function","functionTag":"stubArray","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"Returns the new empty array.","source":"*  {Array} - Returns the new empty array."}},"stubObject":{"category":"utility","description":"This method returns a new empty object.","examples":[{"tag":"example","optional":false,"description":"import { stubObject } from 'Acid'; stubObject(); // => {}","source":"import { stubObject } from \"Acid\";\nstubObject();\n// => {}\n"}],"name":"stubObject","type":"function","functionTag":"stubObject","returns":{"tag":"returns","name":"-","type":"Object","optional":false,"description":"Returns the new empty object.","source":"*  {Object} - Returns the new empty object.\n\t *"}},"stubString":{"category":"utility","description":"This method returns a new empty string.","examples":[{"tag":"example","optional":false,"description":"import { stubString } from 'Acid'; stubString(); // => ''","source":"import { stubString } from \"Acid\";\nstubString();\n// => ''\n"}],"name":"stubString","type":"function","functionTag":"stubString","returns":{"tag":"returns","name":"-","type":"String","optional":false,"description":"Returns the new empty string.","source":"*  {String} - Returns the new empty string.\n\t *"}},"timesAsync":{"category":"utility","description":"Asynchronously iterates based on the amount given awaiting on the iteratee with the current index as an argument.","examples":[{"tag":"example","optional":false,"description":"import { timesAsync } from 'Acid'; await timesAsync(3, async (item) => { console.log(item); }); // 0 // 1 // 2 // => undefined","source":"import { timesAsync } from \"Acid\";\nawait timesAsync(3, async (item) => {\n  console.log(item);\n}); // 0 // 1 // 2\n// => undefined\n"}],"name":"timesAsync","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of times to loop invoking the iteratee.","source":"*  {Number} amount - The amount of times to loop invoking the iteratee."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed index and amount.","source":"*  {Function} iteratee - Transformation function which is passed index and amount."}],"type":"function","isAsync":true,"functionTag":"timesAsync","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Nothing.","source":"*  {undefined} - Nothing.\n\t *"}},"timesMapAsync":{"category":"array","description":"Asynchronously iterates based on the amount given and maps the results awaited on by the iteratee each time to an array.","examples":[{"tag":"example","optional":false,"description":"import { timesMapAsync } from 'Acid'; await timesMapAsync(3, (item) => { return item; }); // => [0, 1, 2]","source":"import { timesMapAsync } from \"Acid\";\nawait timesMapAsync(3, (item) => {\n  return item;\n});\n// => [0, 1, 2]\n"}],"name":"timesMapAsync","params":[{"tag":"param","name":"amount","type":"Number","optional":false,"description":"- The amount of times to loop invoking the iteratee.","source":"*  {Number} amount - The amount of times to loop invoking the iteratee."},{"tag":"param","name":"iteratee","type":"Function","optional":false,"description":"- Transformation function which is passed index and amount.","source":"*  {Function} iteratee - Transformation function which is passed index and amount."},{"tag":"param","name":"results","type":"Array","optional":true,"description":"- Array that will have iteratee return pushed to.","source":"*  {Array} [results = []] - Array that will have iteratee return pushed to.","default":"[]"}],"type":"function","isAsync":true,"functionTag":"timesMapAsync","returns":{"tag":"returns","name":"-","type":"Array","optional":false,"description":"An array with iteratee's returned values.","source":"*  {Array} - An array with iteratee's returned values.\n\t *"}},"toggle":{"category":"utility","description":"Performs a toggle between 2 values using a deep or strict comparison.","examples":[{"tag":"example","optional":false,"description":"import { toggle } from 'Acid'; let toggleMe = true; toggleMe = toggle(toggleMe, true, false); // => false","source":"import { toggle } from \"Acid\";\nlet toggleMe = true;\ntoggleMe = toggle(toggleMe, true, false);\n// => false\n"}],"name":"toggle","params":[{"tag":"param","name":"value","type":"(string|number|Object|Array)","optional":false,"description":"- Strictly compared against on & off arguments.","source":"*  {(string|number|Object|Array)} value - Strictly compared against on & off arguments."},{"tag":"param","name":"on","type":"(string|number|Object|Array)","optional":false,"description":"- The first object to be compared to.","source":"*  {(string|number|Object|Array)} on - The first object to be compared to."},{"tag":"param","name":"off","type":"(string|number|Object|Array)","optional":false,"description":"- The second object to be compared to.","source":"*  {(string|number|Object|Array)} off - The second object to be compared to."}],"type":"function","functionTag":"toggle","returns":{"tag":"returns","name":"-","type":"(string|number|Object|Array)","optional":false,"description":"The opposing value to the current.","source":"*  {(string|number|Object|Array)} - The opposing value to the current.\n\t *"}},"UniqID":{"category":"utility","description":"Creates a unique numerical recyclable ID generator. The IDs are numerically ascending however freed ids are recycled when available.","examples":[{"tag":"example","optional":false,"description":"import { UniqID, construct, assert } from 'Acid'; const gen = construct(UniqID); assert(gen.get(), 0); assert(gen.get(), 1); gen.free(0); assert(gen.get(), 0);","source":"import { UniqID, construct, assert } from \"Acid\";\nconst gen = construct(UniqID);\nassert(gen.get(), 0);\nassert(gen.get(), 1);\ngen.free(0);\nassert(gen.get(), 0);\n"}],"name":"UniqID","type":"class","classTag":"UniqID","returns":{"tag":"returns","name":"-","type":"UniqID","optional":false,"description":"Returns a new instance of UniqID.","source":"*  {UniqID} - Returns a new instance of UniqID.\n\t *"}},"UniqID.get":{"category":"utility","description":"Generates a new ID or recycle one that is no longer used.","examples":[{"tag":"example","optional":false,"description":"import { UniqID, construct, assert } from 'Acid'; const gen = construct(UniqID); assert(gen.get(), 0);","source":"import { UniqID, construct, assert } from \"Acid\";\nconst gen = construct(UniqID);\nassert(gen.get(), 0);\n"}],"name":"UniqID.get","type":"class","classTag":"UniqID","functionTag":"get","returns":{"tag":"returns","name":"-","type":"Number","optional":false,"description":"Returns a unique id.","source":"*  {Number} - Returns a unique id.\n\t\t *"}},"UniqID.free":{"category":"utility","description":"Frees an UID so that it may be recycled for later use.","examples":[{"tag":"example","optional":false,"description":"import { UniqID, construct, assert } from 'Acid'; const gen = construct(UniqID); assert(gen.get(), 0); gen.free(0); assert(gen.get(), 0);","source":"import { UniqID, construct, assert } from \"Acid\";\nconst gen = construct(UniqID);\nassert(gen.get(), 0);\ngen.free(0);\nassert(gen.get(), 0);\n"}],"name":"UniqID.free","params":[{"tag":"param","name":"id","type":"Number","optional":false,"description":"- Number to be freed.","source":"*  {Number} id - Number to be freed."}],"type":"class","classTag":"UniqID","functionTag":"free","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Nothing is returned.","source":"*  {undefined} - Nothing is returned.\n\t\t *"}},"uniqID":{"category":"utility","description":"A built in constructed instance of UniqID. Creates a unique numerical recyclable ID. The IDs are numerically ascending however freed ids are recycled when available.","examples":[{"tag":"example","optional":false,"description":"import { uniqID, assert } from 'Acid'; assert(uniqID.get(), 0); assert(uniqID.get(), 1); uniqID.free(0); assert(uniqID.get(), 0);","source":"import { uniqID, assert } from \"Acid\";\nassert(uniqID.get(), 0);\nassert(uniqID.get(), 1);\nuniqID.free(0);\nassert(uniqID.get(), 0);\n"}],"name":"uniqID","type":"function","functionTag":"uniqID"},"virtualStorage":{"category":"browser","description":"The virtualStorage function is a factory which wraps the VirtualStorage class constructor.","examples":[{"tag":"example","optional":false,"description":"import { virtualStorage, assert } from 'Acid'; const vStorage = virtualStorage(); vStorage.setItem('title', 'value'); assert(vStorage.getItem('title'), 'value');","source":"import { virtualStorage, assert } from \"Acid\";\nconst vStorage = virtualStorage();\nvStorage.setItem(\"title\", \"value\");\nassert(vStorage.getItem(\"title\"), \"value\");\n"}],"name":"virtualStorage","type":"function","functionTag":"virtualStorage","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a new VirtualStorage Object.","source":"*  {*} - Returns a new VirtualStorage Object.\n\t *"}},"isAgent":{"category":"browser","description":"Checks to see of the browser agent has a string.","examples":[{"tag":"example","optional":false,"description":"isAgent('mobile'); // => false","source":"isAgent(\"mobile\");\n// => false\n"}],"name":"isAgent","params":[{"tag":"param","name":"source","type":"String","optional":false,"description":"- The string to search for.","source":"*  {String} source - The string to search for."}],"type":"function","functionTag":"isAgent","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true or false.","source":"*  {Boolean} - Returns true or false."}},"eventAdd":{"category":"browser","description":"Attaches an event listener to a node.","examples":[{"tag":"example","optional":false,"description":"eventAdd(document.body, 'click', () => {console.log('CLICKED');}); // = > document.body","source":"eventAdd(document.body, \"click\", () => {\n  console.log(\"CLICKED\");\n}); // = > document.body\n"}],"name":"eventAdd","params":[{"tag":"param","name":"node","type":"Node","optional":false,"description":"- Given node.","source":"*  {Node} node - Given node."},{"tag":"param","name":"eventName","type":"String","optional":false,"description":"- A string representing the event type.","source":"*  {String} eventName - A string representing the event type."},{"tag":"param","name":"callback","type":"Object|Function","optional":false,"description":"- The object which receives a notification when an event of the specified type occurs.","source":"*  {Object|Function} callback - The object which receives a notification when an event of the specified type occurs."},{"tag":"param","name":"useCapture","type":"Boolean","optional":false,"description":"- The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.","source":"*  {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation."}],"type":"function","functionTag":"eventAdd","returns":{"tag":"returns","name":"-","type":"Node","optional":false,"description":"Returns given node.","source":"*  {Node} - Returns given node.\n\t *"}},"eventRemove":{"category":"browser","description":"Attaches an event listener to a node.","examples":[{"tag":"example","optional":false,"description":"eventRemove(document.body, () => {console.log('CLICKED');}); // = > Undefined","source":"eventRemove(document.body, () => {\n  console.log(\"CLICKED\");\n}); // = > Undefined\n"}],"name":"eventRemove","params":[{"tag":"param","name":"node","type":"Node","optional":false,"description":"- Given node.","source":"*  {Node} node - Given node."},{"tag":"param","name":"eventName","type":"String","optional":false,"description":"- A string representing the event type.","source":"*  {String} eventName - A string representing the event type."},{"tag":"param","name":"callback","type":"Object|Function","optional":false,"description":"- The object which receives a notification when an event of the specified type occurs.","source":"*  {Object|Function} callback - The object which receives a notification when an event of the specified type occurs."},{"tag":"param","name":"useCapture","type":"Boolean","optional":false,"description":"- The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.","source":"*  {Boolean} useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation."}],"type":"function","functionTag":"eventRemove","returns":{"tag":"returns","name":"-","type":"Node","optional":false,"description":"Returns given node.","source":"*  {Node} - Returns given node.\n\t *"}},"isEnter":{"category":"browser","description":"Checks if the keycode of the event is strictly equal to 13.","examples":[{"tag":"example","optional":false,"description":"isEnter('click'); // => false","source":"isEnter(\"click\");\n// => false\n"}],"name":"isEnter","params":[{"tag":"param","name":"eventObject","type":"Object","optional":false,"description":"- Object to be checked.","source":"*  {Object} eventObject - Object to be checked."}],"type":"function","functionTag":"isEnter","returns":{"tag":"returns","name":"-","type":"Boolean","optional":false,"description":"Returns true if the keycode property of the object equals 13.","source":"*  {Boolean} - Returns true if the keycode property of the object equals 13.\n\t *"}},"importjs":{"category":"browser","description":"Asynchronously import a js file and append it to the head node. If a script fails to load importjs won't reject the promise rather it'll return the error event to limit further complications & reduce code complexity.","examples":[{"tag":"example","optional":false,"description":"importjs('core.js'); importjs('core');","source":"importjs(\"core.js\");\nimportjs(\"core\");\n"}],"name":"importjs","params":[{"tag":"param","name":"url","type":"*","optional":false,"description":"- URL of the script to import. If not \".\" is found in the file name \".js\" will be appended.","source":"*  {*} url - URL of the script to import. If not \".\" is found in the file name \".js\" will be appended."}],"type":"function","isAsync":true,"functionTag":"importjs","returns":{"tag":"returns","name":"-","type":"Promise","optional":false,"description":"Returns a promise which returns a \"load\" or \"error\" event associated with the script.","source":"*  {Promise} - Returns a promise which returns a \"load\" or \"error\" event associated with the script.\n\t *"}},"Crate":{"category":"browser","description":"Constructs a virtual storage container with localStorage support. Crate will fallback to strictly virtual storage if localStorage isn't supported. If localStorage is supported virtual storage will be used first & only fallback to localStorage when needed. Crate is ideal as a seemless drop in replacement for localStorage when not supported or allowed.","examples":[{"tag":"example","optional":false,"description":"import { Crate, construct, assert } from 'Acid'; const storageCrate = construct(Crate); storageCrate.setItem('key', 'value'); assert(storageCrate.getItem('key'), 'value');","source":"import { Crate, construct, assert } from \"Acid\";\nconst storageCrate = construct(Crate);\nstorageCrate.setItem(\"key\", \"value\");\nassert(storageCrate.getItem(\"key\"), \"value\");\n"}],"name":"Crate","type":"class","classTag":"Crate","returns":{"tag":"returns","name":"-","type":"Crate","optional":false,"description":"Returns a new instance of Crate.","source":"*  {Crate} - Returns a new instance of Crate.\n\t *"}},"Crate.setItem":{"category":"browser","description":"Save an item to a crate.","examples":[{"tag":"example","optional":false,"description":"import { Crate, construct, assert } from 'Acid'; const storageCrate = construct(Crate); storageCrate.setItem('key', 'value'); assert(storageCrate.getItem('key'), 'value');","source":"import { Crate, construct, assert } from \"Acid\";\nconst storageCrate = construct(Crate);\nstorageCrate.setItem(\"key\", \"value\");\nassert(storageCrate.getItem(\"key\"), \"value\");\n"}],"name":"Crate.setItem","params":[{"tag":"param","name":"key","type":"String","optional":false,"description":"- The key used to store the data.","source":"*  {String} key - The key used to store the data."},{"tag":"param","name":"value","type":"*","optional":false,"description":"- If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify.","source":"*  {*} value - If saving to localStorage, & the object isn't a string it will be converted to a string using JSON.stringify."}],"type":"class","classTag":"Crate","functionTag":"setItem","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t\t *"}},"Crate.getItem":{"category":"browser","description":"Get an item from a crate.","examples":[{"tag":"example","optional":false,"description":"import { Crate, construct, assert } from 'Acid'; const storageCrate = construct(Crate); storageCrate.setItem('key', 'value'); assert(storageCrate.getItem('key'), 'value');","source":"import { Crate, construct, assert } from \"Acid\";\nconst storageCrate = construct(Crate);\nstorageCrate.setItem(\"key\", \"value\");\nassert(storageCrate.getItem(\"key\"), \"value\");\n"}],"name":"Crate.getItem","params":[{"tag":"param","name":"key","type":"String","optional":false,"description":"- The key used to store the data.","source":"*  {String} key - The key used to store the data."}],"type":"class","classTag":"Crate","functionTag":"getItem","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t\t *"}},"Crate.clear":{"category":"browser","description":"Clears all data for the crate including all of localStorage if supported.","examples":[{"tag":"example","optional":false,"description":"import { Crate, construct, assert } from 'Acid'; const storageCrate = construct(Crate); storageCrate.setItem('key', 'value'); assert(storageCrate.getItem('key'), 'value'); storageCrate.clear(); assert(storageCrate.getItem('key'), undefined);","source":"import { Crate, construct, assert } from \"Acid\";\nconst storageCrate = construct(Crate);\nstorageCrate.setItem(\"key\", \"value\");\nassert(storageCrate.getItem(\"key\"), \"value\");\nstorageCrate.clear();\nassert(storageCrate.getItem(\"key\"), undefined);\n"}],"name":"Crate.clear","params":[{"tag":"param","name":"key","type":"String","optional":false,"description":"- The key used to remove data.","source":"*  {String} key - The key used to remove data."}],"type":"class","classTag":"Crate","functionTag":"clear","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t\t *"}},"Crate.removeItem":{"category":"browser","description":"Remove an item from a crate.","examples":[{"tag":"example","optional":false,"description":"import { Crate, construct, assert } from 'Acid'; const storageCrate = construct(Crate); storageCrate.setItem('key', 'value'); assert(storageCrate.getItem('key'), 'value'); storageCrate.removeItem('key'); assert(storageCrate.getItem('key'), undefined);","source":"import { Crate, construct, assert } from \"Acid\";\nconst storageCrate = construct(Crate);\nstorageCrate.setItem(\"key\", \"value\");\nassert(storageCrate.getItem(\"key\"), \"value\");\nstorageCrate.removeItem(\"key\");\nassert(storageCrate.getItem(\"key\"), undefined);\n"}],"name":"Crate.removeItem","params":[{"tag":"param","name":"key","type":"String","optional":false,"description":"- The key used to remove data.","source":"*  {String} key - The key used to remove data."}],"type":"class","classTag":"Crate","functionTag":"removeItem","returns":{"tag":"returns","name":"-","type":"undefined","optional":false,"description":"Returns undefined.","source":"*  {undefined} - Returns undefined.\n\t\t *"}},"crate":{"category":"browser","description":"The crate function is a factory which wraps the Crate class constructor.","examples":[{"tag":"example","optional":false,"description":"const storageCrate = crate(); // => New Crate Object","source":"const storageCrate = crate();\n// => New Crate Object\n"}],"name":"crate","type":"function","functionTag":"crate","returns":{"tag":"returns","name":"-","type":"*","optional":false,"description":"Returns a new Crate Object.","source":"*  {*} - Returns a new Crate Object.\n\t *"}}}}